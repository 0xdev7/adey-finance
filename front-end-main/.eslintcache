[{"E:\\projects\\adey\\front-end-main\\src\\index.tsx":"1","E:\\projects\\adey\\front-end-main\\src\\serviceWorker.js":"2","E:\\projects\\adey\\front-end-main\\src\\i18n.js":"3","E:\\projects\\adey\\front-end-main\\src\\App.tsx":"4","E:\\projects\\adey\\front-end-main\\src\\newTheme.js":"5","E:\\projects\\adey\\front-end-main\\src\\config.ts":"6","E:\\projects\\adey\\front-end-main\\src\\hooks\\useNetworkPrompt.ts":"7","E:\\projects\\adey\\front-end-main\\src\\state\\Updaters.tsx":"8","E:\\projects\\adey\\front-end-main\\src\\components\\Loader\\index.js":"9","E:\\projects\\adey\\front-end-main\\src\\views\\Bond\\index.js":"10","E:\\projects\\adey\\front-end-main\\src\\views\\Home\\index.js":"11","E:\\projects\\adey\\front-end-main\\src\\views\\Dashboard\\index.js":"12","E:\\projects\\adey\\front-end-main\\src\\views\\Dao\\index.js":"13","E:\\projects\\adey\\front-end-main\\src\\views\\Winery\\index.js":"14","E:\\projects\\adey\\front-end-main\\src\\views\\Vineyard\\index.js":"15","E:\\projects\\adey\\front-end-main\\src\\views\\Launchpad\\index.js":"16","E:\\projects\\adey\\front-end-main\\src\\views\\Roadmap\\index.js":"17","E:\\projects\\adey\\front-end-main\\src\\views\\Help\\index.js":"18","E:\\projects\\adey\\front-end-main\\src\\views\\Stats\\index.js":"19","E:\\projects\\adey\\front-end-main\\src\\views\\Nodes\\index.js":"20","E:\\projects\\adey\\front-end-main\\src\\views\\NFTRaffle\\index.js":"21","E:\\projects\\adey\\front-end-main\\src\\views\\Strategies\\index.js":"22","E:\\projects\\adey\\front-end-main\\src\\views\\Raffle\\index.js":"23","E:\\projects\\adey\\front-end-main\\src\\views\\Rebates\\index.js":"24","E:\\projects\\adey\\front-end-main\\src\\state\\index.ts":"25","E:\\projects\\adey\\front-end-main\\src\\theme\\index.ts":"26","E:\\projects\\adey\\front-end-main\\src\\contexts\\Banks\\index.ts":"27","E:\\projects\\adey\\front-end-main\\src\\contexts\\GrapeFinanceProvider\\index.ts":"28","E:\\projects\\adey\\front-end-main\\src\\contexts\\Modals\\index.ts":"29","E:\\projects\\adey\\front-end-main\\src\\contexts\\RefreshContext\\index.ts":"30","E:\\projects\\adey\\front-end-main\\src\\components\\NetworkVerifier\\index.ts":"31","E:\\projects\\adey\\front-end-main\\src\\components\\BackgroundDecoration\\index.ts":"32","E:\\projects\\adey\\front-end-main\\src\\views\\Extinction\\index.ts":"33","E:\\projects\\adey\\front-end-main\\src\\components\\Popups\\index.tsx":"34","E:\\projects\\adey\\front-end-main\\src\\state\\application\\updater.ts":"35","E:\\projects\\adey\\front-end-main\\src\\views\\Leaderboard\\index.tsx":"36","E:\\projects\\adey\\front-end-main\\src\\state\\transactions\\updater.tsx":"37","E:\\projects\\adey\\front-end-main\\src\\components\\Loader\\Loader.js":"38","E:\\projects\\adey\\front-end-main\\src\\views\\Home\\Home.js":"39","E:\\projects\\adey\\front-end-main\\src\\views\\Winery\\Boardroom.js":"40","E:\\projects\\adey\\front-end-main\\src\\views\\Vineyard\\Farm.js":"41","E:\\projects\\adey\\front-end-main\\src\\views\\Rebates\\Cemetery.js":"42","E:\\projects\\adey\\front-end-main\\src\\state\\transactions\\reducer.ts":"43","E:\\projects\\adey\\front-end-main\\src\\state\\application\\reducer.ts":"44","E:\\projects\\adey\\front-end-main\\src\\theme\\colors.ts":"45","E:\\projects\\adey\\front-end-main\\src\\contexts\\Banks\\context.ts":"46","E:\\projects\\adey\\front-end-main\\src\\services\\event.ts":"47","E:\\projects\\adey\\front-end-main\\src\\views\\Dashboard\\Dashboard.tsx":"48","E:\\projects\\adey\\front-end-main\\src\\views\\Bond\\Bond.tsx":"49","E:\\projects\\adey\\front-end-main\\src\\views\\Launchpad\\Launchpad.tsx":"50","E:\\projects\\adey\\front-end-main\\src\\views\\Dao\\Dao.tsx":"51","E:\\projects\\adey\\front-end-main\\src\\views\\Help\\Help.tsx":"52","E:\\projects\\adey\\front-end-main\\src\\views\\NFTRaffle\\NFTRaffle.tsx":"53","E:\\projects\\adey\\front-end-main\\src\\views\\Roadmap\\Roadmap.tsx":"54","E:\\projects\\adey\\front-end-main\\src\\views\\Strategies\\Strategies.tsx":"55","E:\\projects\\adey\\front-end-main\\src\\views\\Raffle\\Raffle.tsx":"56","E:\\projects\\adey\\front-end-main\\src\\views\\Stats\\Stats.tsx":"57","E:\\projects\\adey\\front-end-main\\src\\contexts\\GrapeFinanceProvider\\GrapeFinanceProvider.tsx":"58","E:\\projects\\adey\\front-end-main\\src\\contexts\\Banks\\Banks.tsx":"59","E:\\projects\\adey\\front-end-main\\src\\contexts\\Modals\\Modals.tsx":"60","E:\\projects\\adey\\front-end-main\\src\\contexts\\RefreshContext\\RefreshContextProvider.tsx":"61","E:\\projects\\adey\\front-end-main\\src\\state\\application\\hooks.ts":"62","E:\\projects\\adey\\front-end-main\\src\\components\\BackgroundDecoration\\BackgroundDecoration.tsx":"63","E:\\projects\\adey\\front-end-main\\src\\components\\NetworkVerifier\\NetworkVerifier.tsx":"64","E:\\projects\\adey\\front-end-main\\src\\views\\Extinction\\Extinction.tsx":"65","E:\\projects\\adey\\front-end-main\\src\\utils\\provider.ts":"66","E:\\projects\\adey\\front-end-main\\src\\utils\\convertTime.ts":"67","E:\\projects\\adey\\front-end-main\\src\\views\\Nodes\\GrapeNodes.jsx":"68","E:\\projects\\adey\\front-end-main\\src\\components\\Popups\\PopupItem.tsx":"69","E:\\projects\\adey\\front-end-main\\src\\hooks\\useRebateTreasury.js":"70","E:\\projects\\adey\\front-end-main\\src\\views\\Rebates\\CemeteryCard.js":"71","E:\\projects\\adey\\front-end-main\\src\\hooks\\useWineStats.ts":"72","E:\\projects\\adey\\front-end-main\\src\\hooks\\useBanks.ts":"73","E:\\projects\\adey\\front-end-main\\src\\state\\application\\actions.ts":"74","E:\\projects\\adey\\front-end-main\\src\\state\\transactions\\actions.ts":"75","E:\\projects\\adey\\front-end-main\\src\\hooks\\useGrapeFinance.ts":"76","E:\\projects\\adey\\front-end-main\\src\\hooks\\useRaffleBalance.ts":"77","E:\\projects\\adey\\front-end-main\\src\\components\\Page\\index.ts":"78","E:\\projects\\adey\\front-end-main\\src\\grape-finance\\ether-utils.ts":"79","E:\\projects\\adey\\front-end-main\\src\\hooks\\usePegPool.ts":"80","E:\\projects\\adey\\front-end-main\\src\\hooks\\usePegPoolRewards.ts":"81","E:\\projects\\adey\\front-end-main\\src\\state\\transactions\\hooks.tsx":"82","E:\\projects\\adey\\front-end-main\\src\\views\\Raffle\\components\\ExchangeCard.tsx":"83","E:\\projects\\adey\\front-end-main\\src\\hooks\\useBank.ts":"84","E:\\projects\\adey\\front-end-main\\src\\views\\Extinction\\components\\PegPoolInfo.tsx":"85","E:\\projects\\adey\\front-end-main\\src\\components\\Popups\\ErrorPopup.tsx":"86","E:\\projects\\adey\\front-end-main\\src\\views\\NFTRaffle\\components\\ExchangeCard.tsx":"87","E:\\projects\\adey\\front-end-main\\src\\components\\Popups\\TransactionPopup.tsx":"88","E:\\projects\\adey\\front-end-main\\src\\components\\VineyardInfoCard\\index.ts":"89","E:\\projects\\adey\\front-end-main\\src\\hooks\\useRefresh.ts":"90","E:\\projects\\adey\\front-end-main\\src\\components\\Chart\\index.js":"91","E:\\projects\\adey\\front-end-main\\src\\components\\LaunchCountdown\\index.ts":"92","E:\\projects\\adey\\front-end-main\\src\\components\\UnlockWallet\\index.ts":"93","E:\\projects\\adey\\front-end-main\\src\\views\\GrapeNode\\index.js":"94","E:\\projects\\adey\\front-end-main\\src\\grape-finance\\index.ts":"95","E:\\projects\\adey\\front-end-main\\src\\components\\TokenSymbol\\index.ts":"96","E:\\projects\\adey\\front-end-main\\src\\utils\\dexscreener.ts":"97","E:\\projects\\adey\\front-end-main\\src\\components\\NodesInfoCard\\index.ts":"98","E:\\projects\\adey\\front-end-main\\src\\hooks\\useTokenBalance.ts":"99","E:\\projects\\adey\\front-end-main\\src\\hooks\\useModal.ts":"100","E:\\projects\\adey\\front-end-main\\src\\components\\Page\\Page.tsx":"101","E:\\projects\\adey\\front-end-main\\src\\grape-finance\\config.ts":"102","E:\\projects\\adey\\front-end-main\\src\\hooks\\useCashPriceInEstimatedTWAP.ts":"103","E:\\projects\\adey\\front-end-main\\src\\hooks\\useApprove.ts":"104","E:\\projects\\adey\\front-end-main\\src\\views\\Raffle\\components\\ExchangeModal.tsx":"105","E:\\projects\\adey\\front-end-main\\src\\hooks\\usePegPoolWithdraw.ts":"106","E:\\projects\\adey\\front-end-main\\src\\views\\Bank\\components\\WithdrawModal.tsx":"107","E:\\projects\\adey\\front-end-main\\src\\components\\Chart\\Chart.js":"108","E:\\projects\\adey\\front-end-main\\src\\views\\NFTRaffle\\components\\ExchangeModal.tsx":"109","E:\\projects\\adey\\front-end-main\\src\\components\\VineyardInfoCard\\VineyardInfoCard.tsx":"110","E:\\projects\\adey\\front-end-main\\src\\grape-finance\\GrapeFinance.ts":"111","E:\\projects\\adey\\front-end-main\\src\\components\\LaunchCountdown\\LaunchCountdown.tsx":"112","E:\\projects\\adey\\front-end-main\\src\\components\\UnlockWallet\\UnlockWallet.tsx":"113","E:\\projects\\adey\\front-end-main\\src\\components\\TokenSymbol\\TokenSymbol.tsx":"114","E:\\projects\\adey\\front-end-main\\src\\components\\Label\\index.ts":"115","E:\\projects\\adey\\front-end-main\\src\\components\\CardContent\\index.ts":"116","E:\\projects\\adey\\front-end-main\\src\\hooks\\useAllowance.ts":"117","E:\\projects\\adey\\front-end-main\\src\\components\\NodesInfoCard\\NodesInfoCard.tsx":"118","E:\\projects\\adey\\front-end-main\\src\\hooks\\useHandleTransactionReceipt.ts":"119","E:\\projects\\adey\\front-end-main\\src\\utils\\formatBalance.ts":"120","E:\\projects\\adey\\front-end-main\\src\\views\\GrapeNode\\GrapeNode.jsx":"121","E:\\projects\\adey\\front-end-main\\src\\utils\\constants.ts":"122","E:\\projects\\adey\\front-end-main\\src\\grape-finance\\ERC20.ts":"123","E:\\projects\\adey\\front-end-main\\src\\components\\Nav\\AccountButton.tsx":"124","E:\\projects\\adey\\front-end-main\\src\\hooks\\useStatsForPool.ts":"125","E:\\projects\\adey\\front-end-main\\src\\components\\TokenInput\\index.ts":"126","E:\\projects\\adey\\front-end-main\\src\\components\\ModalTitle\\index.ts":"127","E:\\projects\\adey\\front-end-main\\src\\components\\Label\\Label.tsx":"128","E:\\projects\\adey\\front-end-main\\src\\components\\CardContent\\CardContent.tsx":"129","E:\\projects\\adey\\front-end-main\\src\\components\\ModalActions\\index.ts":"130","E:\\projects\\adey\\front-end-main\\src\\hooks\\useDailyDrip.ts":"131","E:\\projects\\adey\\front-end-main\\src\\components\\Modal\\index.ts":"132","E:\\projects\\adey\\front-end-main\\src\\components\\PoolCardHeader\\index.ts":"133","E:\\projects\\adey\\front-end-main\\src\\components\\NodeCardContent\\index.ts":"134","E:\\projects\\adey\\front-end-main\\src\\components\\TokenInput\\TokenInput.tsx":"135","E:\\projects\\adey\\front-end-main\\src\\hooks\\useENS.ts":"136","E:\\projects\\adey\\front-end-main\\src\\components\\ModalTitle\\ModalTitle.tsx":"137","E:\\projects\\adey\\front-end-main\\src\\components\\ModalActions\\ModalActions.tsx":"138","E:\\projects\\adey\\front-end-main\\src\\components\\Nav\\AccountModal.tsx":"139","E:\\projects\\adey\\front-end-main\\src\\components\\Modal\\Modal.tsx":"140","E:\\projects\\adey\\front-end-main\\src\\components\\WalletProviderModal\\index.js":"141","E:\\projects\\adey\\front-end-main\\src\\components\\PoolCardHeader\\PoolCardHeader.tsx":"142","E:\\projects\\adey\\front-end-main\\src\\components\\NodeCardContent\\NodeCardContent.tsx":"143","E:\\projects\\adey\\front-end-main\\src\\components\\WalletProviderModal\\WalletProviderModal.js":"144","E:\\projects\\adey\\front-end-main\\src\\components\\Input\\index.ts":"145","E:\\projects\\adey\\front-end-main\\src\\hooks\\useLpStatsBTC.ts":"146","E:\\projects\\adey\\front-end-main\\src\\hooks\\useGrapeStats.ts":"147","E:\\projects\\adey\\front-end-main\\src\\hooks\\useNodes.ts":"148","E:\\projects\\adey\\front-end-main\\src\\hooks\\useEarnings.ts":"149","E:\\projects\\adey\\front-end-main\\src\\components\\Input\\Input.tsx":"150","E:\\projects\\adey\\front-end-main\\src\\components\\WalletProviderModal\\WalletCard.js":"151","E:\\projects\\adey\\front-end-main\\src\\components\\Container\\index.ts":"152","E:\\projects\\adey\\front-end-main\\src\\components\\Card\\index.ts":"153","E:\\projects\\adey\\front-end-main\\src\\components\\Container\\Container.tsx":"154","E:\\projects\\adey\\front-end-main\\src\\components\\Card\\Card.tsx":"155","E:\\projects\\adey\\front-end-main\\src\\hooks\\useNodePrice.ts":"156","E:\\projects\\adey\\front-end-main\\src\\hooks\\useStakedTokenPriceInDollars.ts":"157","E:\\projects\\adey\\front-end-main\\src\\hooks\\useUserDetails.ts":"158","E:\\projects\\adey\\front-end-main\\src\\hooks\\useMaxPayout.ts":"159","E:\\projects\\adey\\front-end-main\\src\\hooks\\useTotalNodes.ts":"160","E:\\projects\\adey\\front-end-main\\src\\views\\GrapeNode\\components\\Stake.jsx":"161","E:\\projects\\adey\\front-end-main\\src\\views\\GrapeNode\\components\\Harvest.jsx":"162","E:\\projects\\adey\\front-end-main\\src\\components\\Spacer\\index.ts":"163","E:\\projects\\adey\\front-end-main\\src\\components\\PageHeader\\index.ts":"164","E:\\projects\\adey\\front-end-main\\src\\hooks\\useCompound.ts":"165","E:\\projects\\adey\\front-end-main\\src\\hooks\\useHarvest.ts":"166","E:\\projects\\adey\\front-end-main\\src\\views\\GrapeNode\\components\\ZapModal.tsx":"167","E:\\projects\\adey\\front-end-main\\src\\hooks\\useZapSW.ts":"168","E:\\projects\\adey\\front-end-main\\src\\hooks\\useStake.ts":"169","E:\\projects\\adey\\front-end-main\\src\\components\\Spacer\\Spacer.tsx":"170","E:\\projects\\adey\\front-end-main\\src\\components\\PageHeader\\PageHeader.tsx":"171","E:\\projects\\adey\\front-end-main\\src\\views\\GrapeNode\\components\\DepositModal.jsx":"172","E:\\projects\\adey\\front-end-main\\src\\components\\Value\\index.ts":"173","E:\\projects\\adey\\front-end-main\\src\\components\\CardIcon\\index.ts":"174","E:\\projects\\adey\\front-end-main\\src\\hooks\\useApproveSWZapper.ts":"175","E:\\projects\\adey\\front-end-main\\src\\hooks\\useLpStats.ts":"176","E:\\projects\\adey\\front-end-main\\src\\components\\IconButton\\index.ts":"177","E:\\projects\\adey\\front-end-main\\src\\components\\icons\\index.ts":"178","E:\\projects\\adey\\front-end-main\\src\\hooks\\useNodeText.ts":"179","E:\\projects\\adey\\front-end-main\\src\\components\\Value\\Value.tsx":"180","E:\\projects\\adey\\front-end-main\\src\\components\\CardIcon\\CardIcon.tsx":"181","E:\\projects\\adey\\front-end-main\\src\\components\\IconButton\\IconButton.tsx":"182","E:\\projects\\adey\\front-end-main\\src\\components\\icons\\AddIcon.tsx":"183","E:\\projects\\adey\\front-end-main\\src\\components\\icons\\RemoveIcon.tsx":"184","E:\\projects\\adey\\front-end-main\\src\\components\\Icon\\index.ts":"185","E:\\projects\\adey\\front-end-main\\src\\components\\Icon\\Icon.tsx":"186","E:\\projects\\adey\\front-end-main\\src\\hooks\\useStakedBalance.ts":"187","E:\\projects\\adey\\front-end-main\\src\\hooks\\useVintagePrice.ts":"188","E:\\projects\\adey\\front-end-main\\src\\hooks\\useEagerConnect.js":"189","E:\\projects\\adey\\front-end-main\\src\\components\\PoolCardContent\\index.ts":"190","E:\\projects\\adey\\front-end-main\\src\\components\\Button\\index.ts":"191","E:\\projects\\adey\\front-end-main\\src\\components\\Footer\\index.js":"192","E:\\projects\\adey\\front-end-main\\src\\components\\PoolCardContent\\PoolCardContent.tsx":"193","E:\\projects\\adey\\front-end-main\\src\\components\\Button\\Button.tsx":"194","E:\\projects\\adey\\front-end-main\\src\\components\\Footer\\Footer.js":"195","E:\\projects\\adey\\front-end-main\\src\\hooks\\usePegPoolWithdrawFee.ts":"196","E:\\projects\\adey\\front-end-main\\src\\hooks\\usePegPoolDeposit.ts":"197","E:\\projects\\adey\\front-end-main\\src\\views\\Extinction\\components\\PegPoolRewards.tsx":"198","E:\\projects\\adey\\front-end-main\\src\\views\\Bank\\components\\DepositModal.tsx":"199","E:\\projects\\adey\\front-end-main\\src\\hooks\\usePegPoolRewardsClaim.ts":"200","E:\\projects\\adey\\front-end-main\\src\\hooks\\usePegPoolCompound.ts":"201","E:\\projects\\adey\\front-end-main\\src\\views\\Rebates\\components\\DepositModal.tsx":"202","E:\\projects\\adey\\front-end-main\\src\\views\\Bond\\BondEstimatorModal.js":"203","E:\\projects\\adey\\front-end-main\\src\\views\\Dashboard\\DashboardBoardroomCard.js":"204","E:\\projects\\adey\\front-end-main\\src\\views\\Dashboard\\DashboardInfoCardNodes.js":"205","E:\\projects\\adey\\front-end-main\\src\\views\\Vineyard\\FarmCard.js":"206","E:\\projects\\adey\\front-end-main\\src\\0x.ts":"207","E:\\projects\\adey\\front-end-main\\src\\hooks\\useBondsPurchasable.ts":"208","E:\\projects\\adey\\front-end-main\\src\\hooks\\useCashPriceInLastTWAP.ts":"209","E:\\projects\\adey\\front-end-main\\src\\hooks\\useCompoundAll.ts":"210","E:\\projects\\adey\\front-end-main\\src\\hooks\\useWinepressUserInfo.ts":"211","E:\\projects\\adey\\front-end-main\\src\\hooks\\useBondStats.ts":"212","E:\\projects\\adey\\front-end-main\\src\\hooks\\useHarvestAll.ts":"213","E:\\projects\\adey\\front-end-main\\src\\hooks\\useWalletStats.ts":"214","E:\\projects\\adey\\front-end-main\\src\\hooks\\useTreasuryAllocationTimes.ts":"215","E:\\projects\\adey\\front-end-main\\src\\grape-finance\\constants.ts":"216","E:\\projects\\adey\\front-end-main\\src\\hooks\\useGetBoardroomPrintRate.ts":"217","E:\\projects\\adey\\front-end-main\\src\\hooks\\useTotalStakedOnBoardroom.ts":"218","E:\\projects\\adey\\front-end-main\\src\\hooks\\useFetchBoardroomAPR.ts":"219","E:\\projects\\adey\\front-end-main\\src\\hooks\\useCurrentEpoch.ts":"220","E:\\projects\\adey\\front-end-main\\src\\hooks\\useStakedBalanceOnBoardroom.ts":"221","E:\\projects\\adey\\front-end-main\\src\\hooks\\useRedeemOnBoardroom.ts":"222","E:\\projects\\adey\\front-end-main\\src\\views\\Dashboard\\ProgressCountdown.tsx":"223","E:\\projects\\adey\\front-end-main\\src\\hooks\\boardroom\\useWithdrawCheck.ts":"224","E:\\projects\\adey\\front-end-main\\src\\hooks\\boardroom\\useClaimRewardCheck.ts":"225","E:\\projects\\adey\\front-end-main\\src\\views\\Bond\\components\\ExchangeCard.tsx":"226","E:\\projects\\adey\\front-end-main\\src\\views\\Bond\\components\\ExchangeStat.tsx":"227","E:\\projects\\adey\\front-end-main\\src\\views\\Home\\GetStartedModal.js":"228","E:\\projects\\adey\\front-end-main\\src\\views\\Home\\AirdropRewardModal.js":"229","E:\\projects\\adey\\front-end-main\\src\\views\\Winery\\components\\ProgressCountdown.tsx":"230","E:\\projects\\adey\\front-end-main\\src\\views\\Winery\\components\\Stake.tsx":"231","E:\\projects\\adey\\front-end-main\\src\\views\\Winery\\components\\Harvest.tsx":"232","E:\\projects\\adey\\front-end-main\\src\\views\\Vineyard\\AprModal.js":"233","E:\\projects\\adey\\front-end-main\\src\\hooks\\useNodesRewardBalance.ts":"234","E:\\projects\\adey\\front-end-main\\src\\hooks\\useTotalValueLocked.ts":"235","E:\\projects\\adey\\front-end-main\\src\\hooks\\useGrapeMimSWTotalNode.ts":"236","E:\\projects\\adey\\front-end-main\\src\\hooks\\useGrapeTotalNodes.ts":"237","E:\\projects\\adey\\front-end-main\\src\\hooks\\useWineTotalNodes.ts":"238","E:\\projects\\adey\\front-end-main\\src\\hooks\\useHarvestFromBoardroom.ts":"239","E:\\projects\\adey\\front-end-main\\src\\hooks\\useEarningsOnBoardroom.ts":"240","E:\\projects\\adey\\front-end-main\\src\\views\\Bank\\index.ts":"241","E:\\projects\\adey\\front-end-main\\src\\hooks\\useFantomPrice.ts":"242","E:\\projects\\adey\\front-end-main\\src\\hooks\\useEarningsAll.ts":"243","E:\\projects\\adey\\front-end-main\\src\\components\\DashboardInfoCard\\index.ts":"244","E:\\projects\\adey\\front-end-main\\src\\hooks\\useIsWindowVisible.ts":"245","E:\\projects\\adey\\front-end-main\\src\\hooks\\useDebounce.ts":"246","E:\\projects\\adey\\front-end-main\\src\\hooks\\useCatchError.ts":"247","E:\\projects\\adey\\front-end-main\\src\\hooks\\useWalletNodesAndNFTs.ts":"248","E:\\projects\\adey\\front-end-main\\src\\hooks\\useWithdrawFromBoardroom.ts":"249","E:\\projects\\adey\\front-end-main\\src\\hooks\\useStakeToBoardroom.ts":"250","E:\\projects\\adey\\front-end-main\\src\\views\\Bond\\components\\ExchangeModal.tsx":"251","E:\\projects\\adey\\front-end-main\\src\\hooks\\boardroom\\useClaimRewardTimerBoardroom.ts":"252","E:\\projects\\adey\\front-end-main\\src\\hooks\\boardroom\\useUnstakeTimerBoardroom.ts":"253","E:\\projects\\adey\\front-end-main\\src\\views\\Winery\\components\\WithdrawModal.tsx":"254","E:\\projects\\adey\\front-end-main\\src\\views\\Winery\\components\\DepositModal.tsx":"255","E:\\projects\\adey\\front-end-main\\src\\components\\InfoCard\\index.ts":"256","E:\\projects\\adey\\front-end-main\\src\\components\\LPInfoCard\\index.ts":"257","E:\\projects\\adey\\front-end-main\\src\\views\\Bank\\Bank.tsx":"258","E:\\projects\\adey\\front-end-main\\src\\components\\DashboardInfoCard\\DashboardInfoCard.tsx":"259","E:\\projects\\adey\\front-end-main\\src\\components\\InfoCard\\InfoCard.tsx":"260","E:\\projects\\adey\\front-end-main\\src\\components\\LPInfoCard\\LPInfoCard.tsx":"261","E:\\projects\\adey\\front-end-main\\src\\hooks\\useRedeem.ts":"262","E:\\projects\\adey\\front-end-main\\src\\views\\Bank\\components\\Harvest.tsx":"263","E:\\projects\\adey\\front-end-main\\src\\views\\Bank\\components\\Stake.tsx":"264","E:\\projects\\adey\\front-end-main\\src\\views\\Bank\\components\\HarvestHermes.tsx":"265","E:\\projects\\adey\\front-end-main\\src\\views\\Bank\\components\\StratModal.tsx":"266","E:\\projects\\adey\\front-end-main\\src\\views\\Bank\\components\\ZapModalSW.tsx":"267","E:\\projects\\adey\\front-end-main\\src\\views\\Bank\\components\\ZapModal.tsx":"268","E:\\projects\\adey\\front-end-main\\src\\hooks\\useWithdraw.ts":"269","E:\\projects\\adey\\front-end-main\\src\\hooks\\useZap.ts":"270","E:\\projects\\adey\\front-end-main\\src\\components\\TokenSymbolAccessory\\index.ts":"271","E:\\projects\\adey\\front-end-main\\src\\components\\TokenSymbolButtonAccessory\\index.ts":"272","E:\\projects\\adey\\front-end-main\\src\\hooks\\useApproveZapper.ts":"273","E:\\projects\\adey\\front-end-main\\src\\components\\TokenSymbolAccessory\\TokenSymbolAccessory.tsx":"274","E:\\projects\\adey\\front-end-main\\src\\components\\TokenSymbolButtonAccessory\\TokenSymbolButtonAccessory.tsx":"275","E:\\projects\\adey\\front-end-main\\src\\hooks\\useSoftStats.ts":"276","E:\\projects\\adey\\front-end-main\\src\\components\\VineyardInfoCard\\components\\Stake.tsx":"277","E:\\projects\\adey\\front-end-main\\src\\components\\VineyardInfoCard\\components\\DepositModal.tsx":"278","E:\\projects\\adey\\front-end-main\\src\\components\\VineyardInfoCard\\components\\WithdrawModal.tsx":"279","E:\\projects\\adey\\front-end-main\\src\\components\\VineyardInfoCard\\components\\Harvest.tsx":"280","E:\\projects\\adey\\front-end-main\\src\\hooks\\useBNBPrice.ts":"281"},{"size":553,"mtime":1661131266000,"results":"282","hashOfConfig":"283"},{"size":5047,"mtime":1661131266000,"results":"284","hashOfConfig":"283"},{"size":1451,"mtime":1661131266000,"results":"285","hashOfConfig":"283"},{"size":5173,"mtime":1661769685206,"results":"286","hashOfConfig":"283"},{"size":864,"mtime":1661221513834,"results":"287","hashOfConfig":"283"},{"size":5446,"mtime":1663264399659,"results":"288","hashOfConfig":"283"},{"size":1319,"mtime":1662447847349,"results":"289","hashOfConfig":"283"},{"size":260,"mtime":1661131266000,"results":"290","hashOfConfig":"283"},{"size":55,"mtime":1661131266000,"results":"291","hashOfConfig":"283"},{"size":32,"mtime":1661131266000,"results":"292","hashOfConfig":"283"},{"size":32,"mtime":1661131266000,"results":"293","hashOfConfig":"283"},{"size":37,"mtime":1661131266000,"results":"294","hashOfConfig":"283"},{"size":34,"mtime":1661768246312,"results":"295","hashOfConfig":"283"},{"size":37,"mtime":1661131266000,"results":"296","hashOfConfig":"283"},{"size":32,"mtime":1661131266000,"results":"297","hashOfConfig":"283"},{"size":37,"mtime":1661131266000,"results":"298","hashOfConfig":"283"},{"size":35,"mtime":1661131266000,"results":"299","hashOfConfig":"283"},{"size":32,"mtime":1661131266000,"results":"300","hashOfConfig":"283"},{"size":33,"mtime":1661131266000,"results":"301","hashOfConfig":"283"},{"size":38,"mtime":1661131266000,"results":"302","hashOfConfig":"283"},{"size":37,"mtime":1661131266000,"results":"303","hashOfConfig":"283"},{"size":38,"mtime":1661131266000,"results":"304","hashOfConfig":"283"},{"size":34,"mtime":1661131266000,"results":"305","hashOfConfig":"283"},{"size":38,"mtime":1661131266000,"results":"306","hashOfConfig":"283"},{"size":646,"mtime":1661131266000,"results":"307","hashOfConfig":"283"},{"size":463,"mtime":1661131266000,"results":"308","hashOfConfig":"283"},{"size":79,"mtime":1661131266000,"results":"309","hashOfConfig":"283"},{"size":81,"mtime":1661131266000,"results":"310","hashOfConfig":"283"},{"size":43,"mtime":1661131266000,"results":"311","hashOfConfig":"283"},{"size":81,"mtime":1661131266000,"results":"312","hashOfConfig":"283"},{"size":43,"mtime":1661131266000,"results":"313","hashOfConfig":"283"},{"size":48,"mtime":1661131266000,"results":"314","hashOfConfig":"283"},{"size":40,"mtime":1661131266000,"results":"315","hashOfConfig":"283"},{"size":1723,"mtime":1661131266000,"results":"316","hashOfConfig":"283"},{"size":2062,"mtime":1661131266000,"results":"317","hashOfConfig":"283"},{"size":4462,"mtime":1661221287769,"results":"318","hashOfConfig":"283"},{"size":3123,"mtime":1661131266000,"results":"319","hashOfConfig":"283"},{"size":641,"mtime":1661875117337,"results":"320","hashOfConfig":"283"},{"size":25307,"mtime":1663229301814,"results":"321","hashOfConfig":"283"},{"size":9766,"mtime":1663309398317,"results":"322","hashOfConfig":"283"},{"size":2422,"mtime":1663263382457,"results":"323","hashOfConfig":"283"},{"size":6158,"mtime":1662593172384,"results":"324","hashOfConfig":"283"},{"size":1912,"mtime":1661131266000,"results":"325","hashOfConfig":"283"},{"size":1726,"mtime":1661131266000,"results":"326","hashOfConfig":"283"},{"size":648,"mtime":1661131266000,"results":"327","hashOfConfig":"283"},{"size":220,"mtime":1661131266000,"results":"328","hashOfConfig":"283"},{"size":470,"mtime":1661131266000,"results":"329","hashOfConfig":"283"},{"size":18696,"mtime":1662593172454,"results":"330","hashOfConfig":"283"},{"size":8237,"mtime":1663307251221,"results":"331","hashOfConfig":"283"},{"size":5165,"mtime":1661221287769,"results":"332","hashOfConfig":"283"},{"size":5995,"mtime":1663318346333,"results":"333","hashOfConfig":"283"},{"size":3707,"mtime":1661221287769,"results":"334","hashOfConfig":"283"},{"size":7082,"mtime":1662593172384,"results":"335","hashOfConfig":"283"},{"size":8292,"mtime":1662593172383,"results":"336","hashOfConfig":"283"},{"size":402,"mtime":1661753938656,"results":"337","hashOfConfig":"283"},{"size":6609,"mtime":1661221287769,"results":"338","hashOfConfig":"283"},{"size":862,"mtime":1661221287463,"results":"339","hashOfConfig":"283"},{"size":974,"mtime":1661131266000,"results":"340","hashOfConfig":"283"},{"size":1626,"mtime":1662469808340,"results":"341","hashOfConfig":"283"},{"size":1680,"mtime":1663345986219,"results":"342","hashOfConfig":"283"},{"size":893,"mtime":1661131266000,"results":"343","hashOfConfig":"283"},{"size":1863,"mtime":1661131266000,"results":"344","hashOfConfig":"283"},{"size":2553,"mtime":1661267444098,"results":"345","hashOfConfig":"283"},{"size":1012,"mtime":1661131266000,"results":"346","hashOfConfig":"283"},{"size":3397,"mtime":1662593172384,"results":"347","hashOfConfig":"283"},{"size":403,"mtime":1661131266000,"results":"348","hashOfConfig":"283"},{"size":585,"mtime":1661131266000,"results":"349","hashOfConfig":"283"},{"size":2013,"mtime":1661221287769,"results":"350","hashOfConfig":"283"},{"size":2404,"mtime":1661131266000,"results":"351","hashOfConfig":"283"},{"size":12149,"mtime":1662518639162,"results":"352","hashOfConfig":"283"},{"size":3723,"mtime":1661131266000,"results":"353","hashOfConfig":"283"},{"size":646,"mtime":1661131266000,"results":"354","hashOfConfig":"283"},{"size":210,"mtime":1661131266000,"results":"355","hashOfConfig":"283"},{"size":697,"mtime":1661131266000,"results":"356","hashOfConfig":"283"},{"size":993,"mtime":1661131266000,"results":"357","hashOfConfig":"283"},{"size":230,"mtime":1661131266000,"results":"358","hashOfConfig":"283"},{"size":718,"mtime":1661131266000,"results":"359","hashOfConfig":"283"},{"size":32,"mtime":1661131266000,"results":"360","hashOfConfig":"283"},{"size":753,"mtime":1661131266000,"results":"361","hashOfConfig":"283"},{"size":878,"mtime":1661131266000,"results":"362","hashOfConfig":"283"},{"size":2824,"mtime":1661131266000,"results":"363","hashOfConfig":"283"},{"size":3123,"mtime":1661131266000,"results":"364","hashOfConfig":"283"},{"size":3274,"mtime":1661221514268,"results":"365","hashOfConfig":"283"},{"size":338,"mtime":1661131266000,"results":"366","hashOfConfig":"283"},{"size":5445,"mtime":1662593172601,"results":"367","hashOfConfig":"283"},{"size":950,"mtime":1661131266000,"results":"368","hashOfConfig":"283"},{"size":3261,"mtime":1662593172601,"results":"369","hashOfConfig":"283"},{"size":1224,"mtime":1661131266000,"results":"370","hashOfConfig":"283"},{"size":44,"mtime":1661131266000,"results":"371","hashOfConfig":"283"},{"size":252,"mtime":1661131266000,"results":"372","hashOfConfig":"283"},{"size":52,"mtime":1661131266000,"results":"373","hashOfConfig":"283"},{"size":82,"mtime":1661131266000,"results":"374","hashOfConfig":"283"},{"size":40,"mtime":1661131266000,"results":"375","hashOfConfig":"283"},{"size":37,"mtime":1661131266000,"results":"376","hashOfConfig":"283"},{"size":115,"mtime":1661131266000,"results":"377","hashOfConfig":"283"},{"size":39,"mtime":1661131266000,"results":"378","hashOfConfig":"283"},{"size":823,"mtime":1661131266000,"results":"379","hashOfConfig":"283"},{"size":41,"mtime":1661131266000,"results":"380","hashOfConfig":"283"},{"size":950,"mtime":1661131266000,"results":"381","hashOfConfig":"283"},{"size":354,"mtime":1661131266000,"results":"382","hashOfConfig":"283"},{"size":32659,"mtime":1662446484376,"results":"383","hashOfConfig":"283"},{"size":855,"mtime":1663223552720,"results":"384","hashOfConfig":"283"},{"size":687,"mtime":1661131266000,"results":"385","hashOfConfig":"283"},{"size":1948,"mtime":1661873614170,"results":"386","hashOfConfig":"283"},{"size":1634,"mtime":1661131266000,"results":"387","hashOfConfig":"283"},{"size":982,"mtime":1661131266000,"results":"388","hashOfConfig":"283"},{"size":1845,"mtime":1661131266000,"results":"389","hashOfConfig":"283"},{"size":261,"mtime":1661131266000,"results":"390","hashOfConfig":"283"},{"size":1634,"mtime":1661131266000,"results":"391","hashOfConfig":"283"},{"size":4240,"mtime":1663294670028,"results":"392","hashOfConfig":"283"},{"size":69281,"mtime":1663307557376,"results":"393","hashOfConfig":"283"},{"size":1638,"mtime":1661131266000,"results":"394","hashOfConfig":"283"},{"size":449,"mtime":1661131266000,"results":"395","hashOfConfig":"283"},{"size":2037,"mtime":1662592065859,"results":"396","hashOfConfig":"283"},{"size":33,"mtime":1661131266000,"results":"397","hashOfConfig":"283"},{"size":39,"mtime":1661131266000,"results":"398","hashOfConfig":"283"},{"size":814,"mtime":1661131266000,"results":"399","hashOfConfig":"283"},{"size":1223,"mtime":1661131266000,"results":"400","hashOfConfig":"283"},{"size":1067,"mtime":1661131266000,"results":"401","hashOfConfig":"283"},{"size":762,"mtime":1661131266000,"results":"402","hashOfConfig":"283"},{"size":9372,"mtime":1662562077565,"results":"403","hashOfConfig":"283"},{"size":1478,"mtime":1662562077158,"results":"404","hashOfConfig":"283"},{"size":7196,"mtime":1661131266000,"results":"405","hashOfConfig":"283"},{"size":1696,"mtime":1661131266000,"results":"406","hashOfConfig":"283"},{"size":1005,"mtime":1663291615117,"results":"407","hashOfConfig":"283"},{"size":38,"mtime":1661131266000,"results":"408","hashOfConfig":"283"},{"size":38,"mtime":1661131266000,"results":"409","hashOfConfig":"283"},{"size":1004,"mtime":1661131266000,"results":"410","hashOfConfig":"283"},{"size":356,"mtime":1661131266000,"results":"411","hashOfConfig":"283"},{"size":40,"mtime":1661131266000,"results":"412","hashOfConfig":"283"},{"size":916,"mtime":1661131266000,"results":"413","hashOfConfig":"283"},{"size":74,"mtime":1661131266000,"results":"414","hashOfConfig":"283"},{"size":42,"mtime":1661131266000,"results":"415","hashOfConfig":"283"},{"size":43,"mtime":1661131266000,"results":"416","hashOfConfig":"283"},{"size":1565,"mtime":1661131266000,"results":"417","hashOfConfig":"283"},{"size":529,"mtime":1661131266000,"results":"418","hashOfConfig":"283"},{"size":550,"mtime":1663346103737,"results":"419","hashOfConfig":"283"},{"size":944,"mtime":1661131266000,"results":"420","hashOfConfig":"283"},{"size":2738,"mtime":1661131266000,"results":"421","hashOfConfig":"283"},{"size":650,"mtime":1663345414474,"results":"422","hashOfConfig":"283"},{"size":94,"mtime":1661131266000,"results":"423","hashOfConfig":"283"},{"size":3899,"mtime":1663291690846,"results":"424","hashOfConfig":"283"},{"size":4670,"mtime":1662562077565,"results":"425","hashOfConfig":"283"},{"size":2717,"mtime":1661131266000,"results":"426","hashOfConfig":"283"},{"size":74,"mtime":1661131266000,"results":"427","hashOfConfig":"283"},{"size":668,"mtime":1661131266000,"results":"428","hashOfConfig":"283"},{"size":646,"mtime":1661131266000,"results":"429","hashOfConfig":"283"},{"size":904,"mtime":1661131266000,"results":"430","hashOfConfig":"283"},{"size":1055,"mtime":1661131266000,"results":"431","hashOfConfig":"283"},{"size":1104,"mtime":1661131266000,"results":"432","hashOfConfig":"283"},{"size":364,"mtime":1661131266000,"results":"433","hashOfConfig":"283"},{"size":37,"mtime":1661131266000,"results":"434","hashOfConfig":"283"},{"size":32,"mtime":1661131266000,"results":"435","hashOfConfig":"283"},{"size":916,"mtime":1661131266000,"results":"436","hashOfConfig":"283"},{"size":350,"mtime":1661131266000,"results":"437","hashOfConfig":"283"},{"size":1006,"mtime":1661131266000,"results":"438","hashOfConfig":"283"},{"size":1131,"mtime":1661131266000,"results":"439","hashOfConfig":"283"},{"size":922,"mtime":1661131266000,"results":"440","hashOfConfig":"283"},{"size":916,"mtime":1661131266000,"results":"441","hashOfConfig":"283"},{"size":879,"mtime":1661131266000,"results":"442","hashOfConfig":"283"},{"size":6209,"mtime":1662562077724,"results":"443","hashOfConfig":"283"},{"size":5344,"mtime":1662562077724,"results":"444","hashOfConfig":"283"},{"size":34,"mtime":1661131266000,"results":"445","hashOfConfig":"283"},{"size":38,"mtime":1661131266000,"results":"446","hashOfConfig":"283"},{"size":654,"mtime":1661131266000,"results":"447","hashOfConfig":"283"},{"size":677,"mtime":1661131266000,"results":"448","hashOfConfig":"283"},{"size":7416,"mtime":1662593172219,"results":"449","hashOfConfig":"283"},{"size":720,"mtime":1661131266000,"results":"450","hashOfConfig":"283"},{"size":1203,"mtime":1661131266000,"results":"451","hashOfConfig":"283"},{"size":693,"mtime":1661131266000,"results":"452","hashOfConfig":"283"},{"size":1006,"mtime":1661131266000,"results":"453","hashOfConfig":"283"},{"size":2434,"mtime":1661131266000,"results":"454","hashOfConfig":"283"},{"size":33,"mtime":1661131266000,"results":"455","hashOfConfig":"283"},{"size":36,"mtime":1661131266000,"results":"456","hashOfConfig":"283"},{"size":2308,"mtime":1661131266000,"results":"457","hashOfConfig":"283"},{"size":659,"mtime":1661131266000,"results":"458","hashOfConfig":"283"},{"size":38,"mtime":1661131266000,"results":"459","hashOfConfig":"283"},{"size":98,"mtime":1661131266000,"results":"460","hashOfConfig":"283"},{"size":359,"mtime":1661131266000,"results":"461","hashOfConfig":"283"},{"size":309,"mtime":1661131266000,"results":"462","hashOfConfig":"283"},{"size":529,"mtime":1661131266000,"results":"463","hashOfConfig":"283"},{"size":1868,"mtime":1661221514076,"results":"464","hashOfConfig":"283"},{"size":394,"mtime":1661131266000,"results":"465","hashOfConfig":"283"},{"size":386,"mtime":1661131266000,"results":"466","hashOfConfig":"283"},{"size":71,"mtime":1661131266000,"results":"467","hashOfConfig":"283"},{"size":271,"mtime":1661131266000,"results":"468","hashOfConfig":"283"},{"size":1027,"mtime":1661131266000,"results":"469","hashOfConfig":"283"},{"size":609,"mtime":1661131266000,"results":"470","hashOfConfig":"283"},{"size":625,"mtime":1661131266000,"results":"471","hashOfConfig":"283"},{"size":43,"mtime":1661131266000,"results":"472","hashOfConfig":"283"},{"size":34,"mtime":1661131266000,"results":"473","hashOfConfig":"283"},{"size":55,"mtime":1661131266000,"results":"474","hashOfConfig":"283"},{"size":2693,"mtime":1661131266000,"results":"475","hashOfConfig":"283"},{"size":3309,"mtime":1661131266000,"results":"476","hashOfConfig":"283"},{"size":2505,"mtime":1662518499154,"results":"477","hashOfConfig":"283"},{"size":1204,"mtime":1661131266000,"results":"478","hashOfConfig":"283"},{"size":995,"mtime":1661131266000,"results":"479","hashOfConfig":"283"},{"size":6207,"mtime":1662469828207,"results":"480","hashOfConfig":"283"},{"size":1706,"mtime":1661131266000,"results":"481","hashOfConfig":"283"},{"size":742,"mtime":1661131266000,"results":"482","hashOfConfig":"283"},{"size":765,"mtime":1661131266000,"results":"483","hashOfConfig":"283"},{"size":4040,"mtime":1661131266000,"results":"484","hashOfConfig":"283"},{"size":5814,"mtime":1661221514074,"results":"485","hashOfConfig":"283"},{"size":8561,"mtime":1662469828286,"results":"486","hashOfConfig":"283"},{"size":3396,"mtime":1661131266000,"results":"487","hashOfConfig":"283"},{"size":3310,"mtime":1661131266000,"results":"488","hashOfConfig":"283"},{"size":820,"mtime":1661131266000,"results":"489","hashOfConfig":"283"},{"size":593,"mtime":1661131266000,"results":"490","hashOfConfig":"283"},{"size":809,"mtime":1663309308004,"results":"491","hashOfConfig":"283"},{"size":1287,"mtime":1661131266000,"results":"492","hashOfConfig":"283"},{"size":774,"mtime":1661131266000,"results":"493","hashOfConfig":"283"},{"size":641,"mtime":1661131266000,"results":"494","hashOfConfig":"283"},{"size":1021,"mtime":1661131266000,"results":"495","hashOfConfig":"283"},{"size":680,"mtime":1661131266000,"results":"496","hashOfConfig":"283"},{"size":624,"mtime":1661131266000,"results":"497","hashOfConfig":"283"},{"size":197,"mtime":1661131266000,"results":"498","hashOfConfig":"283"},{"size":651,"mtime":1661131266000,"results":"499","hashOfConfig":"283"},{"size":783,"mtime":1661131266000,"results":"500","hashOfConfig":"283"},{"size":610,"mtime":1661131266000,"results":"501","hashOfConfig":"283"},{"size":698,"mtime":1661131266000,"results":"502","hashOfConfig":"283"},{"size":758,"mtime":1661131266000,"results":"503","hashOfConfig":"283"},{"size":643,"mtime":1661131266000,"results":"504","hashOfConfig":"283"},{"size":2092,"mtime":1661131266000,"results":"505","hashOfConfig":"283"},{"size":721,"mtime":1661131266000,"results":"506","hashOfConfig":"283"},{"size":749,"mtime":1661131266000,"results":"507","hashOfConfig":"283"},{"size":5025,"mtime":1661765771571,"results":"508","hashOfConfig":"283"},{"size":1107,"mtime":1661768112061,"results":"509","hashOfConfig":"283"},{"size":1192,"mtime":1661131266000,"results":"510","hashOfConfig":"283"},{"size":10681,"mtime":1662469828022,"results":"511","hashOfConfig":"283"},{"size":2093,"mtime":1661131266000,"results":"512","hashOfConfig":"283"},{"size":7127,"mtime":1663265613337,"results":"513","hashOfConfig":"283"},{"size":5260,"mtime":1661762498371,"results":"514","hashOfConfig":"283"},{"size":8388,"mtime":1661131266000,"results":"515","hashOfConfig":"283"},{"size":747,"mtime":1661131266000,"results":"516","hashOfConfig":"283"},{"size":662,"mtime":1663232698490,"results":"517","hashOfConfig":"283"},{"size":809,"mtime":1661131266000,"results":"518","hashOfConfig":"283"},{"size":796,"mtime":1661131266000,"results":"519","hashOfConfig":"283"},{"size":793,"mtime":1661131266000,"results":"520","hashOfConfig":"283"},{"size":579,"mtime":1661131266000,"results":"521","hashOfConfig":"283"},{"size":746,"mtime":1661131266000,"results":"522","hashOfConfig":"283"},{"size":32,"mtime":1661131266000,"results":"523","hashOfConfig":"283"},{"size":448,"mtime":1661131266000,"results":"524","hashOfConfig":"283"},{"size":1446,"mtime":1661131266000,"results":"525","hashOfConfig":"283"},{"size":45,"mtime":1661131266000,"results":"526","hashOfConfig":"283"},{"size":796,"mtime":1661131266000,"results":"527","hashOfConfig":"283"},{"size":717,"mtime":1661131266000,"results":"528","hashOfConfig":"283"},{"size":705,"mtime":1661131266000,"results":"529","hashOfConfig":"283"},{"size":835,"mtime":1661131266000,"results":"530","hashOfConfig":"283"},{"size":663,"mtime":1661131266000,"results":"531","hashOfConfig":"283"},{"size":609,"mtime":1661131266000,"results":"532","hashOfConfig":"283"},{"size":1634,"mtime":1661131266000,"results":"533","hashOfConfig":"283"},{"size":536,"mtime":1661131266000,"results":"534","hashOfConfig":"283"},{"size":524,"mtime":1661131266000,"results":"535","hashOfConfig":"283"},{"size":1664,"mtime":1661131266000,"results":"536","hashOfConfig":"283"},{"size":1606,"mtime":1661131266000,"results":"537","hashOfConfig":"283"},{"size":36,"mtime":1661131266000,"results":"538","hashOfConfig":"283"},{"size":38,"mtime":1661131266000,"results":"539","hashOfConfig":"283"},{"size":10363,"mtime":1663291908261,"results":"540","hashOfConfig":"283"},{"size":4061,"mtime":1662469828286,"results":"541","hashOfConfig":"283"},{"size":6587,"mtime":1661746476612,"results":"542","hashOfConfig":"283"},{"size":5490,"mtime":1661750969366,"results":"543","hashOfConfig":"283"},{"size":609,"mtime":1661131266000,"results":"544","hashOfConfig":"283"},{"size":4020,"mtime":1662469828207,"results":"545","hashOfConfig":"283"},{"size":7634,"mtime":1661221514518,"results":"546","hashOfConfig":"283"},{"size":2969,"mtime":1662469828286,"results":"547","hashOfConfig":"283"},{"size":362,"mtime":1661131266000,"results":"548","hashOfConfig":"283"},{"size":7416,"mtime":1662593172383,"results":"549","hashOfConfig":"283"},{"size":8262,"mtime":1662593172219,"results":"550","hashOfConfig":"283"},{"size":844,"mtime":1661131266000,"results":"551","hashOfConfig":"283"},{"size":729,"mtime":1661131266000,"results":"552","hashOfConfig":"283"},{"size":51,"mtime":1661706414033,"results":"553","hashOfConfig":"283"},{"size":57,"mtime":1661741385020,"results":"554","hashOfConfig":"283"},{"size":2429,"mtime":1661131266000,"results":"555","hashOfConfig":"283"},{"size":903,"mtime":1661746648610,"results":"556","hashOfConfig":"283"},{"size":982,"mtime":1661746647239,"results":"557","hashOfConfig":"283"},{"size":676,"mtime":1663229174107,"results":"558","hashOfConfig":"283"},{"size":3497,"mtime":1663306317630,"results":"559","hashOfConfig":"283"},{"size":1757,"mtime":1663345791209,"results":"560","hashOfConfig":"283"},{"size":1845,"mtime":1661131266000,"results":"561","hashOfConfig":"283"},{"size":1970,"mtime":1663294662506,"results":"562","hashOfConfig":"283"},{"size":646,"mtime":1663318327789,"results":"563","hashOfConfig":"283"},{"filePath":"564","messages":"565","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},"1vcias0",{"filePath":"567","messages":"568","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"569"},{"filePath":"570","messages":"571","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"569"},{"filePath":"572","messages":"573","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"574","usedDeprecatedRules":"566"},{"filePath":"575","messages":"576","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"569"},{"filePath":"577","messages":"578","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"579","messages":"580","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"581","messages":"582","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"583","messages":"584","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"569"},{"filePath":"585","messages":"586","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"569"},{"filePath":"587","messages":"588","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"569"},{"filePath":"589","messages":"590","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"569"},{"filePath":"591","messages":"592","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"569"},{"filePath":"593","messages":"594","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"569"},{"filePath":"595","messages":"596","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"569"},{"filePath":"597","messages":"598","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"569"},{"filePath":"599","messages":"600","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"569"},{"filePath":"601","messages":"602","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"569"},{"filePath":"603","messages":"604","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"569"},{"filePath":"605","messages":"606","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"569"},{"filePath":"607","messages":"608","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"569"},{"filePath":"609","messages":"610","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"569"},{"filePath":"611","messages":"612","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"569"},{"filePath":"613","messages":"614","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"569"},{"filePath":"615","messages":"616","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"617","usedDeprecatedRules":"566"},{"filePath":"618","messages":"619","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"620","messages":"621","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"622","messages":"623","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"624","messages":"625","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"626","messages":"627","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"628","messages":"629","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"630","messages":"631","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"632","messages":"633","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"634","messages":"635","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"636","messages":"637","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"638","messages":"639","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"640","messages":"641","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"642","usedDeprecatedRules":"566"},{"filePath":"643","messages":"644","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"569"},{"filePath":"645","messages":"646","errorCount":0,"fatalErrorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":0,"source":"647","usedDeprecatedRules":"569"},{"filePath":"648","messages":"649","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"650","usedDeprecatedRules":"569"},{"filePath":"651","messages":"652","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"653","usedDeprecatedRules":"569"},{"filePath":"654","messages":"655","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"656","usedDeprecatedRules":"569"},{"filePath":"657","messages":"658","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"659","messages":"660","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"661","messages":"662","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"663","messages":"664","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"665","messages":"666","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"667","messages":"668","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"669","usedDeprecatedRules":"566"},{"filePath":"670","messages":"671","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"672","usedDeprecatedRules":"566"},{"filePath":"673","messages":"674","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"675","messages":"676","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"677","usedDeprecatedRules":"566"},{"filePath":"678","messages":"679","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"680","messages":"681","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"682","messages":"683","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"684","messages":"685","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"686","usedDeprecatedRules":"566"},{"filePath":"687","messages":"688","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"689","messages":"690","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"691","messages":"692","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"693","messages":"694","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"695","messages":"696","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"697","messages":"698","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"699","messages":"700","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"701","messages":"702","errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"703","usedDeprecatedRules":"566"},{"filePath":"704","messages":"705","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"706","messages":"707","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"708","usedDeprecatedRules":"566"},{"filePath":"709","messages":"710","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"711","messages":"712","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"713","messages":"714","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"569"},{"filePath":"715","messages":"716","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"717","messages":"718","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"569"},{"filePath":"719","messages":"720","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"721","usedDeprecatedRules":"569"},{"filePath":"722","messages":"723","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"724","messages":"725","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"726","messages":"727","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"728","messages":"729","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"730","messages":"731","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"732","messages":"733","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"734","usedDeprecatedRules":"566"},{"filePath":"735","messages":"736","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"737","messages":"738","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"739","messages":"740","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"741","usedDeprecatedRules":"566"},{"filePath":"742","messages":"743","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"744","usedDeprecatedRules":"566"},{"filePath":"745","messages":"746","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"747","messages":"748","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"749","messages":"750","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"751","messages":"752","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"753","usedDeprecatedRules":"566"},{"filePath":"754","messages":"755","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"756","messages":"757","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"758","messages":"759","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"760","messages":"761","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"762","messages":"763","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"764","messages":"765","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"569"},{"filePath":"766","messages":"767","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"768","messages":"769","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"770","messages":"771","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"569"},{"filePath":"772","messages":"773","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"774","messages":"775","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"776","messages":"777","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"778","messages":"779","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"780","messages":"781","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"782","messages":"783","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"784","messages":"785","errorCount":0,"fatalErrorCount":0,"warningCount":53,"fixableErrorCount":0,"fixableWarningCount":0,"source":"786","usedDeprecatedRules":"566"},{"filePath":"787","messages":"788","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"789","usedDeprecatedRules":"566"},{"filePath":"790","messages":"791","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"792","messages":"793","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"794","messages":"795","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"796","messages":"797","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"798","usedDeprecatedRules":"566"},{"filePath":"799","messages":"800","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"801","messages":"802","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"569"},{"filePath":"803","messages":"804","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"805","messages":"806","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"807","usedDeprecatedRules":"566"},{"filePath":"808","messages":"809","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"810","usedDeprecatedRules":"566"},{"filePath":"811","messages":"812","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"813","messages":"814","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"815","messages":"816","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"817","usedDeprecatedRules":"566"},{"filePath":"818","messages":"819","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"820","messages":"821","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"822","messages":"823","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"824","messages":"825","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"826","messages":"827","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"828","messages":"829","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"830","messages":"831","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"832","usedDeprecatedRules":"569"},{"filePath":"833","messages":"834","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"835","messages":"836","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"837","messages":"838","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"839","messages":"840","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"841","messages":"842","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"843","messages":"844","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"845","messages":"846","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"847","messages":"848","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"849","messages":"850","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"851","messages":"852","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"853","messages":"854","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"855","messages":"856","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"857","messages":"858","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"859","messages":"860","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"861","messages":"862","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"863","messages":"864","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"865","messages":"866","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"867","messages":"868","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"869","messages":"870","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"871","messages":"872","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"569"},{"filePath":"873","messages":"874","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"875","usedDeprecatedRules":"566"},{"filePath":"876","messages":"877","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"878","usedDeprecatedRules":"566"},{"filePath":"879","messages":"880","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"569"},{"filePath":"881","messages":"882","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"883","messages":"884","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"885","messages":"886","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"887","messages":"888","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"889","messages":"890","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"891","messages":"892","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"893","messages":"894","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"569"},{"filePath":"895","messages":"896","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"897","messages":"898","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"899","messages":"900","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"901","messages":"902","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"903","messages":"904","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"905","usedDeprecatedRules":"566"},{"filePath":"906","messages":"907","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"908","messages":"909","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"910","messages":"911","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"912","messages":"913","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"914","messages":"915","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"569"},{"filePath":"916","messages":"917","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"569"},{"filePath":"918","messages":"919","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"920","messages":"921","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"922","messages":"923","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"924","messages":"925","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"926","messages":"927","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"928","usedDeprecatedRules":"566"},{"filePath":"929","messages":"930","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"931","messages":"932","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"933","messages":"934","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"935","messages":"936","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"937","messages":"938","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"939","usedDeprecatedRules":"569"},{"filePath":"940","messages":"941","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"942","messages":"943","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"944","messages":"945","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"946","usedDeprecatedRules":"566"},{"filePath":"947","messages":"948","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"949","messages":"950","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"951","messages":"952","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"953","messages":"954","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"955","messages":"956","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"957","messages":"958","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"959","messages":"960","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"961","usedDeprecatedRules":"566"},{"filePath":"962","messages":"963","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"964","messages":"965","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"966","messages":"967","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"968","messages":"969","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"970","messages":"971","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"972","messages":"973","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"974","messages":"975","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"569"},{"filePath":"976","messages":"977","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"978","messages":"979","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"980","messages":"981","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"569"},{"filePath":"982","messages":"983","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"984","messages":"985","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"986","messages":"987","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"569"},{"filePath":"988","messages":"989","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"990","usedDeprecatedRules":"566"},{"filePath":"991","messages":"992","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"993","usedDeprecatedRules":"566"},{"filePath":"994","messages":"995","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"996","usedDeprecatedRules":"566"},{"filePath":"997","messages":"998","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"999","messages":"1000","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1001","usedDeprecatedRules":"566"},{"filePath":"1002","messages":"1003","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1004","messages":"1005","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1006","usedDeprecatedRules":"566"},{"filePath":"1007","messages":"1008","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1009","usedDeprecatedRules":"569"},{"filePath":"1010","messages":"1011","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1012","usedDeprecatedRules":"569"},{"filePath":"1013","messages":"1014","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"569"},{"filePath":"1015","messages":"1016","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"569"},{"filePath":"1017","messages":"1018","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1019","messages":"1020","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1021","messages":"1022","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1023","messages":"1024","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1025","usedDeprecatedRules":"566"},{"filePath":"1026","messages":"1027","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1028","messages":"1029","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1030","messages":"1031","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1032","usedDeprecatedRules":"566"},{"filePath":"1033","messages":"1034","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1035","usedDeprecatedRules":"566"},{"filePath":"1036","messages":"1037","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1038","messages":"1039","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1040","messages":"1041","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1042","messages":"1043","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1044","messages":"1045","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1046","messages":"1047","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1048","messages":"1049","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1050","messages":"1051","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1052","messages":"1053","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1054","messages":"1055","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1056","messages":"1057","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1058","messages":"1059","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1060","usedDeprecatedRules":"566"},{"filePath":"1061","messages":"1062","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1063","messages":"1064","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1065","usedDeprecatedRules":"569"},{"filePath":"1066","messages":"1067","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1068","usedDeprecatedRules":"569"},{"filePath":"1069","messages":"1070","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1071","messages":"1072","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1073","usedDeprecatedRules":"566"},{"filePath":"1074","messages":"1075","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1076","usedDeprecatedRules":"566"},{"filePath":"1077","messages":"1078","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"569"},{"filePath":"1079","messages":"1080","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1081","messages":"1082","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1083","messages":"1084","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1085","messages":"1086","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1087","messages":"1088","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1089","messages":"1090","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1091","messages":"1092","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1093","messages":"1094","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1095","messages":"1096","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1097","messages":"1098","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1099","usedDeprecatedRules":"566"},{"filePath":"1100","messages":"1101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1102","messages":"1103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1104","messages":"1105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1106","messages":"1107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1108","messages":"1109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1110","messages":"1111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1112","messages":"1113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1114","messages":"1115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1116","messages":"1117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1118","messages":"1119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1120","messages":"1121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1122","messages":"1123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1124","messages":"1125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1126","messages":"1127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1128","messages":"1129","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1130","usedDeprecatedRules":"566"},{"filePath":"1131","messages":"1132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1133","messages":"1134","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1135","usedDeprecatedRules":"566"},{"filePath":"1136","messages":"1137","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1138","usedDeprecatedRules":"566"},{"filePath":"1139","messages":"1140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1141","messages":"1142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1143","messages":"1144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1145","messages":"1146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1147","messages":"1148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1149","messages":"1150","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"928","usedDeprecatedRules":"566"},{"filePath":"1151","messages":"1152","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1153","usedDeprecatedRules":"566"},{"filePath":"1154","messages":"1155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1156","messages":"1157","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1158","messages":"1159","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1160","messages":"1161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1162","messages":"1163","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1164","usedDeprecatedRules":"566"},{"filePath":"1165","messages":"1166","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1167","messages":"1168","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1169","messages":"1170","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1171","messages":"1172","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1173","usedDeprecatedRules":"566"},{"filePath":"1174","messages":"1175","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1176","messages":"1177","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1178","messages":"1179","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1180","usedDeprecatedRules":"566"},{"filePath":"1181","messages":"1182","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},"E:\\projects\\adey\\front-end-main\\src\\index.tsx",[],["1183","1184"],"E:\\projects\\adey\\front-end-main\\src\\serviceWorker.js",[],["1185","1186"],"E:\\projects\\adey\\front-end-main\\src\\i18n.js",[],"E:\\projects\\adey\\front-end-main\\src\\App.tsx",["1187"],"import React, { Suspense, lazy } from 'react';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { ThemeProvider as TP } from '@material-ui/core/styles';\nimport { ThemeProvider as TP1 } from 'styled-components';\nimport useWallet, { UseWalletProvider } from 'use-wallet';\nimport usePromptNetwork from './hooks/useNetworkPrompt';\nimport BanksProvider from './contexts/Banks';\nimport GrapeFinanceProvider from './contexts/GrapeFinanceProvider';\nimport ModalsProvider from './contexts/Modals';\nimport { store } from './state';\nimport theme from './theme';\nimport newTheme from './newTheme';\nimport config from './config';\nimport Updaters from './state/Updaters';\nimport Loader from './components/Loader';\nimport Popups from './components/Popups';\nimport { RefreshContextProvider } from './contexts/RefreshContext';\nimport NetworkVerifier from './components/NetworkVerifier';\nimport BackgroundDecoration from './components/BackgroundDecoration';\n\nconst Home = lazy(() => import('./views/Home'));\nconst Dashboard = lazy(() => import('./views/Dashboard'));\nconst Vineyard = lazy(() => import('./views/Vineyard'));\nconst Winery = lazy(() => import('./views/Winery'));\nconst Bond = lazy(() => import('./views/Bond'));\nconst Dao = lazy(() => import('./views/Dao'));\nconst Launchpad = lazy(() => import('./views/Launchpad'));\nconst Roadmap = lazy(() => import('./views/Roadmap'));\nconst Raffle = lazy(() => import('./views/Raffle'));\nconst Strategies = lazy(() => import('./views/Strategies'));\nconst Help = lazy(() => import('./views/Help'));\nconst Nodes = lazy(() => import('./views/Nodes'));\nconst Leaderboard = lazy(() => import('./views/Leaderboard'));\nconst Stats = lazy(() => import('./views/Stats'));\nconst NFTRaffle = lazy(() => import('./views/NFTRaffle'));\nconst Rebates = lazy(() => import('./views/Rebates'));\nconst Peg = lazy(() => import('./views/Extinction'));\n\nconst NoMatch = () => (\n  <h3 style={{ position: 'absolute', top: '50%', left: '50%', transform: 'translate(-50%, -50%)' }}>\n    URL Not Found. <a href=\"/\">Go back home.</a>\n  </h3>\n);\n\nconst App: React.FC = () => {\n  // Clear localStorage for mobile users\n  if (typeof localStorage.version_app === 'undefined' || localStorage.version_app !== '1.1') {\n    localStorage.clear();\n    localStorage.setItem('connectorId', '');\n    localStorage.setItem('version_app', '1.1');\n  }\n\n  usePromptNetwork();\n\n  return (\n    <Providers>\n      <NetworkVerifier />\n      <Router>\n        <Suspense fallback={<Loader />}>\n          <BackgroundDecoration />\n          <Switch>\n            <Route exact path=\"/\">\n              <Home />\n            </Route>\n            <Route exact path=\"/dashboard\">\n              <Dashboard />\n            </Route>\n            <Route path=\"/vineyard\">\n              <Vineyard />\n            </Route>\n            <Route path=\"/winery\">\n              <Winery />\n            </Route>\n            <Route path=\"/nodes\">\n              <Nodes />\n            </Route>\n            <Route path=\"/rebates\">\n              <Rebates />\n            </Route>\n            <Route path=\"/leaderboard\">\n              <Leaderboard />\n            </Route>\n            <Route path=\"/bond\">\n              <Bond />\n            </Route>\n            <Route exact path=\"/dao\">\n              <Dao />\n            </Route>\n            <Route path=\"/launchpad\">\n              <Launchpad />\n            </Route>\n            <Route path=\"/roadmap\">\n              <Roadmap />\n            </Route>\n            <Route path=\"/strategies\">\n              <Strategies />\n            </Route>\n            <Route path=\"/stats\">\n              <Stats />\n            </Route>\n            <Route path=\"/raffle\">\n              <Raffle />\n            </Route>\n            <Route path=\"/nftraffle\">\n              <NFTRaffle />\n            </Route>\n            <Route path=\"/help\">\n              <Help />\n            </Route>\n            <Route path=\"/pegpool\">\n              <Peg />\n            </Route>\n            <Route path=\"*\">\n              <NoMatch />\n            </Route>\n          </Switch>\n        </Suspense>\n      </Router>\n    </Providers>\n  );\n};\n\nconst Providers: React.FC = ({ children }) => {\n  return (\n    <TP1 theme={theme}>\n      <TP theme={newTheme}>\n        <UseWalletProvider\n          chainId={config.chainId}\n          connectors={{\n            walletconnect: { rpcUrl: config.defaultProvider },\n            walletlink: {\n              url: config.defaultProvider,\n              appName: 'grapefinance.app',\n              appLogoUrl: '#',\n            },\n          }}\n        >\n          <Provider store={store}>\n            <Updaters />\n            <RefreshContextProvider>\n              <GrapeFinanceProvider>\n                <ModalsProvider>\n                  <BanksProvider>\n                    <>\n                      <Popups />\n                      {children}\n                    </>\n                  </BanksProvider>\n                </ModalsProvider>\n              </GrapeFinanceProvider>\n            </RefreshContextProvider>\n          </Provider>\n        </UseWalletProvider>\n      </TP>\n    </TP1>\n  );\n};\n\nexport default App;\n","E:\\projects\\adey\\front-end-main\\src\\newTheme.js",[],"E:\\projects\\adey\\front-end-main\\src\\config.ts",[],"E:\\projects\\adey\\front-end-main\\src\\hooks\\useNetworkPrompt.ts",[],"E:\\projects\\adey\\front-end-main\\src\\state\\Updaters.tsx",[],"E:\\projects\\adey\\front-end-main\\src\\components\\Loader\\index.js",[],"E:\\projects\\adey\\front-end-main\\src\\views\\Bond\\index.js",[],"E:\\projects\\adey\\front-end-main\\src\\views\\Home\\index.js",[],"E:\\projects\\adey\\front-end-main\\src\\views\\Dashboard\\index.js",[],"E:\\projects\\adey\\front-end-main\\src\\views\\Dao\\index.js",[],"E:\\projects\\adey\\front-end-main\\src\\views\\Winery\\index.js",[],"E:\\projects\\adey\\front-end-main\\src\\views\\Vineyard\\index.js",[],"E:\\projects\\adey\\front-end-main\\src\\views\\Launchpad\\index.js",[],"E:\\projects\\adey\\front-end-main\\src\\views\\Roadmap\\index.js",[],"E:\\projects\\adey\\front-end-main\\src\\views\\Help\\index.js",[],"E:\\projects\\adey\\front-end-main\\src\\views\\Stats\\index.js",[],"E:\\projects\\adey\\front-end-main\\src\\views\\Nodes\\index.js",[],"E:\\projects\\adey\\front-end-main\\src\\views\\NFTRaffle\\index.js",[],"E:\\projects\\adey\\front-end-main\\src\\views\\Strategies\\index.js",[],"E:\\projects\\adey\\front-end-main\\src\\views\\Raffle\\index.js",[],"E:\\projects\\adey\\front-end-main\\src\\views\\Rebates\\index.js",[],"E:\\projects\\adey\\front-end-main\\src\\state\\index.ts",["1188","1189","1190"],"import {configureStore} from '@reduxjs/toolkit';\nimport {save, load} from 'redux-localstorage-simple';\nimport transactions from './transactions/reducer';\nimport application from './application/reducer';\nimport {eventApi} from '../services/event';\n\nconst PERSISTED_KEYS: string[] = ['transactions'];\n\nexport const store = configureStore({\n  reducer: {\n    application,\n    transactions,\n    [eventApi.reducerPath]: eventApi.reducer,\n  },\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(eventApi.middleware),\n  \n});\n\nexport type AppState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n\n\n","E:\\projects\\adey\\front-end-main\\src\\theme\\index.ts",[],"E:\\projects\\adey\\front-end-main\\src\\contexts\\Banks\\index.ts",[],"E:\\projects\\adey\\front-end-main\\src\\contexts\\GrapeFinanceProvider\\index.ts",[],"E:\\projects\\adey\\front-end-main\\src\\contexts\\Modals\\index.ts",[],"E:\\projects\\adey\\front-end-main\\src\\contexts\\RefreshContext\\index.ts",[],"E:\\projects\\adey\\front-end-main\\src\\components\\NetworkVerifier\\index.ts",[],"E:\\projects\\adey\\front-end-main\\src\\components\\BackgroundDecoration\\index.ts",[],"E:\\projects\\adey\\front-end-main\\src\\views\\Extinction\\index.ts",[],"E:\\projects\\adey\\front-end-main\\src\\components\\Popups\\index.tsx",[],"E:\\projects\\adey\\front-end-main\\src\\state\\application\\updater.ts",[],"E:\\projects\\adey\\front-end-main\\src\\views\\Leaderboard\\index.tsx",[],"E:\\projects\\adey\\front-end-main\\src\\state\\transactions\\updater.tsx",["1191"],"import {useEffect} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {useWallet} from 'use-wallet';\nimport {useAddPopup, useBlockNumber} from '../application/hooks';\nimport {AppDispatch, AppState} from '../index';\nimport {checkedTransaction, finalizeTransaction} from './actions';\nimport {getDefaultProvider} from '../../utils/provider';\n\nexport function shouldCheck(\n  lastBlockNumber: number,\n  tx: {addedTime: number; receipt?: {}; lastCheckedBlockNumber?: number},\n): boolean {\n  if (tx.receipt) return false;\n  if (!tx.lastCheckedBlockNumber) return true;\n  const blocksSinceCheck = lastBlockNumber - tx.lastCheckedBlockNumber;\n  if (blocksSinceCheck < 1) return false;\n  const minutesPending = (new Date().getTime() - tx.addedTime) / 1000 / 60;\n  if (minutesPending > 60) {\n    // every 10 blocks if pending for longer than an hour\n    return blocksSinceCheck > 9;\n  } else if (minutesPending > 5) {\n    // every 3 blocks if pending more than 5 minutes\n    return blocksSinceCheck > 2;\n  } else {\n    // otherwise every block\n    return true;\n  }\n}\n\nexport default function Updater(): null {\n  const {chainId, ethereum} = useWallet();\n\n  const lastBlockNumber = useBlockNumber();\n\n  const dispatch = useDispatch<AppDispatch>();\n  const state = useSelector<AppState, AppState['transactions']>((state) => state.transactions);\n\n  const transactions = chainId ? state[chainId] ?? {} : {};\n\n  // show popup on confirm\n  const addPopup = useAddPopup();\n\n  useEffect(() => {\n    if (!chainId || !ethereum || !lastBlockNumber) {\n      return;\n    }\n\n    const provider = getDefaultProvider();\n    Object.keys(transactions)\n      .filter((hash) => shouldCheck(lastBlockNumber, transactions[hash]))\n      .forEach((hash) => {\n        provider\n          .getTransactionReceipt(hash)\n          .then((receipt) => {\n            if (receipt) {\n              dispatch(\n                finalizeTransaction({\n                  chainId,\n                  hash,\n                  receipt: {\n                    blockHash: receipt.blockHash,\n                    blockNumber: receipt.blockNumber,\n                    contractAddress: receipt.contractAddress,\n                    from: receipt.from,\n                    status: receipt.status,\n                    to: receipt.to,\n                    transactionHash: receipt.transactionHash,\n                    transactionIndex: receipt.transactionIndex,\n                  },\n                }),\n              );\n\n              addPopup(\n                {\n                  txn: {\n                    hash,\n                    success: receipt.status === 1,\n                    summary: transactions[hash]?.summary,\n                  },\n                },\n                hash,\n              );\n            } else {\n              dispatch(checkedTransaction({chainId, hash, blockNumber: lastBlockNumber}));\n            }\n          })\n          .catch((error) => {\n            console.error(`failed to check transaction hash: ${hash}`, error);\n          });\n      });\n  }, [chainId, ethereum, transactions, lastBlockNumber, dispatch, addPopup]);\n\n  return null;\n}\n","E:\\projects\\adey\\front-end-main\\src\\components\\Loader\\Loader.js",[],"E:\\projects\\adey\\front-end-main\\src\\views\\Home\\Home.js",["1192","1193","1194","1195","1196","1197","1198","1199","1200","1201","1202","1203","1204","1205","1206","1207","1208","1209","1210","1211","1212","1213","1214","1215","1216","1217","1218","1219","1220"],"import React, { useMemo, useState } from 'react';\nimport Page from '../../components/Page';\nimport InfoCard from '../../components/InfoCard';\nimport LPInfoCard from '../../components/LPInfoCard';\nimport { createGlobalStyle } from 'styled-components';\nimport CountUp from 'react-countup';\nimport useGrapeStats from '../../hooks/useGrapeStats';\nimport useLpStats from '../../hooks/useLpStats';\nimport useLpStatsBTC from '../../hooks/useLpStatsBTC';\nimport useBondStats from '../../hooks/useBondStats';\nimport useWineStats from '../../hooks/useWineStats';\nimport useSoftStats from '../../hooks/useSoftStats';\nimport useGrapeTotalNode from '../../hooks/useGrapeTotalNodes';\nimport useWineTotalNode from '../../hooks/useWineTotalNodes';\nimport useGrapeMimSWTotalNode from '../../hooks/useGrapeMimSWTotalNode';\nimport useTotalValueLocked from '../../hooks/useTotalValueLocked';\nimport useNodeRewardPoolStats from '../../hooks/useNodesRewardBalance';\nimport { roundAndFormatNumber } from '../../0x';\nimport { Button, Card, CardContent, Grid, Paper, CircularProgress, Typography } from '@material-ui/core';\nimport kyc from '../../assets/img/kyc.png';\nimport heroImg from '../../assets/img/hero.png';\nimport audit from '../../assets/img/audit1.png';\nimport HomeImage from '../../assets/img/background.jpg';\nimport grapeGold from '../../assets/img/golden-grape.png';\nimport pressImg from '../../assets/img/barrel.png';\nimport danceImg from '../../assets/img/dance-removebg-preview.png';\nimport farmImg from '../../assets/img/farm-removebg-preview.png';\nimport playImg from '../../assets/img/play-removebg-preview.png';\nimport upImg from '../../assets/img/up-removebg-preview.png';\nimport tvlImg from '../../assets/img/tvl-removebg-preview.png';\nimport newsImg from '../../assets/img/news.png';\nimport strategy1 from '../../assets/img/strategy1.jpg';\nimport strategy2 from '../../assets/img/strategy2.jpg';\nimport strategy3 from '../../assets/img/strategy3.jpg';\nimport { ReactComponent as IconTelegram } from '../../assets/img/telegram.svg';\nimport { ReactComponent as IconDiscord } from '../../assets/img/discord.svg';\nimport { ReactComponent as IconTwitter } from '../../assets/img/twitter.svg';\n\nimport AirdropRewardModal from './AirdropRewardModal';\nimport GetStartedModal from './GetStartedModal';\nimport useCurrentEpoch from '../../hooks/useCurrentEpoch';\nimport useGetBoardroomPrintRate from '../../hooks/useGetBoardroomPrintRate';\nimport NewspaperIcon from '@mui/icons-material/Newspaper';\nimport Alert from '@mui/material/Alert';\nimport vintageImg from '../../assets/img/vintage-token.png';\nimport vintnersGif from '../../assets/img/vintners.gif';\nimport grapeMimImg from '../../assets/img/twap.png';\n\n// import useCashPriceInEstimatedTWAP from '../../hooks/useCashPriceInEstimatedTWAP';\n\nconst BackgroundImage = createGlobalStyle`\n  body {\n   //background: url(${HomeImage}) repeat !important;\n    background-size: cover !important;\n    background: blue;\n    ;\n  }\n`;\n\nconst Home = () => {\n  const TVL = useTotalValueLocked();\n  const grapemimLpStats = useLpStatsBTC('AKUSD-BUSD-LP');\n  const bSharemimLpStats = useLpStats('AKSHARE-BUSD-LP');\n\n  const newPair = useLpStats('SOFT-BUSD-LP');\n  const grapeMimSWStats = useLpStats('AKUSD-BUSD-LP');\n\n  const grapeStats = useGrapeStats();\n  const bShareStats = useWineStats();\n  const softStats = useSoftStats();\n  const tBondStats = useBondStats();\n  const nodeRewardPoolStats = useNodeRewardPoolStats();\n  const useGrapeTotal = useGrapeTotalNode();\n  const useWineTotal = useWineTotalNode();\n  const useGrapeMimSWTotal = useGrapeMimSWTotalNode();\n  const [rewardModelOpen, setModalOpen] = useState(false);\n  const [getStartedModalOpen, setGetStartedModalOpen] = useState(false);\n  const currentEpoch = useCurrentEpoch();\n\n  const buyGrapeAddress =\n    'https://app.bogged.finance/avax/swap?tokenIn=0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56&tokenOut=0xd25e8D31C43133Af6E5321228E19EC4CbA66718d';\n  const buyWineAddress =\n    'https://app.bogged.finance/avax/swap?tokenIn=0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56&tokenOut=0xEfB73202a463Ab78B674F64290fdaD6c75009Bf7';\n  const buySoftAddress =\n    'https://app.bogged.finance/avax/swap?tokenIn=0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56&tokenOut=0xEfB73202a463Ab78B674F64290fdaD6c75009Bf7';\n  const wineChart = 'https://dexscreener.com/avalanche/0x00cb5b42684da62909665d8151ff80d1567722c3';\n  const grapeChart = 'https://dexscreener.com/avalanche/0xb45740a83aed18d2334448ab02e28b77738ed5e7';\n\n  const grapeLPStats = useMemo(() => (grapemimLpStats ? grapemimLpStats : null), [grapemimLpStats]);\n  const wineLPStats = useMemo(() => (bSharemimLpStats ? bSharemimLpStats : null), [bSharemimLpStats]);\n  const newPairLPStats = useMemo(() => (newPair ? newPair : null), [newPair]);\n  const grapePriceInDollars = useMemo(\n    () => (grapeStats ? Number(grapeStats.priceInDollars).toFixed(2) : null),\n    [grapeStats],\n  );\n  const grapePriceInAVAX = useMemo(() => (grapeStats ? Number(grapeStats.tokenInFtm).toFixed(4) : null), [grapeStats]);\n  const grapeCirculatingSupply = useMemo(\n    () => (grapeStats ? Number(grapeStats.circulatingSupply) : null),\n    [grapeStats],\n  );\n  const grapeTotalSupply = useMemo(() => (grapeStats ? Number(grapeStats.totalSupply) : null), [grapeStats]);\n\n  const winePriceInDollars = useMemo(\n    () => (bShareStats ? Number(bShareStats.priceInDollars).toFixed(2) : null),\n    [bShareStats],\n  );\n  const softPriceInDollars = useMemo(\n    () => (softStats ? Number(softStats.priceInDollars).toFixed(2) : null),\n    [softStats],\n  );\n\n  const softCirculatingSupply = useMemo(() => (softStats ? String(softStats.circulatingSupply) : null), [softStats]);\n  const softTotalSupply = useMemo(() => (softStats ? String(softStats.totalSupply) : null), [softStats]);\n\n  const grapeMimSWPriceInDollars = useMemo(\n    () => (grapeMimSWStats ? Number(grapeMimSWStats.priceOfOne).toFixed(2) : null),\n    [grapeMimSWStats],\n  );\n\n  const bShareCirculatingSupply = useMemo(\n    () => (bShareStats ? String(bShareStats.circulatingSupply) : null),\n    [bShareStats],\n  );\n  const bShareTotalSupply = useMemo(() => (bShareStats ? String(bShareStats.totalSupply) : null), [bShareStats]);\n\n  const tBondPriceInDollars = useMemo(\n    () => (tBondStats ? Number(tBondStats.priceInDollars).toFixed(2) : null),\n    [tBondStats],\n  );\n\n  const tBondCirculatingSupply = useMemo(\n    () => (tBondStats ? String(tBondStats.circulatingSupply) : null),\n    [tBondStats],\n  );\n  const tBondTotalSupply = useMemo(() => (tBondStats ? String(tBondStats.totalSupply) : null), [tBondStats]);\n\n  // const cashStat = useCashPriceInEstimatedTWAP();\n  // const twap = useMemo(() => (cashStat ? Number(cashStat.priceInDollars).toFixed(4) : null), [cashStat]);\n\n  const handleCloseModal = () => {\n    setModalOpen(false);\n    setGetStartedModalOpen(false);\n  };\n\n  const handleOpenModal = () => {\n    setModalOpen(true);\n  };\n\n  const openGetStarted = () => {\n    setGetStartedModalOpen(true);\n  };\n\n  const printRate = useGetBoardroomPrintRate();\n  // const lastSnapshot = useBoardroomLastSnapshot();\n  // const lastPrintAmount = useBoardroomLastPrintAmount();\n\n  return (\n    <Page>\n      <GetStartedModal open={getStartedModalOpen} handleClose={handleCloseModal} />\n      <AirdropRewardModal\n        open={rewardModelOpen}\n        handleClose={handleCloseModal}\n        grapes={useGrapeTotal[0]}\n        grapePrice={grapePriceInDollars}\n        wines={useWineTotal[0]}\n        winePrice={winePriceInDollars}\n        grapeMimSW={useGrapeMimSWTotal[0]}\n        grapeMimSWPrice={grapeMimSWPriceInDollars}\n        totalGrapes={nodeRewardPoolStats?.grapes}\n        totalWine={nodeRewardPoolStats?.wines}\n        totalGrapeMimSW={nodeRewardPoolStats?.grapeMimSWs}\n      />\n      <BackgroundImage />\n      <Grid container spacing={3}>\n        {/* <Grid item xs={12} style={{color: 'white'}}>\n          <Grid container justifyContent=\"space-between\">\n            <div style={{display: 'flex', flexDirection: 'column', textAlign: 'center'}}>\n              <div>EPOCH</div>\n              <div>\n                {currentEpoch ? <CountUp end={currentEpoch} /> : <CircularProgress size={15} color=\"inherit\" />}\n              </div>\n            </div>\n            <div style={{display: 'flex', flexDirection: 'column', textAlign: 'center'}}>\n              <div>ABOVE PEG</div>\n              <div>\n                {' '}\n                {printRate ? <span>{printRate.toFixed(2)}%</span> : <CircularProgress size={15} color=\"inherit\" />}\n              </div>\n            </div>\n\n            <div style={{display: 'flex', flexDirection: 'column', textAlign: 'center'}}>\n              <div>SUPPLY</div>\n              <div>{grapeTotalSupply ? grapeTotalSupply : '--'}</div>\n            </div>\n            <div style={{display: 'flex', flexDirection: 'column', textAlign: 'center'}}>\n              <div>LAST EPOCH PRINTED</div>\n              <div>616</div>\n            </div>\n            <div style={{display: 'flex', flexDirection: 'column', textAlign: 'center'}}>\n              <div>LAST EPOCH EXPANSION AMOUNT</div>\n              <div>{13793195024491149517051 / 1e18}</div>\n            </div>\n            <div style={{display: 'flex', flexDirection: 'column', textAlign: 'center'}}>\n              <div>EXPANSION RATE</div>\n              <div>800</div>\n            </div>\n\n            <div style={{display: 'flex', flexDirection: 'column', textAlign: 'center'}}>\n              <div>CONTRACTION RATE</div>\n              <div>800</div>\n            </div>\n            <div style={{display: 'flex', flexDirection: 'column', textAlign: 'center'}}>\n              <div>CONTRACTION AMOUNT</div>\n              <div>800</div>\n            </div>\n            <div style={{display: 'flex', flexDirection: 'column', textAlign: 'center'}}>\n              <div>BUYS 24h</div>\n              <div>800</div>\n            </div>\n            <div style={{display: 'flex', flexDirection: 'column', textAlign: 'center'}}>\n              <div>SELLS 24h</div>\n              <div>800</div>\n            </div>\n          </Grid>\n        </Grid> */}\n        <Grid item xs={12} style={{ textAlign: 'left' }}>\n          <p style={{ color: 'rgb(33 38 82)' }}>Dashboard</p>\n          <p style={{ color: 'rgb(33 38 82)' }}>\n            ADEY'S  KINGDOM is a decentralized organization providing an ecosystem of sustainable investment vehicles.\n            Our protocols are designed to empower users by simplifying the advanced trading strategies employed by\n            experienced investors while promoting growth through low-risk algorithmic trading models.\n          </p>\n        </Grid>\n\n        <Grid item xs={12} sm={12} md={6} lg={4}>\n          <InfoCard\n            name=\"AKUSD\"\n            color=\"#EAFF45\"\n            buyAddress={buyGrapeAddress}\n            chartAddress={grapeChart}\n            price={grapePriceInAVAX}\n            circulatingSupply={grapeCirculatingSupply}\n            totalSupply={grapeTotalSupply}\n          />\n        </Grid>\n        <Grid item xs={12} sm={12} md={6} lg={4}>\n          <InfoCard\n            name=\"AKSHARE\"\n            color=\"#FF7134\"\n            buyAddress={buyWineAddress}\n            chartAddress={wineChart}\n            price={winePriceInDollars}\n            circulatingSupply={bShareCirculatingSupply}\n            totalSupply={bShareTotalSupply}\n          />\n        </Grid>\n        <Grid item xs={12} sm={12} md={6} lg={4}>\n          <InfoCard\n            name=\"SOFT\"\n            color=\"#58A0FF\"\n            buyAddress={buySoftAddress}\n            internalLink={true}\n            price={softPriceInDollars}\n            circulatingSupply={softCirculatingSupply}\n            totalSupply={softTotalSupply}\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <Grid container spacing={3}>\n            <Grid item xs={3}>\n              <img alt=\"Dance\" style={{ width: '100%' }} src={danceImg} />\n            </Grid>\n            <Grid item xs={9}>\n              <Grid\n                container\n                spacing={3}\n                style={{ backgroundColor: '#212652', borderRadius: '20px', padding: '20px', gap: '20px' }}\n              >\n                <Grid\n                  item\n                  style={{\n                    flex: 1,\n                    backgroundColor: '#EAFF45',\n                    borderRadius: '15px',\n                    display: 'flex',\n                    flexDirection: 'row',\n                    alignItems: 'center',\n                  }}\n                >\n                  <img\n                    alt=\"farm\"\n                    style={{\n                      position: 'relative',\n                      width: '120px',\n                      height: '100px',\n                      marginBottom: '-40px',\n                      marginLeft: '-40px',\n                    }}\n                    src={farmImg}\n                  />\n                  <Typography\n                    variant=\"h6\"\n                    style={{ color: '#263547', fontWeight: 700, diplay: 'flex', alignItems: 'center' }}\n                    gutterBottom\n                  >\n                    FARMERS VILLAGE\n                  </Typography>\n                </Grid>\n                <Grid\n                  item\n                  style={{\n                    flex: 1,\n                    backgroundColor: '#EAFF45',\n                    borderRadius: '15px',\n                    display: 'flex',\n                    flexDirection: 'row',\n                    alignItems: 'center',\n                  }}\n                >\n                  <img\n                    alt=\"play\"\n                    style={{\n                      position: 'relative',\n                      width: '110px',\n                      height: '100px',\n                      marginBottom: '-40px',\n                      marginLeft: '-40px',\n                    }}\n                    src={playImg}\n                  />\n                  <Typography\n                    variant=\"h6\"\n                    style={{ color: '#263547', fontWeight: 700, diplay: 'flex', alignItems: 'center' }}\n                    gutterBottom\n                  >\n                    HOW TO PLAY\n                  </Typography>\n                </Grid>\n                <Grid\n                  item\n                  style={{\n                    flex: 1,\n                    backgroundColor: '#EAFF45',\n                    borderRadius: '15px',\n                    display: 'flex',\n                    flexDirection: 'row',\n                    alignItems: 'center',\n                  }}\n                >\n                  <img\n                    alt=\"up\"\n                    style={{\n                      position: 'relative',\n                      width: '100px',\n                      height: '100px',\n                      marginBottom: '-40px',\n                      marginLeft: '-40px',\n                    }}\n                    src={upImg}\n                  />\n                  <Typography\n                    variant=\"h6\"\n                    style={{ color: '#263547', fontWeight: 700, diplay: 'flex', alignItems: 'center' }}\n                    gutterBottom\n                  >\n                    HIGH YIELD MARKET\n                  </Typography>\n                </Grid>\n                <Grid\n                  item\n                  style={{\n                    flex: 1,\n                    backgroundColor: '#EAFF45',\n                    borderRadius: '15px',\n                    display: 'flex',\n                    flexDirection: 'row',\n                    alignItems: 'center',\n                  }}\n                >\n                  <img\n                    alt=\"tvl\"\n                    style={{\n                      position: 'relative',\n                      width: '100px',\n                      height: '100px',\n                      marginBottom: '-40px',\n                      marginLeft: '-40px',\n                    }}\n                    src={tvlImg}\n                  />\n                  <Typography variant=\"h6\" style={{ color: '#263547', fontWeight: 700 }} gutterBottom>\n                    tvl:\n                    {TVL ? (\n                      <CountUp end={TVL} separator=\",\" prefix=\"$\" />\n                    ) : (\n                      <CircularProgress style={{ marginTop: '20px' }} size={38} color=\"inherit\" />\n                    )}\n                  </Typography>\n                </Grid>\n                <Grid item xs={12} style={{ color: 'white' }}>\n                  ADEY'S ADVANTAGE is an algorithmic protocol with yield generating strategies and ETF rewards. WE RUN\n                  OUR PLATFORM WITH THREE corresponding tokens – $AKUSD, AKSHARE AND SOFT. Our unique protocol offers a\n                  single regulatory pool which controls the price of the USDEX.\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n\n        {/* <Grid item xs={12} sm={12} md={5}>\n          <Grid container xs={12}>\n            <Grid item xs={12} style={{ color: 'white' }}>\n              <Card style={{ minHeight: '200px' }}>\n                <CardContent>\n                  <Typography color=\"textPrimary\" variant=\"h4\">\n                    TOTAL VALUE LOCKED\n                  </Typography>\n                </CardContent>\n              </Card>\n            </Grid>\n            <Grid item xs={12} style={{ marginTop: '20px' }}>\n              <Card>\n                <CardContent>\n                  <Typography className=\"reward-pool-text\" color=\"textPrimary\" variant=\"h4\" gutterBottom>\n                    NFT REWARD POOL\n                  </Typography>\n\n                  <Grid container direction=\"column\" spacing={2}>\n                    <Grid item>\n                      <Grid container justifyContent=\"space-between\">\n                        <Grid item>\n                          <Typography color=\"textPrimary\" align=\"center\" variant=\"h5\">\n                            {nodeRewardPoolStats?.grapes} Grape\n                          </Typography>\n                        </Grid>\n                        <Grid item>\n                          <Typography color=\"textSecondary\" align=\"center\" variant=\"h5\" style={{ fontWeight: 700 }}>\n                            {nodeRewardPoolStats != null ? (\n                              `≈$${roundAndFormatNumber(nodeRewardPoolStats?.grapes * grapePriceInDollars, 0)}`\n                            ) : (\n                              <CircularProgress size={22} color=\"inherit\" />\n                            )}\n                          </Typography>\n                        </Grid>\n                      </Grid>\n                    </Grid>\n                    <Grid item>\n                      <Grid container justifyContent=\"space-between\">\n                        <Grid item>\n                          <Typography color=\"textPrimary\" align=\"center\" variant=\"h5\">\n                            {nodeRewardPoolStats?.wines} Wine\n                          </Typography>\n                        </Grid>\n                        <Grid item>\n                          <Typography color=\"textSecondary\" align=\"center\" variant=\"h5\" style={{ fontWeight: 700 }}>\n                            {nodeRewardPoolStats != null ? (\n                              `≈$${roundAndFormatNumber(nodeRewardPoolStats?.wines * winePriceInDollars, 0)}`\n                            ) : (\n                              <CircularProgress size={22} color=\"inherit\" />\n                            )}{' '}\n                          </Typography>\n                        </Grid>\n                      </Grid>\n                    </Grid>\n                  </Grid>\n\n                  <Button\n                    onClick={handleOpenModal}\n                    className=\"shinyButton\"\n                    style={{ width: '100%', marginTop: '10px' }}\n                  >\n                    Estimate my Rewards\n                  </Button>\n                </CardContent>\n              </Card>\n            </Grid>\n          </Grid>\n        </Grid>\n\n        <Grid item sm={12} md={12} lg={12} style={{ marginTop: '10px' }}>\n          <Grid container spacing={3}>\n            <Grid item xs={6} md={4} lg={2} style={{ color: 'white', textAlign: 'center' }}>\n              <Typography color=\"textPrimary\" variant=\"h6\">\n                EPOCH\n              </Typography>{' '}\n              {currentEpoch ? (\n                <CountUp style={{ fontSize: '30px' }} end={currentEpoch} />\n              ) : (\n                <CircularProgress size={28} color=\"inherit\" />\n              )}\n            </Grid>\n            <Grid item xs={6} md={4} lg={2} style={{ color: 'white', textAlign: 'center' }}>\n              <Typography color=\"textPrimary\" variant=\"h6\">\n                Above Peg\n              </Typography>\n              {printRate ? (\n                <span style={{ fontSize: '30px' }}>{printRate.toFixed(2)}%</span>\n              ) : (\n                <CircularProgress size={28} color=\"inherit\" />\n              )}\n            </Grid>\n            <Grid item xs={12} md={4} lg={3} style={{ color: 'white', textAlign: 'center' }}>\n              <Typography color=\"textPrimary\" variant=\"h6\">\n                Started On\n              </Typography>\n              <span style={{ fontSize: '30px' }}>Jan 16, 2022</span>\n            </Grid>\n            <Grid item xs={6} md={6} lg={2} style={{ color: 'white', textAlign: 'center' }}>\n              <Typography color=\"textPrimary\" variant=\"h6\">\n                KYC\n              </Typography>\n              <a\n                href=\"https://twitter.com/0xGuard/status/1480457336082907137\"\n                rel=\"noopener noreferrer\"\n                target=\"_blank\"\n              >\n                <img alt=\"0xGuard KYC\" style={{ height: '70px' }} src={kyc} />\n              </a>\n            </Grid>\n            <Grid item xs={6} md={6} lg={2} style={{ color: 'white', textAlign: 'center' }}>\n              <Typography color=\"textPrimary\" variant=\"h6\">\n                Audit\n              </Typography>\n              <a href=\"https://grapefinance.app/audit.pdf\" rel=\"noopener noreferrer\" target=\"_blank\">\n                <img alt=\"0xGuard Audit\" style={{ height: '50px' }} src={audit} />\n              </a>\n            </Grid>\n          </Grid>\n        </Grid>\n\n        <Grid item lg={12} md={12} xs={12} sm={12}>\n          <Paper style={{ height: '5px' }}></Paper>\n        </Grid> */}\n\n        {/* GRAPE */}\n        <Grid container spacing={3} justifyContent=\"center\">\n          <Grid item xs={12} sm={12} md={6} lg={4}>\n            <LPInfoCard\n              name=\"AKUSD-BUSD-LP\"\n              color=\"#EAFF45\"\n              token1Name=\"AKUSD\"\n              token1Value={grapeLPStats?.tokenAmount}\n              token2Name=\"BUSD\"\n              token2Value={grapeLPStats?.mimAmount}\n              poolAddress=\"/vineyard/GrapeMimLPWineRewardPool\"\n              price={grapeLPStats?.priceOfOne}\n              circulatingSupply={grapeLPStats?.totalLiquidity}\n              totalSupply={grapeLPStats?.totalSupply}\n            />\n          </Grid>\n          <Grid item xs={12} sm={12} md={6} lg={4}>\n            <LPInfoCard\n              name=\"AKSHARE-BUSD-LP\"\n              color=\"#FF7134\"\n              token1Name=\"AKSHARE\"\n              token1Value={wineLPStats?.tokenAmount}\n              token2Name=\"BNB\"\n              token2Value={wineLPStats?.mimAmount}\n              poolAddress=\"/vineyard/WineMimLPWineRewardPool\"\n              price={wineLPStats?.priceOfOne}\n              circulatingSupply={wineLPStats?.totalLiquidity}\n              totalSupply={wineLPStats?.totalSupply}\n            />\n          </Grid>\n          <Grid item xs={12} sm={12} md={6} lg={4}>\n            <LPInfoCard\n              name=\"SOFT-BUSD-LP\"\n              color=\"#58A0FF\"\n              token1Name=\"SOFT\"\n              token1Value={newPairLPStats?.tokenAmount}\n              token2Name=\"BUSD\"\n              token2Value={newPairLPStats?.mimAmount}\n              poolAddress=\"/vineyard/GrapeWineLPWineRewardPool\"\n              price={newPairLPStats?.priceOfOne}\n              circulatingSupply={newPairLPStats?.totalLiquidity}\n              totalSupply={newPairLPStats?.totalSupply}\n            />\n          </Grid>\n        </Grid>\n      </Grid>\n\n      <Grid container spacing={3} justifyContent=\"center\">\n        <Grid item xs={12} sm={12} md={6} lg={4}>\n          <Typography\n            variant=\"h2\"\n            style={{\n              color: '#ffffff',\n              fontWeight: 700,\n              backgroundColor: '#212652',\n              textAlign: 'center',\n              marginTop: '40px',\n              borderRadius: '20px',\n            }}\n            gutterBottom\n          >\n            STRATEGIES\n          </Typography>{' '}\n        </Grid>\n      </Grid>\n      <Grid container spacing={3} justifyContent=\"center\">\n        <Grid item xs={12} sm={12} md={6} lg={4}>\n          <img src={strategy1} width=\"100%\" style={{ margin: '30px', borderRadius: '15px' }} />\n        </Grid>\n        <Grid item xs={12} sm={12} md={6} lg={4}>\n          <img src={strategy2} width=\"100%\" style={{ margin: '30px', borderRadius: '15px' }} />\n        </Grid>\n        <Grid item xs={12} sm={12} md={6} lg={4}>\n          <img src={strategy3} width=\"100%\" style={{ margin: '30px', borderRadius: '15px' }} />\n        </Grid>\n      </Grid>\n    </Page>\n  );\n};\n\nexport default Home;\n","E:\\projects\\adey\\front-end-main\\src\\views\\Winery\\Boardroom.js",["1221","1222","1223","1224","1225","1226","1227","1228","1229","1230","1231","1232","1233","1234"],"import React, { useMemo } from 'react';\nimport { useWallet } from 'use-wallet';\nimport moment from 'moment';\nimport styled from 'styled-components';\nimport Spacer from '../../components/Spacer';\nimport Harvest from './components/Harvest';\nimport Stake from './components/Stake';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { Box, Card, CardContent, Button, Typography, Grid } from '@material-ui/core';\n\nimport { Alert } from '@material-ui/lab';\n\nimport UnlockWallet from '../../components/UnlockWallet';\nimport Page from '../../components/Page';\nimport useGrapeFinance from '../../hooks/useGrapeFinance';\nimport useRedeemOnBoardroom from '../../hooks/useRedeemOnBoardroom';\nimport useStakedBalanceOnBoardroom from '../../hooks/useStakedBalanceOnBoardroom';\nimport { getDisplayBalance } from '../../utils/formatBalance';\nimport useCurrentEpoch from '../../hooks/useCurrentEpoch';\nimport useFetchBoardroomAPR from '../../hooks/useFetchBoardroomAPR';\nimport useStakedTokenPriceInDollars from '../../hooks/useStakedTokenPriceInDollars';\nimport useCashPriceInEstimatedTWAP from '../../hooks/useCashPriceInEstimatedTWAP';\nimport useTreasuryAllocationTimes from '../../hooks/useTreasuryAllocationTimes';\nimport useTotalStakedOnBoardroom from '../../hooks/useTotalStakedOnBoardroom';\nimport useClaimRewardCheck from '../../hooks/boardroom/useClaimRewardCheck';\nimport useWithdrawCheck from '../../hooks/boardroom/useWithdrawCheck';\nimport ProgressCountdown from './components/ProgressCountdown';\nimport { createGlobalStyle } from 'styled-components';\nimport HomeImage from '../../assets/img/background.jpg';\nimport usebShareStats from '../../hooks/useWineStats';\nimport useBondStats from '../../hooks/useBondStats';\nimport { roundAndFormatNumber } from '../../0x';\nimport useGetBoardroomPrintRate from '../../hooks/useGetBoardroomPrintRate';\n\nconst BackgroundImage = createGlobalStyle`\n  body {\n    //background: url(${HomeImage}) repeat !important;\n    background-size: cover !important;\n    background: #545454\n  }\n`;\n\nconst useStyles = makeStyles((theme) => ({\n  gridItem: {\n    height: '100%',\n    [theme.breakpoints.up('md')]: {\n      height: '90px',\n    },\n  },\n}));\n\nconst Boardroom = () => {\n  const grapeFinance = useGrapeFinance();\n  const classes = useStyles();\n  const { account } = useWallet();\n  const { onRedeem } = useRedeemOnBoardroom();\n  const stakedBalance = useStakedBalanceOnBoardroom();\n  const currentEpoch = useCurrentEpoch();\n  const printRate = useGetBoardroomPrintRate();\n  const cashStat = useCashPriceInEstimatedTWAP();\n  const totalStaked = useTotalStakedOnBoardroom();\n  const boardroomAPR = useFetchBoardroomAPR();\n  const canClaimReward = useClaimRewardCheck();\n  const canWithdraw = useWithdrawCheck();\n  const bShareStats = usebShareStats();\n  const scalingFactor = useMemo(() => (cashStat ? Number(cashStat.priceInDollars).toFixed(4) : null), [cashStat]);\n  const { to } = useTreasuryAllocationTimes();\n  const bondStat = useBondStats();\n\n  const stakedTokenPriceInDollars = useStakedTokenPriceInDollars('AKSHARE', grapeFinance.WINE);\n  const tokenPriceInDollars = useMemo(\n    () =>\n      stakedTokenPriceInDollars\n        ? (Number(stakedTokenPriceInDollars) * Number(getDisplayBalance(stakedBalance))).toFixed(2).toString()\n        : null,\n    [stakedTokenPriceInDollars, stakedBalance],\n  );\n  const rewards = (boardroomAPR.toFixed(2) / 365 / 100) * tokenPriceInDollars;\n\n  const bShareCirculatingSupply = useMemo(() => (bShareStats ? bShareStats.circulatingSupply : null), [bShareStats]);\n  const percentageStaked = (totalStaked / bShareCirculatingSupply / 1e16).toFixed(2);\n  const stake = Number(getDisplayBalance(totalStaked)).toFixed(0);\n  const tvl = stake * stakedTokenPriceInDollars;\n\n  const grapeReserves = useMemo(() => (Number(bondStat?.treasuryGrapes) / 1e18).toFixed(0), [bondStat]);\n  const bondSupply = useMemo(() => bondStat?.circulatingSupply, [bondStat]);\n\n  return (\n    <Page>\n      <BackgroundImage />\n\n      {!!account ? (\n        <>\n          <Typography color=\"textPrimary\" align=\"center\" variant=\"h3\" gutterBottom>\n            HIGH YIELD MARKET\n          </Typography>\n          {/* \n          {bondStat && bondSupply - grapeReserves > 0 && (\n            <Box mt={2}>\n              <Grid item justify=\"center\">\n                <Alert variant=\"outlined\" severity=\"warning\">\n                  <div>\n                    Winery APR is temporarly reduced during debt phase. Debt is paid by the Winery when an epoch ends\n                    above 1.01 TWAP. Once Grape reserves are higher than bond supply, debt phase ends, and normal APR\n                    resumes.\n                  </div>\n                  <b>Grape Reserves:</b>{' '}\n                  {bondStat?.treasuryGrapes ? roundAndFormatNumber(Number(grapeReserves), 0) : '-'} {'  |  '}\n                  <b>Bond supply:</b> {bondStat?.circulatingSupply ? roundAndFormatNumber(Number(bondSupply), 0) : '-'}{' '}\n                  {'  |  '}\n                  <b>Debt to be paid by Winery:</b>{' '}\n                  {bondStat?.circulatingSupply\n                    ? roundAndFormatNumber(Number(bondSupply) - Number(grapeReserves), 0)\n                    : '-'}\n                  <br />\n                </Alert>\n              </Grid>\n            </Box>\n          )} */}\n\n          <Box mt={2}>\n            <Grid\n              container\n              spacing={3}\n              style={{ backgroundColor: '#212652', borderRadius: '30px', justifyContent: 'center' }}\n            >\n              <Grid\n                item\n                xs={6}\n                md={4}\n                lg={4}\n                className={classes.gridItem}\n                style={{ display: 'flex', justifyContent: 'center', flexDirection: 'column', textAlign: 'center' }}\n              >\n                <Typography variant=\"h5\" style={{ textTransform: 'uppercase', color: 'white' }}>\n                  DAILY APR\n                </Typography>\n                <Typography variant=\"h6\" style={{ color: 'white' }}>\n                  {(boardroomAPR / 365).toFixed(2)}%\n                </Typography>\n              </Grid>\n              <Grid\n                item\n                xs={6}\n                md={4}\n                lg={4}\n                className={classes.gridItem}\n                style={{ display: 'flex', justifyContent: 'center', flexDirection: 'column', textAlign: 'center' }}\n              >\n                <Typography variant=\"h5\" style={{ textTransform: 'uppercase', color: 'white' }}>\n                  TOTAL VALUE LOCKED\n                </Typography>\n                <Typography variant=\"h6\" style={{ color: 'white' }}>\n                  ${tvl ? Number(Number(tvl).toFixed(0)).toLocaleString('en-US') : '-.--'}\n                </Typography>\n              </Grid>\n              <Grid\n                item\n                xs={6}\n                md={4}\n                lg={4}\n                className={classes.gridItem}\n                style={{ display: 'flex', justifyContent: 'center', flexDirection: 'column', textAlign: 'center' }}\n              >\n                <Typography variant=\"h5\" style={{ textTransform: 'uppercase', color: 'white' }}>\n                  YEARLY APR\n                </Typography>\n                <Typography variant=\"h6\" style={{ color: 'white' }}>\n                  {boardroomAPR.toFixed(2)}%\n                </Typography>\n              </Grid>\n            </Grid>\n\n            <Box mt={6}>\n              <StyledBoardroom>\n                <StyledCardsWrapper>\n                  <StyledCardWrapper>\n                    <Harvest />\n                  </StyledCardWrapper>\n                  <Spacer />\n                  <StyledCardWrapper>\n                    <Stake />\n                  </StyledCardWrapper>\n                </StyledCardsWrapper>\n              </StyledBoardroom>\n            </Box>\n          </Box>\n\n          <Box mt={5}>\n            <Grid container spacing={3} mt={10} style={{ justifyContent: 'center' }}>\n              <Button\n                disabled={stakedBalance.eq(0) || (!canWithdraw && !canClaimReward)}\n                onClick={onRedeem}\n                className={\n                  stakedBalance.eq(0) || (!canWithdraw && !canClaimReward)\n                    ? 'shinyButtonDisabledSecondary'\n                    : 'shinyButton'\n                }\n              >\n                Claim &amp; Withdraw\n              </Button>\n            </Grid>\n          </Box>\n          <Box mt={5}>\n            <Grid\n              container\n              spacing={3}\n              style={{ backgroundColor: '#212652', borderRadius: '30px', justifyContent: 'center' }}\n            >\n              <Grid\n                item\n                xs={12}\n                className={classes.gridItem}\n                style={{ display: 'flex', justifyContent: 'center', flexDirection: 'column', textAlign: 'center' }}\n              >\n                <Typography variant=\"h5\" style={{ textTransform: 'uppercase', color: '#EAFF45' }}>\n                  WE CHOSE TO GIVE REWARDS IN BUSD IN ORDER TO GIVE STABILITY TO INVESTORS EARNINGS\n                </Typography>\n              </Grid>\n            </Grid>\n          </Box>\n        </>\n      ) : (\n        <UnlockWallet />\n      )}\n    </Page>\n  );\n};\n\nconst StyledBoardroom = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  @media (max-width: 768px) {\n    width: 100%;\n  }\n`;\n\nconst StyledCardsWrapper = styled.div`\n  display: flex;\n  width: 600px;\n  @media (max-width: 768px) {\n    width: 100%;\n    flex-flow: column nowrap;\n    align-items: center;\n  }\n`;\n\nconst StyledCardWrapper = styled.div`\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  @media (max-width: 768px) {\n    width: 80%;\n  }\n`;\n\nexport default Boardroom;\n","E:\\projects\\adey\\front-end-main\\src\\views\\Vineyard\\Farm.js",["1235","1236"],"import React from 'react';\nimport { useWallet } from 'use-wallet';\nimport { Route, Switch, useRouteMatch } from 'react-router-dom';\nimport Bank from '../Bank';\n\nimport { Box, Container, Typography, Grid } from '@material-ui/core';\n\nimport { Alert } from '@material-ui/lab';\n\nimport UnlockWallet from '../../components/UnlockWallet';\nimport Page from '../../components/Page';\nimport FarmCard from './FarmCard';\nimport { createGlobalStyle } from 'styled-components';\n\nimport useBanks from '../../hooks/useBanks';\n\nimport HomeImage from '../../assets/img/background.jpg';\nimport VineyardInfoCard from '../../components/VineyardInfoCard';\n\nconst BackgroundImage = createGlobalStyle`\n  body {\n    //background: url(${HomeImage}) repeat !important;\n    background-size: cover !important;\n    background-size: cover !important;\n    background: #545454\n  }\n`;\n\nconst Farm = () => {\n  const [banks] = useBanks();\n  const { path } = useRouteMatch();\n  const { account } = useWallet();\n  const activeBanks = banks.filter((bank) => !bank.finished);\n\n  return (\n    <Switch>\n      <Page>\n        <Route exact path={path}>\n          <BackgroundImage />\n          {!!account ? (\n            <Container maxWidth=\"lg\">\n              <Typography color=\"textPrimary\" align=\"center\" variant=\"h3\" gutterBottom>\n                FARM VILLAGE\n              </Typography>\n              <Typography color=\"textPrimary\" align=\"center\" variant=\"h6\" gutterBottom style={{ marginBottom: '40px' }}>\n                Deposit your liquidity pool tokens to farm BUSD COINS.\n              </Typography>\n              <Box mt={5}>\n                <div hidden={activeBanks.filter((bank) => bank.sectionInUI === 2).length === 0}>\n                  <Grid container spacing={3} style={{ marginTop: '0px' }}>\n                    {activeBanks\n                      .filter((bank) => bank.sectionInUI === 2)\n                      .map((bank) => (\n                        <React.Fragment key={bank.name}>\n                          <VineyardInfoCard bank={bank} />\n                        </React.Fragment>\n                      ))}\n                  </Grid>\n                </div>\n              </Box>\n            </Container>\n          ) : (\n            <UnlockWallet />\n          )}\n        </Route>\n        <Route path={`${path}/:bankId`}>\n          <BackgroundImage />\n          <Bank />\n        </Route>\n      </Page>\n    </Switch>\n  );\n};\n\nexport default Farm;\n","E:\\projects\\adey\\front-end-main\\src\\views\\Rebates\\Cemetery.js",["1237"],"import React, {useMemo, useState, useEffect} from 'react';\nimport {useWallet} from 'use-wallet';\nimport {Route, Switch, useRouteMatch} from 'react-router-dom';\nimport {makeStyles} from '@material-ui/core/styles';\nimport Web3 from 'web3';\n\nimport {Box, Card, CardContent, Button, Typography, Grid} from '@material-ui/core';\n\nimport {Alert} from '@material-ui/lab';\n\nimport UnlockWallet from '../../components/UnlockWallet';\nimport Page from '../../components/Page';\nimport CemeteryCard from './CemeteryCard';\nimport {createGlobalStyle} from 'styled-components';\n\nimport useBanks from '../../hooks/useBanks';\nimport useRebateTreasury from '../../hooks/useRebateTreasury';\nimport useTombStats from '../../hooks/useWineStats';\nimport daoImg from '../../assets/img/1.jpg';\n\nconst web3 = new Web3();\nconst BN = (n) => new web3.utils.BN(n);\n\nconst BackgroundImage = createGlobalStyle`\n  body {\n    //background: url(${daoImg}) no-repeat !important;\n    background-size: cover !important;\n    background: radial-gradient(circle at 52.1% -29.6%, rgb(144, 17, 105) 0%, rgb(51, 0, 131) 100.2%);\n}\n\n\n`;\n\nconst useStyles = makeStyles((theme) => ({\n  gridItem: {\n    height: '100%',\n  },\n}));\n\nconst Cemetery = () => {\n  const classes = useStyles();\n  const [banks] = useBanks();\n  const {path} = useRouteMatch();\n  const {account} = useWallet();\n  const tombStats = useTombStats();\n  const activeBanks = banks.filter((bank) => !bank.finished);\n\n  const tombPriceInFTM = useMemo(() => (tombStats ? Number(tombStats.tokenInFtm).toFixed(4) : null), [tombStats]);\n\n  const rebateStats = useRebateTreasury();\n\n  const [claimablewine, setClaimablewine] = useState(0);\n  const [vested, setVested] = useState(0);\n\n  useEffect(() => {\n    updateVesting();\n    const interval = setInterval(updateVesting, 5000);\n    return () => clearInterval(interval);\n  }, []);\n\n  async function updateVesting() {\n    if (!window.ethereum) return;\n    const address = (await window.ethereum.request({method: 'eth_accounts'}))[0];\n    if (!address) return;\n\n    const claimable = await rebateStats.RebateTreasury.methods.claimableWine(address).call();\n    const vesting = await rebateStats.RebateTreasury.methods.vesting(address).call();\n    setClaimablewine(+web3.utils.fromWei(claimable));\n    setVested(+web3.utils.fromWei(BN(vesting.amount).sub(BN(vesting.claimed))));\n  }\n\n  async function claimTomb() {\n    console.log('claiming the tomb');\n    if (!window.ethereum) return;\n    const address = (await window.ethereum.request({method: 'eth_accounts'}))[0];\n    if (!address) return;\n    window.ethereum.request({\n      method: 'eth_sendTransaction',\n      params: [\n        {\n          from: address,\n          to: rebateStats.RebateTreasury._address,\n          data: rebateStats.RebateTreasury.methods.claimRewards().encodeABI(),\n        },\n      ],\n    });\n  }\n\n  return (\n    <Switch>\n      <Page>\n        <Route exact path={path}>\n          <BackgroundImage />\n          {!!account ? (\n            <>\n              <Typography color=\"textPrimary\" align=\"center\" variant=\"h3\" gutterBottom>\n                WINE Rebates\n              </Typography>\n              <Typography color=\"textPrimary\" align=\"center\" variant=\"h6\" gutterBottom style={{marginBottom: '40px'}}>\n                Buy Wine at a discount, vested over 3 days\n              </Typography>\n              <Box mt={2}>\n                <Grid container justify=\"center\" spacing={3}>\n                  <Grid item xs={12} md={3} lg={3} className={classes.gridItem}>\n                    <Card className={classes.gridItem}>\n                      <CardContent align=\"center\">\n                        <Typography variant=\"h5\">WINE TWAP</Typography>\n                        <Typography variant=\"h6\">{tombPriceInFTM ? tombPriceInFTM : '-.----'} MIM</Typography>\n                      </CardContent>\n                    </Card>\n                  </Grid>\n                </Grid>\n              </Box>\n              <div style={{ marginTop: '35px'}} hidden={activeBanks.filter((bank) => bank.sectionInUI === 4).length === 0}>\n                <Alert\n                  style={{backgroundColor: 'black', color: 'white', marginBottom: '15px'}}\n                  variant=\"filled\"\n                  severity=\"warning\"\n                >\n                  Rebates replenish everyday at 3pm & 3am UTC. Bond LPs or MIM and receive discounted WINE vested\n                  linearly over 3 days. WINE available will be limited and deposited to the contract daily.\n                </Alert>\n                <Grid container spacing={3}>\n                  {activeBanks\n                    .filter((bank) => bank.sectionInUI === 4)\n                    .map((bank) => (\n                      <React.Fragment key={bank.name}>\n                        <CemeteryCard bank={bank} />\n                      </React.Fragment>\n                    ))}\n                </Grid>\n              </div>\n              <Box mt={2}>\n                <Grid container justify=\"center\" spacing={3}>\n                  <Grid item xs={12} md={6} lg={6} className={classes.gridItem}>\n                    <Card style={{height: 'auto'}}>\n                      <CardContent align=\"center\">\n                        <Typography variant=\"h5\">\n                          WINE Vesting (3 days)\n                        </Typography>\n                        <Typography variant=\"h6\">{vested.toFixed(4)} Total Vested</Typography>\n                        <Typography variant=\"h6\">{claimablewine.toFixed(4)} Claimable</Typography>\n\n                        <Button\n                          color=\"primary\"\n                          size=\"small\"\n                          variant=\"contained\"\n                          onClick={claimTomb}\n                          style={{marginTop: '8px'}}\n                        >\n                          CLAIM\n                        </Button>\n                      </CardContent>\n                    </Card>\n                  </Grid>\n                </Grid>\n              </Box>\n            </>\n          ) : (\n            <UnlockWallet />\n          )}\n        </Route>\n      </Page>\n    </Switch>\n  );\n};\n\nexport default Cemetery;\n","E:\\projects\\adey\\front-end-main\\src\\state\\transactions\\reducer.ts",[],"E:\\projects\\adey\\front-end-main\\src\\state\\application\\reducer.ts",[],"E:\\projects\\adey\\front-end-main\\src\\theme\\colors.ts",[],"E:\\projects\\adey\\front-end-main\\src\\contexts\\Banks\\context.ts",[],"E:\\projects\\adey\\front-end-main\\src\\services\\event.ts",[],"E:\\projects\\adey\\front-end-main\\src\\views\\Dashboard\\Dashboard.tsx",["1238","1239"],"import React, { useMemo } from 'react';\nimport { useWallet } from 'use-wallet';\nimport styled from 'styled-components';\nimport { createGlobalStyle } from 'styled-components';\nimport moment from 'moment';\nimport Label from '../../components/Label';\nimport { Box, Grid, Button, Typography, Card, CircularProgress, CardContent, Paper } from '@material-ui/core';\nimport ProgressCountdown from './ProgressCountdown';\nimport UnlockWallet from '../../components/UnlockWallet';\nimport TokenSymbol from '../../components/TokenSymbol';\nimport Page from '../../components/Page';\nimport DashboardInfoCard from '../../components/DashboardInfoCard';\nimport DashboardInfoCardNodes from './DashboardInfoCardNodes';\nimport HomeImage from '../../assets/img/background.jpg';\nimport useTreasuryAllocationTimes from '../../hooks/useTreasuryAllocationTimes';\nimport useBanks from '../../hooks/useBanks';\nimport useBank from '../../hooks/useBank';\nimport useHarvestAll from '../../hooks/useHarvestAll';\nimport useCompoundAll from '../../hooks/useCompoundAll';\nimport useGrapeStats from '../../hooks/useGrapeStats';\nimport useWineStats from '../../hooks/useWineStats';\nimport useWalletStats from '../../hooks/useWalletStats';\nimport CountUp from 'react-countup';\nimport { useMediaQuery } from '@material-ui/core';\nimport useTokenBalance from '../../hooks/useTokenBalance';\nimport { getDisplayBalance } from '../../utils/formatBalance';\nimport useGrapeFinance from '../../hooks/useGrapeFinance';\nimport grapeImg from '../../assets/img/grape.png';\nimport nodesImg from '../../assets/img/gnode.png';\nimport wineImg from '../../assets/img/gshare.png';\nimport wineMimLP from '../../assets/img/gshare-mim.png';\nimport DashboardBoardroomCard from './DashboardBoardroomCard';\nimport useWinepressUserInfo from '../../hooks/useWinepressUserInfo';\n\nconst BackgroundImage = createGlobalStyle`\n  body {\n    //background: url(${HomeImage}) repeat !important;\n    background-size: cover !important;\n    background: #545454\n  }\n`;\n\nconst Dashboard = () => {\n  const { account } = useWallet();\n  const grapeFinance = useGrapeFinance();\n\n  const { to } = useTreasuryAllocationTimes();\n  const [banks] = useBanks();\n  const walletStats = useWalletStats(banks);\n  const grapeStats = useGrapeStats();\n  const wineStats = useWineStats();\n  const vineyardPools = banks.filter(\n    (bank) => (!bank.finished && bank.sectionInUI === 2) || bank.sectionInUI === 6 || bank.sectionInUI === 7,\n  );\n  const nodePools = [useBank('GrapeNode'), useBank('LPNode'), useBank('LPWlrsNode')];\n  const onReward = useHarvestAll(vineyardPools);\n  const harvestNodes = useHarvestAll(nodePools);\n  const compoundNodes = useCompoundAll(nodePools);\n\n  const grapeBalance = useTokenBalance(grapeFinance.GRAPE);\n  const displayGrapeBalance = useMemo(() => getDisplayBalance(grapeBalance), [grapeBalance]);\n  const wineBalance = useTokenBalance(grapeFinance.WINE);\n  const displayWineBalance = useMemo(() => getDisplayBalance(wineBalance), [wineBalance]);\n  const gbondBalance = useTokenBalance(grapeFinance.GBOND);\n  const displayGbondBalance = useMemo(() => getDisplayBalance(gbondBalance), [gbondBalance]);\n  const vintageBalance = useTokenBalance(grapeFinance.VINTAGE);\n  const svintageBalance = useTokenBalance(grapeFinance.SVINTAGE);\n  const displayVintageBalance = useMemo(() => getDisplayBalance(vintageBalance), [vintageBalance]);\n  const displaySVintageBalance = useMemo(() => getDisplayBalance(svintageBalance), [svintageBalance]);\n\n  const grapePriceInDollars = useMemo(\n    () => (grapeStats ? Number(grapeStats.priceInDollars).toFixed(2) : null),\n    [grapeStats],\n  );\n  const winePriceInDollars = useMemo(\n    () => (wineStats ? Number(wineStats.priceInDollars).toFixed(2) : null),\n    [wineStats],\n  );\n\n  const matches = useMediaQuery('(min-width:900px)');\n  const matches960 = useMediaQuery('(max-width:960px)');\n  const winepressUserInfo = useWinepressUserInfo();\n\n  const [totalInvested, totalRewards, totalInVineyard, totalInNodes, totalInWinery] = useMemo(\n    () =>\n      walletStats\n        ? [\n            walletStats.total,\n            winepressUserInfo\n              ? walletStats.totalRewards + winepressUserInfo.totalClaimable * Number(winepressUserInfo.wineMIMLPPrice)\n              : walletStats.totalRewards,\n            walletStats.totalInVineyard.toFixed(2),\n            walletStats.totalInNodes.toFixed(2),\n            walletStats.totalInWinery.toFixed(2),\n          ]\n        : [null, null, null, null],\n    [walletStats, winepressUserInfo],\n  );\n\n  const getTotalInvested = () => {\n    return (\n      totalInvested +\n      Number(displayGrapeBalance) * Number(grapePriceInDollars) +\n      Number(displayWineBalance) * Number(winePriceInDollars)\n    );\n  };\n\n  return (\n    <Page>\n      <BackgroundImage />\n      {!!account ? (\n        <div>\n          <Typography color=\"textPrimary\" align=\"center\" variant=\"h3\" gutterBottom>\n            Dashboard\n          </Typography>\n          <Typography color=\"textPrimary\" align=\"center\" variant=\"h6\" gutterBottom style={{ marginBottom: '40px' }}>\n            Manage all your funds, from one page.\n          </Typography>\n          <Grid container spacing={1}>\n            <Grid item xs={12}>\n              <Grid container spacing={1}>\n                <Grid item xs={6} sm={6} md={4} lg={2}>\n                  <Card style={{ height: '100px' }}>\n                    <CardContent>\n                      <Typography color=\"textPrimary\" align=\"center\" variant=\"h6\" gutterBottom>\n                        MY TOTAL\n                      </Typography>\n\n                      <Typography color=\"textPrimary\" align=\"center\" variant=\"h5\" style={{ fontWeight: 700 }}>\n                        {totalInvested != null ? (\n                          <CountUp end={getTotalInvested()} separator=\",\" prefix=\"≈$\" />\n                        ) : (\n                          <CircularProgress size={22} color=\"inherit\" />\n                        )}\n                      </Typography>\n                    </CardContent>\n                  </Card>\n                </Grid>\n                <Grid item xs={6} sm={6} md={4} lg={2}>\n                  <Card style={{ height: '100px' }}>\n                    <CardContent>\n                      <Typography color=\"textSecondary\" align=\"center\" variant=\"h6\" gutterBottom>\n                        <img\n                          src={grapeImg}\n                          alt=\"Grape\"\n                          height={25}\n                          style={{ verticalAlign: 'text-bottom', marginRight: '10px' }}\n                        />\n                        Vineyard\n                      </Typography>\n\n                      <Typography color=\"textPrimary\" align=\"center\" variant=\"h5\" style={{ fontWeight: 700 }}>\n                        {totalInVineyard ? (\n                          <CountUp end={totalInVineyard} separator=\",\" prefix=\"≈$\" />\n                        ) : (\n                          <CircularProgress size={27} color=\"inherit\" />\n                        )}\n                      </Typography>\n                    </CardContent>\n                  </Card>\n                </Grid>\n                <Grid item xs={6} sm={6} md={4} lg={2}>\n                  <Card style={{ height: '100px' }}>\n                    <CardContent>\n                      <Typography color=\"textSecondary\" align=\"center\" variant=\"h6\" gutterBottom>\n                        <img\n                          src={nodesImg}\n                          alt=\"Nodes\"\n                          height={25}\n                          style={{ verticalAlign: 'text-bottom', marginRight: '10px' }}\n                        />\n                        Nodes\n                      </Typography>\n\n                      <Typography color=\"textPrimary\" align=\"center\" variant=\"h5\" style={{ fontWeight: 700 }}>\n                        {totalInNodes != null ? (\n                          <CountUp end={totalInNodes} separator=\",\" prefix=\"≈$\" />\n                        ) : (\n                          <CircularProgress size={22} color=\"inherit\" />\n                        )}\n                      </Typography>\n                    </CardContent>\n                  </Card>\n                </Grid>\n                <Grid item xs={6} sm={6} md={4} lg={2}>\n                  <Card style={{ height: '100px' }}>\n                    <CardContent>\n                      <Typography color=\"textSecondary\" align=\"center\" variant=\"h6\" gutterBottom>\n                        <img\n                          src={wineImg}\n                          alt=\"Wine\"\n                          height={25}\n                          style={{ verticalAlign: 'text-bottom', marginRight: '10px' }}\n                        />\n                        Winery\n                      </Typography>\n\n                      <Typography color=\"textPrimary\" align=\"center\" variant=\"h5\" style={{ fontWeight: 700 }}>\n                        {totalInWinery != null ? (\n                          <CountUp end={Number(totalInWinery)} separator=\",\" prefix=\"≈$\" />\n                        ) : (\n                          <CircularProgress size={22} color=\"inherit\" />\n                        )}\n                      </Typography>\n                    </CardContent>\n                  </Card>\n                </Grid>\n                <Grid item xs={6} sm={6} md={4} lg={2}>\n                  <Card style={{ height: '100px' }}>\n                    <CardContent>\n                      <Typography color=\"textSecondary\" align=\"center\" variant=\"h6\" gutterBottom>\n                        <img\n                          src={wineMimLP}\n                          alt=\"Wine MIM\"\n                          height={25}\n                          style={{ verticalAlign: 'text-bottom', marginRight: '10px' }}\n                        />\n                        Winepress\n                      </Typography>\n\n                      <Typography color=\"textPrimary\" align=\"center\" variant=\"h5\" style={{ fontWeight: 700 }}>\n                        {winepressUserInfo ? (\n                          <CountUp\n                            end={Number(winepressUserInfo.totalBalance * Number(winepressUserInfo.wineMIMLPPrice))}\n                            separator=\",\"\n                            prefix=\"≈$\"\n                          />\n                        ) : (\n                          <CircularProgress style={{ marginLeft: '10px' }} size={22} color=\"inherit\" />\n                        )}\n                      </Typography>\n                    </CardContent>\n                  </Card>\n                </Grid>\n                <Grid item xs={6} sm={6} md={4} lg={2}>\n                  <Card style={{ height: '100px' }}>\n                    <CardContent>\n                      <Typography color=\"textPrimary\" align=\"center\" variant=\"h6\" gutterBottom>\n                        MY REWARDS\n                      </Typography>\n\n                      <Typography color=\"textPrimary\" align=\"center\" variant=\"h5\" style={{ fontWeight: 700 }}>\n                        {totalRewards != null ? (\n                          <CountUp end={Number(totalRewards)} separator=\",\" prefix=\"≈$\" />\n                        ) : (\n                          <CircularProgress size={22} color=\"inherit\" />\n                        )}\n                      </Typography>\n                    </CardContent>\n                  </Card>\n                </Grid>\n              </Grid>\n            </Grid>\n            <Grid item xs={12}>\n              <Card style={{ textAlign: 'center' }}>\n                <CardContent>\n                  <Balances\n                    style={{ display: 'flex', justifyContent: 'space-evenly', flexWrap: 'wrap', marginBottom: '0' }}\n                  >\n                    <StyledBalanceWrapper>\n                      <TokenSymbol width={35} height={35} symbol=\"GRAPE\" />\n                      <StyledBalance>\n                        <span className=\"wallet-token-balance\">{displayGrapeBalance}</span>\n                        <Label text=\"GRAPE\" />\n                      </StyledBalance>\n                    </StyledBalanceWrapper>\n\n                    <StyledBalanceWrapper>\n                      <TokenSymbol width={35} height={35} symbol=\"WINE\" />\n                      <StyledBalance>\n                        <span className=\"wallet-token-balance\">{displayWineBalance}</span>\n                        <Label text=\"WINE\" />\n                      </StyledBalance>\n                    </StyledBalanceWrapper>\n\n                    <StyledBalanceWrapper>\n                      <TokenSymbol width={35} height={35} symbol=\"GBOND\" />\n                      <StyledBalance>\n                        <span className=\"wallet-token-balance\">{displayGbondBalance}</span>\n                        <Label text=\"GBOND\" />\n                      </StyledBalance>\n                    </StyledBalanceWrapper>\n\n                    <StyledBalanceWrapper>\n                      <TokenSymbol width={35} height={35} symbol=\"sVintage\" />\n                      <StyledBalance>\n                        <span className=\"wallet-token-balance\">{displayVintageBalance}</span>\n                        <Label text=\"VINTAGE\" />\n                      </StyledBalance>\n                    </StyledBalanceWrapper>\n\n                    <StyledBalanceWrapper>\n                      <TokenSymbol width={35} height={35} symbol=\"sVintage\" />\n                      <StyledBalance>\n                        <span className=\"wallet-token-balance\">{displaySVintageBalance}</span>\n                        <Label text=\"sVINTAGE\" />\n                      </StyledBalance>\n                    </StyledBalanceWrapper>\n                  </Balances>\n                </CardContent>\n              </Card>\n            </Grid>\n          </Grid>\n          <Paper style={{ marginTop: '30px', marginBottom: '10px', height: '3px' }}></Paper>\n          <Grid container alignItems=\"center\" style={{ marginTop: '30px' }}>\n            <Grid item xs={12} md={6} lg={6}>\n              <Typography color=\"textPrimary\" style={{ textAlign: matches ? 'left' : 'center' }} variant=\"h4\">\n                Vineyard\n              </Typography>\n            </Grid>\n            <Grid item xs={12} md={6} lg={6} style={{ textAlign: matches ? 'right' : 'center' }}>\n              <Button style={{ marginTop: matches ? '0' : '10px' }} className=\"shinyButton\" onClick={onReward}>\n                Claim All From Vineyard\n              </Button>\n            </Grid>\n          </Grid>\n          <Typography color=\"textPrimary\" style={{ marginTop: '30px' }} variant=\"h5\">\n            Swapsicle pools\n          </Typography>{' '}\n          <Box mt={2}>\n            <Grid container spacing={3}>\n              {vineyardPools\n                .filter((bank) => bank.sectionInUI === 6)\n                .map((bank) => (\n                  <React.Fragment key={bank.name}>\n                    <DashboardInfoCard bank={bank} />\n                  </React.Fragment>\n                ))}\n            </Grid>\n          </Box>\n          <Typography color=\"textPrimary\" style={{ marginTop: '30px' }} variant=\"h5\">\n            Trader Joe pools\n          </Typography>{' '}\n          <Box mt={2}>\n            <Grid container spacing={3}>\n              {vineyardPools\n                .filter((bank) => bank.sectionInUI === 2)\n                .map((bank) => (\n                  <React.Fragment key={bank.name}>\n                    <DashboardInfoCard bank={bank} />\n                  </React.Fragment>\n                ))}\n            </Grid>\n          </Box>\n          <Typography color=\"textPrimary\" style={{ marginTop: '30px' }} variant=\"h5\">\n            Single Stake pools\n          </Typography>{' '}\n          <Box mt={3}>\n            <Grid container spacing={3}>\n              {vineyardPools\n                .filter((bank) => bank.sectionInUI === 7)\n                .map((bank) => (\n                  <React.Fragment key={bank.name}>\n                    <DashboardInfoCard bank={bank} />\n                  </React.Fragment>\n                ))}\n            </Grid>\n          </Box>\n          <Paper style={{ marginTop: '40px', marginBottom: '10px', height: '3px' }}></Paper>\n          <Grid container alignItems=\"center\" style={{ marginTop: '30px' }}>\n            <Grid item xs={12} md={6} lg={6}>\n              <Typography color=\"textPrimary\" style={{ textAlign: matches ? 'left' : 'center' }} variant=\"h4\">\n                Nodes\n              </Typography>{' '}\n            </Grid>\n            <Grid item xs={12} md={6} lg={6} style={{ textAlign: matches ? 'right' : 'center' }}>\n              <Button style={{ marginTop: matches ? '0' : '10px' }} className=\"shinyButton\" onClick={compoundNodes}>\n                Compound All From Nodes\n              </Button>\n              <Button\n                style={{ marginTop: matches ? '0' : '10px', marginLeft: '10px' }}\n                className=\"shinyButton\"\n                onClick={harvestNodes}\n              >\n                Claim All From Nodes\n              </Button>\n            </Grid>\n          </Grid>\n          <Box mt={3}>\n            <Grid container spacing={3}>\n              {nodePools.map((bank) => (\n                <React.Fragment key={bank.name}>\n                  <DashboardInfoCardNodes bank={bank} />\n                </React.Fragment>\n              ))}\n            </Grid>\n          </Box>\n          <Paper style={{ marginTop: '40px', marginBottom: '40px', height: '3px' }}></Paper>\n          <Typography color=\"textPrimary\" style={{ textAlign: matches ? 'left' : 'center' }} variant=\"h4\">\n            Winery\n          </Typography>{' '}\n          <Typography\n            style={{\n              marginTop: '20px',\n              textTransform: 'uppercase',\n              color: '#fff',\n              textAlign: matches ? 'left' : 'center',\n            }}\n          >\n            <b>Next Epoch: </b>\n            <ProgressCountdown base={moment().toDate()} hideBar={true} deadline={to} description=\"Next Epoch\" />\n          </Typography>\n          <Box mt={3}>\n            <Grid container spacing={3}>\n              <DashboardBoardroomCard />\n            </Grid>\n          </Box>\n        </div>\n      ) : (\n        <UnlockWallet />\n      )}\n    </Page>\n  );\n};\n\nconst StyledValue = styled.div`\n  color: white;\n  font-size: 30px;\n  font-weight: 700;\n`;\n\nconst StyledBalance = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Balances = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  margin-bottom: ${(props) => props.theme.spacing[4]}px;\n`;\n\nconst StyledBalanceWrapper = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  margin: 0 ${(props) => props.theme.spacing[3]}px;\n`;\n\nexport default Dashboard;\n","E:\\projects\\adey\\front-end-main\\src\\views\\Bond\\Bond.tsx",["1240","1241","1242","1243","1244","1245"],"import React, { useCallback, useMemo, useState } from 'react';\nimport Page from '../../components/Page';\nimport { createGlobalStyle } from 'styled-components';\nimport { Route, Switch, useRouteMatch } from 'react-router-dom';\nimport { useWallet } from 'use-wallet';\nimport UnlockWallet from '../../components/UnlockWallet';\nimport ExchangeCard from './components/ExchangeCard';\nimport styled from 'styled-components';\nimport Spacer from '../../components/Spacer';\nimport useBondStats from '../../hooks/useBondStats';\nimport useGrapeFinance from '../../hooks/useGrapeFinance';\nimport useCashPriceInLastTWAP from '../../hooks/useCashPriceInLastTWAP';\nimport { useTransactionAdder } from '../../state/transactions/hooks';\nimport ExchangeStat from './components/ExchangeStat';\nimport useTokenBalance from '../../hooks/useTokenBalance';\nimport useBondsPurchasable from '../../hooks/useBondsPurchasable';\nimport { getDisplayBalance } from '../../utils/formatBalance';\nimport { BOND_REDEEM_PRICE, BOND_REDEEM_PRICE_BN } from '../../grape-finance/constants';\nimport { Alert } from '@material-ui/lab';\nimport { roundAndFormatNumber } from '../../0x';\nimport BondEstimatorModal from './BondEstimatorModal';\nimport SwapVerticalCircleIcon from '@material-ui/icons/SwapVerticalCircle';\n\nimport HomeImage from '../../assets/img/background.jpg';\nimport { Grid, Typography, Box } from '@material-ui/core';\nimport { Box as MetarialBox } from '@mui/material';\n\nconst BackgroundImage = createGlobalStyle`\n  body {\n    //background: url(${HomeImage}) repeat !important;\n    background-size: cover !important;\n    background: #545454\n  }\n`;\n\nconst Bond: React.FC = () => {\n  const { account } = useWallet();\n  const grapeFinance = useGrapeFinance();\n  const addTransaction = useTransactionAdder();\n  const bondStat = useBondStats();\n  const cashPrice = useCashPriceInLastTWAP();\n\n  const bondsPurchasable = useBondsPurchasable();\n\n  const bondBalance = useTokenBalance(grapeFinance?.GBOND);\n  const memoizedBondBalance = useMemo(() => {\n    return bondBalance != null && Number(bondBalance) > 0 ? bondBalance : null;\n  }, [bondBalance]);\n\n  const handleBuyBonds = useCallback(\n    async (amount: string) => {\n      const tx = await grapeFinance.buyBonds(amount);\n      addTransaction(tx, {\n        summary: `Buy ${Number(amount).toFixed(2)} AKBOND with ${amount} AKUSD`,\n      });\n    },\n    [grapeFinance, addTransaction],\n  );\n\n  const handleRedeemBonds = useCallback(\n    async (amount: string) => {\n      const tx = await grapeFinance.redeemBonds(amount);\n      addTransaction(tx, { summary: `Redeem ${amount} AKBOND` });\n    },\n    [grapeFinance, addTransaction],\n  );\n\n  const isBondRedeemable = useMemo(() => cashPrice.gt(BOND_REDEEM_PRICE_BN), [cashPrice]);\n  const isBondPurchasable = useMemo(() => Number(bondStat?.tokenInFtm) < 1.01, [bondStat]);\n  const grapeReserves = useMemo(() => (Number(bondStat?.treasuryGrapes) / 1e18).toFixed(0), [bondStat]);\n  const bondSupply = useMemo(() => bondStat?.circulatingSupply, [bondStat]);\n  const bondScale = (Number(cashPrice) / 1e18).toFixed(2);\n\n  const [modalOpen, setModalOpen] = useState(false);\n\n  const handleCloseModal = () => {\n    setModalOpen(false);\n  };\n\n  const handleOpenModal = () => {\n    setModalOpen(true);\n  };\n\n  return (\n    <Switch>\n      <Page>\n        <BackgroundImage />{' '}\n        {!!account ? (\n          <>\n            {memoizedBondBalance && (\n              <BondEstimatorModal\n                open={modalOpen}\n                walletBondAmount={Number(memoizedBondBalance) / Math.pow(10, 18)}\n                handleClose={handleCloseModal}\n              />\n            )}\n            <Typography color=\"textPrimary\" align=\"center\" variant=\"h3\" gutterBottom>\n              ADEY'S BOND\n            </Typography>\n            <MetarialBox mt={2}>\n              <Grid item xs={12} sm={12} style={{ margin: '18px', display: 'flex', textAlign: 'center' }}>\n                <Alert variant=\"filled\" severity=\"error\">\n                  <b>Bonds are emitted & premiums redeemable based on last epoch TWAP prices not the current TWAP!</b>\n                </Alert>\n              </Grid>\n            </MetarialBox>\n            {/* <MetarialBox\n              onClick={handleOpenModal}\n              sx={{\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'flex-end',\n                gap: '2px',\n                cursor: 'pointer',\n              }}\n            >\n              <Typography style={{ fontSize: '15px', color: 'white' }}>\n                <u>Estimate your GBonds redeem bonus</u>\n              </Typography>\n              <SwapVerticalCircleIcon style={{ color: 'white' }} />\n            </MetarialBox> */}\n            <StyledBond>\n              <StyledCardWrapper>\n                <ExchangeCard\n                  action=\"Purchase\"\n                  fromToken={grapeFinance.GRAPE}\n                  fromTokenName=\"AKUSD\"\n                  toToken={grapeFinance.GBOND}\n                  toTokenName=\"AKBOND\"\n                  priceDesc={\n                    !isBondPurchasable\n                      ? 'AKUSD is over peg'\n                      : getDisplayBalance(bondsPurchasable, 18, 4) + ' AKUSD available for purchase'\n                  }\n                  onExchange={handleBuyBonds}\n                />\n              </StyledCardWrapper>\n              <StyledStatsWrapper style={{ marginTop: '50px' }}>\n                <Grid style={{ backgroundColor: '#212652' }}>\n                  <ExchangeStat\n                    tokenName=\"1 AKUSD\"\n                    description=\"Last-Hour TWAP Price\"\n                    //price={Number(grapeStat?.tokenInFtm).toFixed(4) || '-'}\n                    price={bondScale || '-'}\n                  />\n                  <hr style={{ margin: '0px 10px' }}></hr>\n                  <ExchangeStat\n                    tokenName=\"1 AKUSD\"\n                    description=\"Bond Price\"\n                    price={Number(bondStat?.tokenInFtm).toFixed(2) || '-'}\n                  />\n                </Grid>\n\n                <MetarialBox mt={3}>\n                  <Grid\n                    item\n                    xs={12}\n                    sm={12}\n                    style={{\n                      textAlign: 'center',\n                      color: '#ECCD0A',\n                      backgroundColor: '#212652',\n                      fontSize: '12px',\n                      padding: '10px',\n                    }}\n                  >\n                    <b>AKUSD Reserves:</b>{' '}\n                    {bondStat?.treasuryGrapes ? roundAndFormatNumber(Number(grapeReserves), 0) : '-'}\n                    <br></br>\n                    <b>Bond supply:</b>{' '}\n                    {bondStat?.circulatingSupply ? roundAndFormatNumber(Number(bondSupply), 0) : '-'} <br></br>\n                    <b>When reserves are {'>'} bond supply debt phase has finished</b>\n                  </Grid>\n                </MetarialBox>\n              </StyledStatsWrapper>\n              <StyledCardWrapper>\n                <ExchangeCard\n                  action=\"Redeem\"\n                  fromToken={grapeFinance.GBOND}\n                  fromTokenName=\"AKBOND\"\n                  toToken={grapeFinance.GRAPE}\n                  toTokenName=\"AKUSD\"\n                  priceDesc={`${getDisplayBalance(bondBalance)} AKUSD Available in wallet`}\n                  onExchange={handleRedeemBonds}\n                  disabledDescription={!isBondRedeemable ? `Enabled when 1 AKUSD > $${BOND_REDEEM_PRICE}` : null}\n                />\n              </StyledCardWrapper>\n            </StyledBond>\n          </>\n        ) : (\n          <UnlockWallet />\n        )}\n      </Page>\n    </Switch>\n  );\n};\n\nconst StyledBond = styled.div`\n  display: flex;\n  align-items: center;\n\n  @media (max-width: 768px) {\n    width: 100%;\n    flex-flow: column nowrap;\n    align-items: center;\n  }\n`;\n\nconst StyledCardWrapper = styled.div`\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  @media (max-width: 768px) {\n    width: 80%;\n  }\n`;\n\nconst StyledStatsWrapper = styled.div`\n  display: flex;\n  flex: 0.8;\n  margin: 0 20px;\n  flex-direction: column;\n\n  @media (max-width: 768px) {\n    width: 80%;\n    margin: 16px 0;\n  }\n`;\n\nexport default Bond;\n","E:\\projects\\adey\\front-end-main\\src\\views\\Launchpad\\Launchpad.tsx",[],"E:\\projects\\adey\\front-end-main\\src\\views\\Dao\\Dao.tsx",["1246","1247","1248","1249","1250","1251","1252","1253","1254","1255","1256","1257","1258","1259"],"import React, { useCallback, useMemo, useState } from 'react';\r\nimport { Route, Switch, useRouteMatch } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\n\r\nimport { useWallet } from 'use-wallet';\r\nimport { Grid, Typography, Paper } from '@material-ui/core';\r\n\r\nimport UnlockWallet from '../../components/UnlockWallet';\r\nimport Page from '../../components/Page';\r\n\r\nimport useGrapeStats from '../../hooks/useGrapeStats';\r\nimport useWineStats from '../../hooks/useWineStats';\r\nimport useSoftStats from '../../hooks/useSoftStats';\r\nimport useBNBPrice from '../../hooks/useBNBPrice';\r\n\r\nimport akusdImg from '../../assets/img/grape.png';\r\nimport akshareImg from '../../assets/img/gshare.png';\r\nimport softImg from '../../assets/img/vintage-token.png';\r\nimport bnbImg from '../../assets/img/bnb.png';\r\nimport busdImg from '../../assets/img/busd.png';\r\nimport priceImg from '../../assets/img/price.svg';\r\nimport totalImg from '../../assets/img/total.svg';\r\nimport valueImg from '../../assets/img/value.svg';\r\n\r\nconst StyledPaper = styled.div`\r\n  box-shadow: none;\r\n  border: 2px solid black;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 100%;\r\n  padding: 10px;\r\n`;\r\n\r\nconst Dao = () => {\r\n  const { account } = useWallet();\r\n\r\n  const grapeStats = useGrapeStats();\r\n  const wineStats = useWineStats();\r\n  const softStats = useSoftStats();\r\n  const bnbPrice = useBNBPrice();\r\n\r\n  console.log(grapeStats);\r\n\r\n  return (\r\n    <Switch>\r\n      <Page>\r\n        {!!account ? (\r\n          <>\r\n            <Typography align=\"center\" variant=\"h3\" gutterBottom style={{ color: 'black', marginTop: '20px' }}>\r\n              ADEY'S DAO\r\n            </Typography>\r\n            <Grid container>\r\n              <Grid container item>\r\n                <Grid item xs={2}></Grid>\r\n                <Grid item xs={2}>\r\n                  <StyledPaper>\r\n                    <img src={akusdImg} width=\"60%\" />\r\n                  </StyledPaper>\r\n                </Grid>\r\n                <Grid item xs={2}>\r\n                  <StyledPaper>\r\n                    <img src={akshareImg} width=\"60%\" />\r\n                  </StyledPaper>\r\n                </Grid>\r\n                <Grid item xs={2}>\r\n                  <StyledPaper>\r\n                    <img src={softImg} width=\"60%\" />\r\n                  </StyledPaper>\r\n                </Grid>\r\n                <Grid item xs={2}>\r\n                  <StyledPaper>\r\n                    <img src={bnbImg} width=\"60%\" />\r\n                  </StyledPaper>\r\n                </Grid>\r\n                <Grid item xs={2}>\r\n                  <StyledPaper>\r\n                    <img src={busdImg} width=\"60%\" />\r\n                  </StyledPaper>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid container item>\r\n                <Grid item xs={2} style={{ textAlign: 'center', padding: '10px' }}>\r\n                  <img src={priceImg} width=\"50%\" />\r\n                  <Typography>PRICE</Typography>\r\n                </Grid>\r\n                <Grid item xs={2}>\r\n                  <StyledPaper>${grapeStats ? Number(grapeStats.priceInDollars).toFixed(2) : '0'}</StyledPaper>\r\n                </Grid>\r\n                <Grid item xs={2}>\r\n                  <StyledPaper>${wineStats ? Number(wineStats.priceInDollars).toFixed(2) : '0'}</StyledPaper>\r\n                </Grid>\r\n                <Grid item xs={2}>\r\n                  <StyledPaper>${softStats ? Number(softStats.priceInDollars).toFixed(2) : '0'}</StyledPaper>\r\n                </Grid>\r\n                <Grid item xs={2}>\r\n                  <StyledPaper>${bnbPrice ? Number(bnbPrice).toFixed(2) : '0'}</StyledPaper>\r\n                </Grid>\r\n                <Grid item xs={2}>\r\n                  <StyledPaper>$1</StyledPaper>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid container item>\r\n                <Grid item xs={2} style={{ textAlign: 'center', padding: '10px' }}>\r\n                  <img src={totalImg} width=\"50%\" />\r\n                  <Typography>TOTAL</Typography>\r\n                </Grid>\r\n                <Grid item xs={2}>\r\n                  <StyledPaper>7,500,000</StyledPaper>\r\n                </Grid>\r\n                <Grid item xs={2}>\r\n                  <StyledPaper>35,000</StyledPaper>\r\n                </Grid>\r\n                <Grid item xs={2}>\r\n                  <StyledPaper>40,000</StyledPaper>\r\n                </Grid>\r\n                <Grid item xs={2}>\r\n                  <StyledPaper>500</StyledPaper>\r\n                </Grid>\r\n                <Grid item xs={2}>\r\n                  <StyledPaper>2,500,000.00</StyledPaper>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid container item>\r\n                <Grid item xs={2} style={{ textAlign: 'center', padding: '10px' }}>\r\n                  <img src={valueImg} width=\"50%\" />\r\n                  <Typography>VALUE</Typography>\r\n                </Grid>\r\n                <Grid item xs={2}>\r\n                  <StyledPaper>$7,5000,000.00</StyledPaper>\r\n                </Grid>\r\n                <Grid item xs={2}>\r\n                  <StyledPaper>$9,500,000.00</StyledPaper>\r\n                </Grid>\r\n                <Grid item xs={2}>\r\n                  <StyledPaper>$5,500,000.00</StyledPaper>\r\n                </Grid>\r\n                <Grid item xs={2}>\r\n                  <StyledPaper>$3,500,000.00</StyledPaper>\r\n                </Grid>\r\n                <Grid item xs={2}>\r\n                  <StyledPaper>$2,500,000.00</StyledPaper>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid style={{ backgroundColor: '#212652', padding: '15px', margin: '20px' }}>\r\n              <Typography align=\"center\" variant=\"h3\" gutterBottom style={{ color: 'white', marginTop: '20px' }}>\r\n                ASSET TOTAL VALUE: $9,231,000.00\r\n              </Typography>\r\n            </Grid>\r\n          </>\r\n        ) : (\r\n          <UnlockWallet />\r\n        )}\r\n      </Page>\r\n    </Switch>\r\n  );\r\n};\r\nexport default Dao;\r\n","E:\\projects\\adey\\front-end-main\\src\\views\\Help\\Help.tsx",[],"E:\\projects\\adey\\front-end-main\\src\\views\\NFTRaffle\\NFTRaffle.tsx",[],"E:\\projects\\adey\\front-end-main\\src\\views\\Roadmap\\Roadmap.tsx",[],"E:\\projects\\adey\\front-end-main\\src\\views\\Strategies\\Strategies.tsx",["1260"],"import React from 'react';\nimport Page from '../../components/Page';\nimport { Switch } from 'react-router-dom';\nimport strategy from '../../assets/img/strategy.jpg';\n\nconst Strategies: React.FC = () => {\n  return (\n    <Switch>\n      <Page>\n        <img src={strategy} width=\"100%\" style={{ margin: '50px 0px', borderRadius: '30px' }} />\n      </Page>\n    </Switch>\n  );\n};\n\nexport default Strategies;\n","E:\\projects\\adey\\front-end-main\\src\\views\\Raffle\\Raffle.tsx",[],"E:\\projects\\adey\\front-end-main\\src\\views\\Stats\\Stats.tsx",[],"E:\\projects\\adey\\front-end-main\\src\\contexts\\GrapeFinanceProvider\\GrapeFinanceProvider.tsx",[],"E:\\projects\\adey\\front-end-main\\src\\contexts\\Banks\\Banks.tsx",[],"E:\\projects\\adey\\front-end-main\\src\\contexts\\Modals\\Modals.tsx",[],"E:\\projects\\adey\\front-end-main\\src\\contexts\\RefreshContext\\RefreshContextProvider.tsx",[],"E:\\projects\\adey\\front-end-main\\src\\state\\application\\hooks.ts",[],"E:\\projects\\adey\\front-end-main\\src\\components\\BackgroundDecoration\\BackgroundDecoration.tsx",["1261","1262","1263","1264","1265","1266","1267","1268","1269","1270","1271","1272","1273","1274","1275","1276","1277","1278","1279","1280"],"import React from 'react';\nimport './style.css';\nimport grapeImg from '../../assets/img/grape.png';\nimport wineImg from '../../assets/img/gshare.png';\nimport vintageImg from '../../assets/img/vintage-token.png';\nimport gbondImg from '../../assets/img/gbond.png';\n\nconst BackgroundDecoration: React.FC = () => {\n  const { innerWidth } = window;\n\n  function randomNumberInRange(min: number, max: number) {\n    return Math.random() * (max - min) + min;\n  }\n\n  const grapeRandomPosY = randomNumberInRange(70, 150);\n  const wineRandomPosY = randomNumberInRange(70, 250);\n  const gBondRandomPosY = randomNumberInRange(0, 100);\n  const vintageRandomPosY = randomNumberInRange(0, 200);\n\n  const grapeRandomPosX = randomNumberInRange(0, innerWidth / 3);\n  const wineRandomPosX = randomNumberInRange(40, innerWidth / 4);\n  const gBondRandomPosX = randomNumberInRange(40, innerWidth / 2);\n  const vintageRandomPosX = randomNumberInRange(0, innerWidth / 5);\n\n  const grapeRandomRotate = randomNumberInRange(-20, 20);\n  const wineRandomRotate = randomNumberInRange(-20, 20);\n  const gBondRandomRotate = randomNumberInRange(-20, 20);\n  const vintageRandomRotate = randomNumberInRange(-20, 20);\n\n  const grapeRandomScale = randomNumberInRange(1, 2.3);\n  const wineRandomScale = randomNumberInRange(1, 2.5);\n  const gBondRandomScale = randomNumberInRange(1, 2.5);\n  const vintageRandomScale = randomNumberInRange(1, 2.7);\n\n  return (\n    <>\n      {/* <div className=\"background-image-1\" style={{top: `${grapeRandomPosY}px`, right: `${grapeRandomPosX}px`, transform: `rotate(${grapeRandomRotate}deg) scale(${grapeRandomScale})`}}>\n        <img alt=\"grape\" src={grapeImg} width={70} height={70} />\n      </div>\n      <div className=\"background-image-2\" style={{top: `${wineRandomPosY}px`, left: `${wineRandomPosX}px`, transform: `rotate(${wineRandomRotate}deg) scale(${wineRandomScale})`}}>\n        <img alt=\"wine\" src={wineImg} width={70} height={70} />\n      </div>\n      <div className=\"background-image-3\" style={{bottom: `${gBondRandomPosY}px`, right: `${gBondRandomPosX}px`, transform: `rotate(${gBondRandomRotate}deg) scale(${gBondRandomScale})`}}>\n        <img alt=\"gbond\" src={vintageImg} width={70} height={70} />\n      </div>\n      <div className=\"background-image-4\" style={{bottom: `${vintageRandomPosY}px`, left: `${vintageRandomPosX}px`, transform: `rotate(${vintageRandomRotate}deg) scale(${vintageRandomScale})`}}>\n        <img alt=\"vintage\" src={gbondImg} width={70} height={70} />\n      </div> */}\n    </>\n  );\n};\n\nexport default BackgroundDecoration;\n","E:\\projects\\adey\\front-end-main\\src\\components\\NetworkVerifier\\NetworkVerifier.tsx",[],"E:\\projects\\adey\\front-end-main\\src\\views\\Extinction\\Extinction.tsx",["1281","1282"],"import React from 'react';\nimport { useWallet } from 'use-wallet';\nimport { Route, Switch, useRouteMatch } from 'react-router-dom';\nimport { Box, Container, Typography, Grid, Card, CardContent, CircularProgress } from '@material-ui/core';\nimport UnlockWallet from '../../components/UnlockWallet';\nimport Page from '../../components/Page';\n\nimport PegPoolInfo from './components/PegPoolInfo';\nimport usePegPool from '../../hooks/usePegPool';\nimport usePegPoolRewards from '../../hooks/usePegPoolRewards';\nimport TokenSymbol from '../../components/TokenSymbol';\nimport CountUp from 'react-countup';\nimport Alert from '@mui/material/Alert';\n\nconst Extinction: React.FC = () => {\n  const { account } = useWallet();\n  const { path } = useRouteMatch();\n  const { pegPool } = usePegPool();\n  const { rewardTokens, totalRewardValue, apr } = usePegPoolRewards(pegPool);\n\n  return (\n    <Switch>\n      <Page>\n        <Route exact path={path}>\n          <Grid container spacing={3}>\n            <Grid item xs={12} sm={12} md={6}>\n              <Card style={{ textAlign: 'center' }}>\n                <CardContent>\n                  <Typography color=\"textSecondary\" variant=\"h3\" gutterBottom>\n                    🔥Peg Campaign🔥\n                  </Typography>\n                  <Grid container direction=\"column\">\n                    <Grid item>\n                      <Typography variant=\"h6\" gutterBottom>\n                        Deposit MIM, Get WINE and MIM rewards\n                      </Typography>\n                    </Grid>\n                    <Grid item>\n                      <Grid container justifyContent=\"center\" spacing={2}>\n                        <Grid item>\n                          <TokenSymbol symbol={'AKSHARE'} />\n                        </Grid>\n                        <Grid item>\n                          <TokenSymbol symbol={'BUSD'} />\n                        </Grid>\n                      </Grid>\n                    </Grid>\n                  </Grid>\n                </CardContent>\n              </Card>\n            </Grid>\n            <Grid item xs={12} sm={12} md={6}>\n              <Card style={{ textAlign: 'center', minHeight: '212px' }}>\n                <CardContent>\n                  <Typography variant=\"h3\">TOTAL VALUE LOCKED</Typography>\n                  {pegPool != null ? (\n                    <CountUp className=\"tvl\" end={Number(pegPool.totalDesposits)} separator=\",\" prefix=\"$\" />\n                  ) : (\n                    <CircularProgress style={{ marginTop: '20px' }} size={38} color=\"inherit\" />\n                  )}\n                </CardContent>\n              </Card>\n            </Grid>\n          </Grid>\n\n          {!!account ? (\n            pegPool &&\n            rewardTokens && (\n              <>\n                <Alert style={{ marginTop: '20px' }} variant=\"outlined\" severity=\"info\">\n                  There is a scaling withdrawal fee based on TWAP. The further away from 1.05 TWAP, the larger the\n                  withdrawal fee.\n                </Alert>\n                <PegPoolInfo\n                  pegPool={pegPool}\n                  rewardTokens={rewardTokens}\n                  totalRewardValue={totalRewardValue}\n                  apr={apr}\n                />\n              </>\n            )\n          ) : (\n            <UnlockWallet />\n          )}\n        </Route>\n      </Page>\n    </Switch>\n  );\n};\n\nexport default Extinction;\n","E:\\projects\\adey\\front-end-main\\src\\utils\\provider.ts",[],"E:\\projects\\adey\\front-end-main\\src\\utils\\convertTime.ts",[],"E:\\projects\\adey\\front-end-main\\src\\views\\Nodes\\GrapeNodes.jsx",[],"E:\\projects\\adey\\front-end-main\\src\\components\\Popups\\PopupItem.tsx",[],"E:\\projects\\adey\\front-end-main\\src\\hooks\\useRebateTreasury.js",[],"E:\\projects\\adey\\front-end-main\\src\\views\\Rebates\\CemeteryCard.js",["1283"],"import React from 'react';\nimport { Box, Button, Card, CardActions, CardContent, Typography, Grid } from '@material-ui/core';\nimport useRebateTreasury from \"../../hooks/useRebateTreasury\"\nimport useApprove, { ApprovalState } from '../../hooks/useApprove';\nimport useModal from '../../hooks/useModal';\nimport useTokenBalance from '../../hooks/useTokenBalance';\nimport DepositModal from './components/DepositModal';\nimport useTombFinance from '../../hooks/useGrapeFinance';\nimport TokenSymbol from '../../components/TokenSymbol';\nimport Web3 from \"web3\"\n\nconst web3 = new Web3()\nconst BN = n => new web3.utils.BN(n)\n\nconst CemeteryCard = ({ bank }) => {\n  const tombFinance = useTombFinance();\n\n  const rebateStats = useRebateTreasury()\n\n  const [approveStatus, approve] = useApprove(tombFinance.externalTokens[bank.depositTokenName], \"0xde18bD8EC77692dC29608DFe962D65eC6B84161d\");\n\n  const tokenBalance = useTokenBalance(tombFinance.externalTokens[bank.depositTokenName]);\n\n  const [onPresentDeposit, onDismissDeposit] = useModal(\n    <DepositModal\n      max={tokenBalance}\n      onConfirm={async (value) => {\n        console.log(\"running my on confirm\")\n        console.log(\"doing the bond\")\n        console.log(BN(Math.floor(value * 10000)).mul(BN(10).pow(BN(14))).toString())\n        if (!window.ethereum) return\n        const account = (await window.ethereum.request({ method: \"eth_accounts\" }))[0]\n        if (!account) return\n         window.ethereum.request({\n           method: \"eth_sendTransaction\",\n           params: [{\n              from: account,\n              to: rebateStats.RebateTreasury._address,\n              data: rebateStats.RebateTreasury.methods.bond(tombFinance.externalTokens[bank.depositTokenName].address, BN(Math.floor(value * 10000)).mul(BN(10).pow(BN(14)))).encodeABI()\n          }]\n        })\n        \n      }}\n      tokenName={bank.depositTokenName}\n      token={rebateStats.assets.find( token => token.token === tombFinance.externalTokens[bank.depositTokenName].address)}\n    />,\n  );\n\n  return (\n    <Grid item xs={12} md={4} lg={4}>\n      \n      <Card variant=\"outlined\" style={{ padding: '10px', border: '1px solid var(--white)' }}>\n        <CardContent>\n          <Box style={{ position: 'relative' }}>\n            <Box\n              style={{\n                position: 'absolute',\n                right: '0px',\n                top: '-5px',\n                height: '48px',\n                width: '48px',\n                borderRadius: '40px',\n                backgroundColor: 'transparent',\n                alignItems: 'center',\n                display: 'flex',\n                justifyContent: 'center',\n              }}\n            >\n              <TokenSymbol size={32} symbol={bank.depositTokenName} />\n            </Box>\n            <Typography variant=\"h5\" component=\"h2\">\n              {bank.depositTokenName}\n            </Typography>\n            <Typography color=\"textSecondary\">\n              {/* {bank.name} */}\n              Bond {bank.depositTokenName.toUpperCase()} Earn WINE\n            </Typography>\n           \n          </Box>\n        </CardContent>\n        <CardActions style={{ justifyContent: 'flex-end' }}>\n          {approveStatus !== ApprovalState.APPROVED ? (\n              <Button\n              disabled={approveStatus !== ApprovalState.NOT_APPROVED}\n              className=\"shinyButton\"\n              onClick={approve}\n              >\n              Approve {bank.depositTokenName}\n              </Button>\n          ) : (\n            <Button color=\"primary\" size=\"small\" variant=\"contained\" onClick={onPresentDeposit}>\n              Bond\n            </Button>\n          )}\n\n        </CardActions>\n      </Card>\n    </Grid>\n  );\n};\n\nexport default CemeteryCard;\n","E:\\projects\\adey\\front-end-main\\src\\hooks\\useWineStats.ts",[],"E:\\projects\\adey\\front-end-main\\src\\hooks\\useBanks.ts",[],"E:\\projects\\adey\\front-end-main\\src\\state\\application\\actions.ts",[],"E:\\projects\\adey\\front-end-main\\src\\state\\transactions\\actions.ts",[],"E:\\projects\\adey\\front-end-main\\src\\hooks\\useGrapeFinance.ts",[],"E:\\projects\\adey\\front-end-main\\src\\hooks\\useRaffleBalance.ts",["1284"],"import {useEffect, useState} from 'react';\nimport useGrapeFinance from './useGrapeFinance';\nimport {TokenStat} from '../grape-finance/types';\nimport useRefresh from './useRefresh';\n\nconst useRaffleStats = (account: string, raffleAddress: string) => {\n  const [stat, setStat] = useState<TokenStat>();\n  const {fastRefresh} = useRefresh();\n  const grapeFinance = useGrapeFinance();\n  \n  useEffect(() => {\n    async function fetchGrapePrice() {\n      \n      try {\n        setStat(await grapeFinance.getRaffleStat(account, raffleAddress));\n      } catch (err) {\n        console.error(err);\n      }\n    }\n    fetchGrapePrice();\n  }, [setStat, grapeFinance, fastRefresh]);\n\n  return stat;\n};\n\nexport default useRaffleStats;\n","E:\\projects\\adey\\front-end-main\\src\\components\\Page\\index.ts",[],"E:\\projects\\adey\\front-end-main\\src\\grape-finance\\ether-utils.ts",[],"E:\\projects\\adey\\front-end-main\\src\\hooks\\usePegPool.ts",["1285"],"import { useCallback, useEffect, useState } from 'react';\nimport { PegPool } from '../grape-finance/types';\nimport useBombFinance from './useGrapeFinance';\nimport useRefresh from './useRefresh';\n\nconst usePegPool = () => {\n  const bombFinance = useBombFinance();\n  const isUnlocked = bombFinance?.isUnlocked;\n  const [pegPool, setPegPool] = useState<PegPool>(null);\n  const { slowRefresh } = useRefresh();\n\n  const fetchPool = useCallback(async () => {\n    setPegPool(await bombFinance.getPegPool());\n  }, [bombFinance]);\n\n  const refreshPool = async () => {\n    setPegPool(await bombFinance.getPegPool());\n  };\n\n  useEffect(() => {\n    if (isUnlocked) {\n      refreshPool().catch((err) => console.error(`Failed to fetch peg pool: ${err.stack}`));\n    }\n  }, [bombFinance, fetchPool, isUnlocked, slowRefresh]);\n\n  return { pegPool, refreshPool };\n};\n\nexport default usePegPool;\n","E:\\projects\\adey\\front-end-main\\src\\hooks\\usePegPoolRewards.ts",["1286","1287","1288","1289"],"import { ethers } from 'ethers';\nimport { formatEther } from 'ethers/lib/utils';\nimport { useEffect, useState } from 'react';\nimport { PegPool, PegPoolToken } from '../grape-finance/types';\nimport { getDexPriceFromPair } from '../utils/dexscreener';\nimport { getDisplayBalance } from '../utils/formatBalance';\nimport useBombFinance from './useGrapeFinance';\n\nconst usePegPoolRewards = (pegPool: PegPool) => {\n  const bombFinance = useBombFinance();\n  const isUnlocked = bombFinance?.isUnlocked;\n  const [rewardTokens, setRewardTokens] = useState<PegPoolToken[]>([]);\n  const [totalRewardValue, setTotalRewardValue] = useState<string>(null);\n  const [compoundValue, setCompoundValue] = useState(null);\n\n  const [apr, setApr] = useState<{\n    daily: string;\n    yearly: string;\n  }>({\n    daily: '0',\n    yearly: '0',\n  });\n\n  const BSC_BLOCK_A_DAY = 28800;\n\n  useEffect(() => {\n    const getAPR = (tokens: PegPoolToken[]) => {\n      let totalDollarValuePerDay = 0;\n      let totalDollarValuePerYear = 0;\n\n      tokens.forEach((tk) => {\n        const rpb = tk.rewardPerBlock;\n        const dollarValuePerBlock = rpb * tk.currentPriceNum;\n        const amountPerDay = dollarValuePerBlock * BSC_BLOCK_A_DAY;\n        totalDollarValuePerDay += amountPerDay;\n        const amountPerYear = amountPerDay * 365;\n        totalDollarValuePerYear += amountPerYear;\n      });\n\n      const daily = (totalDollarValuePerDay / Number(pegPool.totalDesposits)) * 100;\n      const yearly = (totalDollarValuePerYear / Number(pegPool.totalDesposits)) * 100;\n\n      setApr({\n        daily: ethers.utils.commify(Number.isFinite(daily) ? daily.toFixed(2) : '0'),\n        yearly: ethers.utils.commify(Number.isFinite(yearly) ? yearly.toFixed(2) : '0'),\n      });\n    };\n\n    const getTokens = async () => {\n      const [tokens] = await Promise.all([bombFinance.getPegPoolPendingRewards()]);\n\n      let totalValue = 0;\n      for (const token of tokens) {\n        const priceInfo = await getDexPriceFromPair('avalanche', token.pairAddress);\n        console.log(priceInfo)\n        token.currentPrice = priceInfo.priceUI;\n        token.currentPriceNum = priceInfo.priceNum;\n        const pendingValue = priceInfo.priceNum * Number(token.amount);\n        token.pendingValue = pendingValue.toFixed(2);\n        totalValue += pendingValue;\n      }\n\n      getAPR(tokens);\n      setTotalRewardValue(totalValue.toFixed(2));\n      setRewardTokens(tokens);\n    };\n\n    const loadData = async () => {\n      await Promise.all([getTokens()]);\n    };\n\n    if (isUnlocked && pegPool) {\n      loadData();\n      const timer = setInterval(() => {\n        loadData();\n      }, 1000 * 15000);\n\n      return () => clearInterval(timer);\n    }\n  }, [isUnlocked, pegPool]);\n\n  return { rewardTokens, totalRewardValue, apr, compoundValue };\n};\n\nexport default usePegPoolRewards;\n","E:\\projects\\adey\\front-end-main\\src\\state\\transactions\\hooks.tsx",[],"E:\\projects\\adey\\front-end-main\\src\\views\\Raffle\\components\\ExchangeCard.tsx",[],"E:\\projects\\adey\\front-end-main\\src\\hooks\\useBank.ts",[],"E:\\projects\\adey\\front-end-main\\src\\views\\Extinction\\components\\PegPoolInfo.tsx",["1290","1291","1292"],"import React, { useMemo } from 'react';\nimport { Box, Button, Grid, Card, CardContent, Typography } from '@material-ui/core';\nimport useModal from '../../../hooks/useModal';\nimport DepositModal from '../../Bank/components/DepositModal';\nimport useTokenBalance from '../../../hooks/useTokenBalance';\nimport usePegPoolDeposit from '../../../hooks/usePegPoolDeposit';\nimport { PegPool, PegPoolToken } from '../../../grape-finance/types';\n//import { ApprovalState } from '../../../hooks/useApprove';\nimport PegPoolRewards from './PegPoolRewards';\nimport usePegPoolApprove from '../../../hooks/usePegPoolApproval';\nimport TokenSymbol from '../../../components/TokenSymbol';\nimport usePegPoolWithdrawFee from '../../../hooks/usePegPoolWithdrawFee';\nimport { Skeleton } from '@material-ui/lab';\nimport usePegPoolWithdraw from '../../../hooks/usePegPoolWithdraw';\nimport WithdrawModal from '../../Bank/components/WithdrawModal';\nimport useApprove, { ApprovalState } from '../../../hooks/useApprove';\nimport useCashPriceInEstimatedTWAP from '../../../hooks/useCashPriceInEstimatedTWAP';\n\nconst PegPoolInfo: React.FC<{\n  pegPool: PegPool;\n  rewardTokens: PegPoolToken[];\n  totalRewardValue: string;\n  apr: { daily: string; yearly: string };\n}> = ({ pegPool, rewardTokens, totalRewardValue, apr }) => {\n  const tokenBalance = useTokenBalance(pegPool.depositToken);\n  const { onDeposit } = usePegPoolDeposit(pegPool);\n  const { onWithdraw } = usePegPoolWithdraw(pegPool);\n  const [approveStatus, approve] = useApprove(pegPool.depositToken, '0x6Cc4D2653aaaCD005E076300796d4981339C5fAF');\n  const { withdrawFeePercent } = usePegPoolWithdrawFee();\n  const cashStat = useCashPriceInEstimatedTWAP();\n  const twap = useMemo(() => (cashStat ? Number(cashStat.priceInDollars).toFixed(4) : null), [cashStat]);\n\n  const [onPresentDeposit, onDismissDeposit] = useModal(\n    <DepositModal\n      max={tokenBalance}\n      decimals={pegPool.depositToken.decimal}\n      onConfirm={(amount) => {\n        if (Number(amount) <= 0 || isNaN(Number(amount))) return;\n        onDeposit(amount);\n        onDismissDeposit();\n      }}\n      tokenName={pegPool.depositTokenName}\n    />,\n  );\n\n  const [onPresentWithdraw, onDismissWithdraw] = useModal(\n    <WithdrawModal\n      max={pegPool.userInfo.amountDepositedBN}\n      decimals={pegPool.depositToken.decimal}\n      onConfirm={(amount) => {\n        if (Number(amount) <= 0 || isNaN(Number(amount))) return;\n        onWithdraw(amount);\n        onDismissWithdraw();\n      }}\n      tokenName={pegPool.depositTokenName}\n    />,\n  );\n\n  return (\n    <Grid container spacing={3} style={{ marginTop: '10px' }}>\n      <Grid item xs={12} sm={12} md={6}>\n        <Card variant=\"outlined\">\n          <CardContent>\n            <div style={{ textAlign: 'center' }}>\n              <TokenSymbol symbol={'BUSD'} width={50} height={50} />\n            </div>\n            <Grid container style={{ marginTop: '20px' }} alignItems=\"baseline\" justifyContent=\"space-between\">\n              <Grid item>\n                <Typography variant=\"h6\">Your Deposits</Typography>\n              </Grid>\n              <Grid item>\n                <Typography align=\"right\"></Typography>\n                <Typography variant=\"h6\">{pegPool.userInfo?.amountDeposited} MIM</Typography>\n              </Grid>\n            </Grid>\n            <Grid container alignItems=\"baseline\" justifyContent=\"space-between\">\n              <Grid item>\n                <Typography variant=\"h6\">CURRENT TWAP / TARGET</Typography>\n              </Grid>\n              <Grid item>\n                <Typography align=\"right\"></Typography>\n                <Typography variant=\"h6\">{twap ? twap : '--'} / 1.05</Typography>\n              </Grid>\n            </Grid>\n            <Grid container justifyContent=\"center\" alignItems=\"center\" style={{ marginTop: '20px' }}>\n              {approveStatus !== ApprovalState.APPROVED ? (\n                <Button className=\"shinyButton\" disabled={!pegPool.depositsEnabled} onClick={approve} fullWidth={true}>\n                  Approve\n                </Button>\n              ) : (\n                <Button\n                  className=\"shinyButtonSecondary\"\n                  disabled={!pegPool.depositsEnabled}\n                  onClick={onPresentDeposit}\n                  fullWidth={true}\n                >\n                  {pegPool.depositsEnabled ? 'Deposit' : 'Above Peg'}\n                </Button>\n              )}\n            </Grid>\n\n            <Grid container justifyContent=\"center\" style={{ marginTop: '20px' }}>\n              <Typography>\n                Current TWAP withdrawal fee ={' '}\n                {withdrawFeePercent || withdrawFeePercent == 0 ? withdrawFeePercent : <Skeleton />}%\n              </Typography>\n\n              <Button\n                className={pegPool.userInfo?.isDeposited ? 'shinyButtonSecondary' : 'shinyButtonDisabled'}\n                fullWidth={true}\n                disabled={!pegPool.userInfo?.isDeposited}\n                onClick={onPresentWithdraw}\n              >\n                Withdraw\n              </Button>\n              <Typography>You will receive AKUSD-BUSD LP tokens when you withdraw</Typography>\n            </Grid>\n          </CardContent>\n        </Card>\n      </Grid>\n\n      <Grid item xs={12} sm={12} md={6}>\n        {rewardTokens && <PegPoolRewards rewardTokens={rewardTokens} totalRewardValue={totalRewardValue} apr={apr} />}\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default PegPoolInfo;\n","E:\\projects\\adey\\front-end-main\\src\\components\\Popups\\ErrorPopup.tsx",[],"E:\\projects\\adey\\front-end-main\\src\\views\\NFTRaffle\\components\\ExchangeCard.tsx",[],"E:\\projects\\adey\\front-end-main\\src\\components\\Popups\\TransactionPopup.tsx",[],"E:\\projects\\adey\\front-end-main\\src\\components\\VineyardInfoCard\\index.ts",[],"E:\\projects\\adey\\front-end-main\\src\\hooks\\useRefresh.ts",[],"E:\\projects\\adey\\front-end-main\\src\\components\\Chart\\index.js",[],"E:\\projects\\adey\\front-end-main\\src\\components\\LaunchCountdown\\index.ts",[],"E:\\projects\\adey\\front-end-main\\src\\components\\UnlockWallet\\index.ts",[],"E:\\projects\\adey\\front-end-main\\src\\views\\GrapeNode\\index.js",[],"E:\\projects\\adey\\front-end-main\\src\\grape-finance\\index.ts",[],"E:\\projects\\adey\\front-end-main\\src\\components\\TokenSymbol\\index.ts",[],"E:\\projects\\adey\\front-end-main\\src\\utils\\dexscreener.ts",[],"E:\\projects\\adey\\front-end-main\\src\\components\\NodesInfoCard\\index.ts",[],"E:\\projects\\adey\\front-end-main\\src\\hooks\\useTokenBalance.ts",[],"E:\\projects\\adey\\front-end-main\\src\\hooks\\useModal.ts",[],"E:\\projects\\adey\\front-end-main\\src\\components\\Page\\Page.tsx",["1293","1294","1295","1296","1297","1298","1299","1300","1301","1302","1303","1304","1305","1306","1307","1308","1309","1310","1311","1312","1313","1314","1315","1316","1317","1318","1319","1320","1321","1322","1323","1324","1325","1326","1327","1328","1329","1330","1331","1332","1333","1334","1335","1336","1337","1338","1339","1340","1341","1342","1343","1344","1345"],"import { Container, useMediaQuery } from '@material-ui/core';\nimport useEagerConnect from '../../hooks/useEagerConnect';\nimport Menu, { MenuProps } from '@mui/material/Menu';\nimport Tooltip from '@mui/material/Tooltip';\n\nimport Footer from '../Footer';\n\nimport React, { useEffect, useMemo } from 'react';\nimport { styled, alpha, useTheme, Theme, CSSObject } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport MuiDrawer from '@mui/material/Drawer';\nimport MuiAppBar, { AppBarProps as MuiAppBarProps } from '@mui/material/AppBar';\nimport Toolbar from '@mui/material/Toolbar';\nimport List from '@mui/material/List';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport { Link } from 'react-router-dom';\nimport AccountButton from '../Nav/AccountButton';\nimport useCashPriceInEstimatedTWAP from '../../hooks/useCashPriceInEstimatedTWAP';\n\nimport grapeLogo from '../../assets/img/logo1.png';\nimport grapeImg from '../../assets/img/grape.png';\nimport grapeMimImg from '../../assets/img/twap.png';\nimport nodesImg from '../../assets/img/gnode.png';\nimport bondImg from '../../assets/img/gbond.png';\nimport wineImg from '../../assets/img/gshare.png';\nimport vintageImg from '../../assets/img/vintage-token.png';\nimport magikImg from '../../assets/img/magik.png';\nimport creamImg from '../../assets/img/cream.png';\nimport beefyImg from '../../assets/img/beefy.png';\nimport yieldwolfImg from '../../assets/img/yieldwolf.png';\nimport debankImg from '../../assets/img/debank.png';\nimport rebatesImg from '../../assets/img/rebates.png';\nimport vintage from '../../assets/img/vintage-token.png';\nimport winemaker from '../../assets/img/Winemaker.png';\nimport goldenGrape from '../../assets/img/golden-grape.png';\nimport dashboardImg from '../../assets/img/dashboard.png';\nimport Divider from '@mui/material/Divider';\nimport IconButton from '@mui/material/IconButton';\n\nimport ListItem from '@mui/material/ListItem';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText';\n\nimport Collapse from '@mui/material/Collapse';\nimport StarBorder from '@mui/icons-material/StarBorder';\nimport useGrapeStats from '../../hooks/useGrapeStats';\nimport useWineStats from '../../hooks/useWineStats';\nimport useVintagePrice from '../../hooks/useVintagePrice';\n\nimport MenuIcon from '@mui/icons-material/Menu';\nimport ExpandLess from '@mui/icons-material/ExpandLess';\nimport ExpandMore from '@mui/icons-material/ExpandMore';\nimport ChevronLeftIcon from '@mui/icons-material/ChevronLeft';\nimport ChevronRightIcon from '@mui/icons-material/ChevronRight';\nimport SportsEsportsIcon from '@mui/icons-material/SportsEsports';\nimport RocketLaunchIcon from '@mui/icons-material/RocketLaunch';\nimport StadiumIcon from '@mui/icons-material/Stadium';\nimport SavingsIcon from '@mui/icons-material/Savings';\nimport AccountBalanceWalletIcon from '@mui/icons-material/AccountBalanceWallet';\nimport LinkIcon from '@mui/icons-material/Link';\nimport MenuBookIcon from '@mui/icons-material/MenuBook';\nimport QueryStatsIcon from '@mui/icons-material/QueryStats';\nimport MapIcon from '@mui/icons-material/Map';\nimport StorefrontIcon from '@mui/icons-material/Storefront';\nimport YouTubeIcon from '@mui/icons-material/YouTube';\nimport ShoppingCartIcon from '@mui/icons-material/ShoppingCart';\nimport LeaderboardIcon from '@mui/icons-material/Leaderboard';\nimport pressIcon from '../../assets/img/barrel.png';\nimport homeIcon from '../../assets/img/menu_home.png';\nimport tokenIcon from '../../assets/img/menu_token.png';\nimport bridgeIcon from '../../assets/img/menu_bridge.png';\nimport fiatIcon from '../../assets/img/menu_fiat.png';\nimport swapIcon from '../../assets/img/menu_swap.png';\nimport vaultIcon from '../../assets/img/menu_vault.png';\nimport dexIcon from '../../assets/img/menu_dex.png';\nimport Button from '@mui/material/Button';\nimport MenuItem from '@mui/material/MenuItem';\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\n\nconst drawerWidth = 220;\n\nconst openedMixin = (theme: Theme): CSSObject => ({\n  width: drawerWidth,\n  overflow: 'hidden',\n  overflowY: 'auto',\n  transition: theme.transitions.create('width', {\n    easing: theme.transitions.easing.sharp,\n    duration: theme.transitions.duration.enteringScreen,\n  }),\n});\n\nconst closedMixin = (theme: Theme): CSSObject => ({\n  transition: theme.transitions.create('width', {\n    easing: theme.transitions.easing.sharp,\n    duration: theme.transitions.duration.leavingScreen,\n  }),\n  overflowX: 'hidden',\n  width: 0,\n  [theme.breakpoints.up('sm')]: {\n    width: `calc(${theme.spacing(8)} + 1px)`,\n  },\n});\n\nconst DrawerHeader = styled('div')(({ theme }) => ({\n  display: 'flex',\n  marginTop: '25px',\n  alignItems: 'center',\n  justifyContent: 'flex-end',\n  padding: theme.spacing(0, 1),\n  // necessary for content to be below app bar\n  ...theme.mixins.toolbar,\n}));\n\ninterface AppBarProps extends MuiAppBarProps {\n  open?: boolean;\n}\n\nconst AppBar = styled(MuiAppBar, {\n  shouldForwardProp: (prop) => prop !== 'open',\n})<AppBarProps>(({ theme, open }) => ({\n  color: '#322f32 !important',\n  background: '#545454',\n  boxShadow: '50px 4px 26px -18px rgba(0,0,0,0.99) !important',\n  borderRadius: '0 !important',\n  zIndex: theme.zIndex.drawer + 1,\n  transition: theme.transitions.create(['width', 'margin'], {\n    easing: theme.transitions.easing.sharp,\n    duration: theme.transitions.duration.leavingScreen,\n  }),\n  ...(open && {\n    marginLeft: drawerWidth,\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  }),\n}));\n\nconst Drawer = styled(MuiDrawer, { shouldForwardProp: (prop) => prop !== 'open' })(({ theme, open }) => ({\n  width: drawerWidth,\n  overflow: 'hidden',\n  flexShrink: 0,\n  whiteSpace: 'nowrap',\n  boxSizing: 'border-box',\n  ...(open && {\n    ...openedMixin(theme),\n    '& .MuiDrawer-paper': openedMixin(theme),\n  }),\n  ...(!open && {\n    ...closedMixin(theme),\n    '& .MuiDrawer-paper': closedMixin(theme),\n  }),\n}));\n\nconst StyledMenu = styled((props: MenuProps) => (\n  <Menu\n    elevation={0}\n    anchorOrigin={{\n      vertical: 'bottom',\n      horizontal: 'right',\n    }}\n    transformOrigin={{\n      vertical: 'top',\n      horizontal: 'right',\n    }}\n    {...props}\n  />\n))(({ theme }) => ({\n  '& .MuiPaper-root': {\n    [theme.breakpoints.down('sm')]: {\n      display: 'none',\n    },\n    borderRadius: 6,\n    backgroundColor: 'rgba(147, 9, 147, 0.9) !important',\n    marginTop: theme.spacing(1),\n    minWidth: 190,\n    color: 'rgb(55, 65, 81)',\n    boxShadow:\n      'rgb(255, 255, 255) 0px 0px 0px 0px, rgba(0, 0, 0, 0.05) 0px 0px 0px 1px, rgba(0, 0, 0, 0.1) 0px 10px 15px -3px, rgba(0, 0, 0, 0.05) 0px 4px 6px -2px',\n    '& .MuiMenu-list': {\n      padding: '4px 0',\n    },\n    '& .MuiMenuItem-root': {\n      '& .MuiSvgIcon-root': {\n        fontSize: 18,\n        color: theme.palette.text.secondary,\n        marginRight: theme.spacing(1.5),\n      },\n      '&:active': {\n        backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),\n      },\n    },\n  },\n}));\n\nconst Page: React.FC = ({ children }) => {\n  useEagerConnect();\n\n  const grapeStats = useGrapeStats();\n  const bShareStats = useWineStats();\n  const vintagePrice = useVintagePrice();\n\n  const grapePrice = useMemo(() => (grapeStats ? Number(grapeStats.tokenInFtm).toFixed(3) : null), [grapeStats]);\n  const winePrice = useMemo(() => (bShareStats ? Number(bShareStats.priceInDollars).toFixed(2) : null), [bShareStats]);\n\n  const cashStat = useCashPriceInEstimatedTWAP();\n  const twap = useMemo(() => (cashStat ? Number(cashStat.priceInDollars).toFixed(4) : null), [cashStat]);\n\n  const theme = useTheme();\n  const [open, setOpen] = React.useState(true);\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(true);\n  };\n\n  const [gamesOpen, setGamesOpen] = React.useState(false);\n  const handleGamesClick = () => {\n    if (!open) {\n      handleDrawerOpen();\n    }\n    setGamesOpen(!gamesOpen);\n  };\n\n  const [vaultsOpen, setVaultsOpen] = React.useState(false);\n  const handleVaultsClick = () => {\n    if (!open) {\n      handleDrawerOpen();\n    }\n    setVaultsOpen(!vaultsOpen);\n  };\n\n  const [walletsOpen, setWalletsOpen] = React.useState(false);\n  const handleWalletsClick = () => {\n    if (!open) {\n      handleDrawerOpen();\n    }\n    setWalletsOpen(!walletsOpen);\n  };\n\n  const [usefullLinksOpen, setUsefulllinksOpen] = React.useState(false);\n  const handleUsefullLinksClick = () => {\n    if (!open) {\n      handleDrawerOpen();\n    }\n    setUsefulllinksOpen(!usefullLinksOpen);\n  };\n\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n  const buyOpen = Boolean(anchorEl);\n  const handleBuyClick = (event: React.MouseEvent<HTMLElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n  const handleBuyClose = () => {\n    setAnchorEl(null);\n  };\n\n  const screenSM = useMediaQuery('(min-width:600px)');\n\n  return (\n    <div style={{ position: 'relative', minHeight: '100vh' }}>\n      <Box sx={{ display: 'flex' }}>\n        <CssBaseline />\n        <AppBar position=\"fixed\" open={open}>\n          <Toolbar\n            style={{\n              gridGap: '100px',\n              minHeight: '100px',\n            }}\n          >\n            {/* <IconButton\n              aria-label=\"open drawer\"\n              onClick={handleDrawerOpen}\n              edge=\"start\"\n              sx={{\n                marginRight: !open ? '24px !important' : '0 !important',\n                ...(open && { display: 'none' }),\n              }}\n            >\n              <MenuIcon\n                sx={{\n                  color: 'white',\n                  fill: 'white',\n                }}\n              />\n            </IconButton> */}\n            <div>\n              <h3 style={{ color: '#212652', fontSize: '2.2rem' }}>ADEY'S</h3>\n              <h3 style={{ color: '#E4E935', fontSize: '2.2rem' }}>ADVANTAGE</h3>\n            </div>\n            <Box\n              style={{\n                flexGrow: '1',\n                display: 'flex',\n              }}\n            ></Box>\n            <div\n              className=\"price-flex\"\n              style={{\n                gridGap: '50px',\n              }}\n            >\n              <div className=\"price-item\">\n                <a\n                  className=\"text-decoration-none\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  href=\"https://app.bogged.finance/avax/swap?tokenIn=0x130966628846BFd36ff31a822705796e8cb8C18D&tokenOut=0x5541D83EFaD1f281571B343977648B75d95cdAC2\"\n                >\n                  <img src={grapeImg} alt=\"Grape\" width={45} height={45} />\n                  <span className=\"token-price\">{grapePrice ? '$' + grapePrice : '--'}</span>\n                </a>\n              </div>\n              <div className=\"price-item\">\n                <a\n                  className=\"text-decoration-none\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  href=\"https://app.bogged.finance/avax/swap?tokenIn=0x130966628846BFd36ff31a822705796e8cb8C18D&tokenOut=0xC55036B5348CfB45a932481744645985010d3A44\"\n                >\n                  <img src={wineImg} alt=\"Wine\" width={45} height={45} />\n                  <span className=\"token-price\">{winePrice ? '$' + winePrice : '--'}</span>\n                </a>\n              </div>\n              <div className=\"price-item\">\n                <a\n                  className=\"text-decoration-none\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  href=\"https://www.swapsicle.io/swap?inputCurrency=0x130966628846bfd36ff31a822705796e8cb8c18d&outputCurrency=0x01Af64EF39AEB5612202AA07B3A3829f20c395fd#/\"\n                >\n                  <img src={vintageImg} alt=\"Wine\" width={45} height={45} />\n                  <span className=\"token-price\">{vintagePrice ? '$' + vintagePrice : '--'}</span>\n                </a>\n              </div>\n              {/* <div className=\"price-item\">\n                <img src={grapeMimImg} alt=\"TWAP\" height={35} />\n                <span className=\"token-price\">{twap ? twap : '--'}/1.01</span>\n              </div> */}\n            </div>\n\n            <Box\n              style={{\n                display: 'flex',\n                gridGap: '20px',\n              }}\n            >\n              {/* {screenSM && (\n                <div>\n                  <Button\n                    className=\"shinyButton\"\n                    aria-haspopup=\"true\"\n                    aria-expanded={buyOpen ? 'true' : undefined}\n                    disableElevation\n                    onClick={handleBuyClick}\n                    endIcon={<KeyboardArrowDownIcon />}\n                  >\n                    Buy\n                  </Button>\n                  <StyledMenu\n                    id=\"customized-menu\"\n                    MenuListProps={{\n                      'aria-labelledby': 'customized-button',\n                    }}\n                    anchorEl={anchorEl}\n                    open={buyOpen}\n                    onClose={handleBuyClose}\n                  >\n                    <a\n                      className=\"menu-item\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      href=\"https://app.bogged.finance/avax/swap?tokenIn=0x130966628846BFd36ff31a822705796e8cb8C18D&tokenOut=0x5541D83EFaD1f281571B343977648B75d95cdAC2\"\n                    >\n                      <MenuItem onClick={handleBuyClose} disableRipple>\n                        Buy Grape\n                      </MenuItem>\n                    </a>\n                    <a\n                      className=\"menu-item\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      href=\"https://app.bogged.finance/avax/swap?tokenIn=0x130966628846BFd36ff31a822705796e8cb8C18D&tokenOut=0xC55036B5348CfB45a932481744645985010d3A44\"\n                    >\n                      <MenuItem onClick={handleBuyClose} disableRipple>\n                        Buy Wine\n                      </MenuItem>\n                    </a>\n                    <a className=\"menu-item\" href=\"/bond\">\n                      <MenuItem onClick={handleBuyClose} disableRipple>\n                        Buy Gbond\n                      </MenuItem>\n                    </a>\n                    <a\n                      className=\"menu-item\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      href=\"https://www.swapsicle.io/swap?inputCurrency=0x130966628846bfd36ff31a822705796e8cb8c18d&outputCurrency=0x01Af64EF39AEB5612202AA07B3A3829f20c395fd#/\"\n                    >\n                      <MenuItem onClick={handleBuyClose} disableRipple>\n                        Buy Vintage\n                      </MenuItem>\n                    </a>\n                    <Divider sx={{ my: 0.5 }} />\n                    <a\n                      className=\"menu-item\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      href=\"https://nftrade.com/assets/avalanche/0x99fec0ca5cd461884e2e6e8484c219bbfb91e2df\"\n                    >\n                      <MenuItem onClick={handleBuyClose} disableRipple>\n                        Buy NFTs with Avax\n                      </MenuItem>\n                    </a>\n                    <a\n                      className=\"menu-item\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      href=\"https://hexagon.market/collections/0x99fec0ca5cd461884e2e6e8484c219bbfb91e2df?sort=-highestPrice\"\n                    >\n                      <MenuItem onClick={handleBuyClose} disableRipple>\n                        Buy NFTs with Grape\n                      </MenuItem>\n                    </a>\n                  </StyledMenu>\n                </div>\n              )} */}\n              <AccountButton text=\"Connect\" />\n            </Box>\n          </Toolbar>\n        </AppBar>\n        <Drawer\n          variant=\"permanent\"\n          open={open}\n          style={{\n            color: '#322f32 !important',\n            backgroundColor: '#fff !important',\n            boxShadow: 'none !important',\n            borderRadius: '0 !important',\n          }}\n        >\n          <img src={grapeImg} alt=\"Grape\" style={{ margin: '5px 30px', width: 'calc(100% - 60px)' }} />\n          <div style={{ background: '#EAFF45', margin: '0px 30px', borderRadius: '15px' }}>\n            <Tooltip arrow followCursor title={open ? '' : 'Wine Press'} placement=\"top-start\">\n              <a href=\"/\" className=\"menu-item\" rel=\"noopener noreferrer\" style={{ padding: 0, display: 'block' }}>\n                <ListItem className=\"menu-item\" button disablePadding sx={{ display: 'block' }}>\n                  <ListItemButton\n                    sx={{\n                      minHeight: 48,\n                      justifyContent: open ? 'initial' : 'center',\n                    }}\n                  >\n                    <ListItemIcon\n                      sx={{\n                        color: 'black',\n                        minWidth: 0,\n                        mr: '0px',\n                        justifyContent: 'center',\n                      }}\n                    >\n                      <img src={homeIcon} alt=\"Home\" width={50} />\n                    </ListItemIcon>\n                    <div style={{ textAlign: 'left' }}>\n                      <h1 style={{ fontSize: '1.0rem', color: '#0C5D2D' }}>ADEY'S</h1>\n                      <h1 style={{ fontSize: '1.0rem', color: 'black' }}>HOME</h1>\n                    </div>\n                  </ListItemButton>\n                </ListItem>\n              </a>\n            </Tooltip>\n            <Divider color=\"#aaa\" />\n\n            <List>\n              <Tooltip arrow followCursor title={open ? '' : 'Dashboard'} placement=\"top-start\">\n                <ListItem className=\"menu-item\" button component={Link} to=\"#\" disablePadding sx={{ display: 'block' }}>\n                  <ListItemButton\n                    sx={{\n                      minHeight: 48,\n                      justifyContent: open ? 'initial' : 'center',\n                    }}\n                  >\n                    <ListItemIcon\n                      sx={{\n                        color: 'black',\n                        minWidth: 0,\n                        mr: '0px',\n                        justifyContent: 'center',\n                      }}\n                    >\n                      <img src={grapeImg} alt=\"Home\" width={50} />\n                    </ListItemIcon>\n                    <div style={{ textAlign: 'left' }}>\n                      <h1 style={{ fontSize: '1.0rem', color: '#0C5D2D' }}>ADEY'S</h1>\n                      <h1 style={{ fontSize: '1.0rem', color: 'black' }}>KINGDOM</h1>\n                    </div>\n                  </ListItemButton>\n                </ListItem>\n              </Tooltip>\n              {/* <Tooltip arrow followCursor title={open ? '' : \"ADEY'S HOME\"} placement=\"top-start\">\n                <ListItem\n                  className=\"menu-item\"\n                  button\n                  component={Link}\n                  to=\"/dashboard\"\n                  disablePadding\n                  sx={{ display: 'block', textAlign: 'left' }}\n                >\n                  <ListItemButton\n                    sx={{\n                      padding: '0px 20px',\n                      justifyContent: open ? 'initial' : 'center',\n                    }}\n                  >\n                    <h1 style={{ fontSize: '0.8rem', color: '#000000' }}>ADEY'S HOME</h1>\n                  </ListItemButton>\n                </ListItem>\n              </Tooltip> */}\n              <Tooltip arrow followCursor title={open ? '' : 'FARMERS VILLAGE'} placement=\"top-start\">\n                <ListItem\n                  className=\"menu-item\"\n                  button\n                  component={Link}\n                  to=\"/vineyard\"\n                  disablePadding\n                  sx={{ display: 'block', textAlign: 'left' }}\n                >\n                  <ListItemButton\n                    sx={{\n                      padding: '0px 20px',\n                      justifyContent: open ? 'initial' : 'center',\n                    }}\n                  >\n                    <h1 style={{ fontSize: '0.8rem', color: '#000000' }}>FARMERS VILLAGE</h1>\n                  </ListItemButton>\n                </ListItem>\n              </Tooltip>\n              <Tooltip arrow followCursor title={open ? '' : 'HIGH YIELD MARKET'} placement=\"top-start\">\n                <ListItem\n                  className=\"menu-item\"\n                  button\n                  component={Link}\n                  to=\"/winery\"\n                  disablePadding\n                  sx={{ display: 'block' }}\n                >\n                  <ListItemButton\n                    sx={{\n                      padding: '0px 20px',\n                      justifyContent: open ? 'initial' : 'center',\n                    }}\n                  >\n                    <h1 style={{ fontSize: '0.8rem', color: '#000000' }}>HIGH YIELD MARKET</h1>\n                  </ListItemButton>\n                </ListItem>\n              </Tooltip>\n              <Tooltip arrow followCursor title={open ? '' : \"ADEY'S STRATEGIES\"} placement=\"top-start\">\n                <ListItem\n                  className=\"menu-item\"\n                  button\n                  component={Link}\n                  to=\"/strategies\"\n                  disablePadding\n                  sx={{ display: 'block' }}\n                >\n                  <ListItemButton\n                    sx={{\n                      padding: '0px 20px',\n                      justifyContent: open ? 'initial' : 'center',\n                    }}\n                  >\n                    <h1 style={{ fontSize: '0.8rem', color: '#000000' }}>ADEY'S STRATEGIESY</h1>\n                  </ListItemButton>\n                </ListItem>\n              </Tooltip>\n              <Tooltip arrow followCursor title={open ? '' : \"ADEY'S Bonds\"} placement=\"top-start\">\n                <ListItem\n                  className=\"menu-item\"\n                  button\n                  component={Link}\n                  to=\"/bond\"\n                  disablePadding\n                  sx={{ display: 'block' }}\n                >\n                  <ListItemButton\n                    sx={{\n                      padding: '0px 20px',\n                      justifyContent: open ? 'initial' : 'center',\n                    }}\n                  >\n                    <h1 style={{ fontSize: '0.8rem', color: '#000000' }}>ADEY'S Bonds</h1>\n                  </ListItemButton>\n                </ListItem>\n              </Tooltip>\n              <Tooltip arrow followCursor title={open ? '' : \"ADEY'S DAO\"} placement=\"top-start\">\n                <ListItem\n                  className=\"menu-item\"\n                  button\n                  component={Link}\n                  to=\"/dao\"\n                  disablePadding\n                  sx={{ display: 'block' }}\n                >\n                  <ListItemButton\n                    sx={{\n                      padding: '0px 20px',\n                      justifyContent: open ? 'initial' : 'center',\n                    }}\n                  >\n                    <h1 style={{ fontSize: '0.8rem', color: '#000000' }}>ADEY'S DAO</h1>\n                  </ListItemButton>\n                </ListItem>\n              </Tooltip>\n            </List>\n\n            <Divider color=\"#aaa\" />\n            <Tooltip arrow followCursor title={open ? '' : 'Wine Press'} placement=\"top-start\">\n              <a\n                href=\"/\"\n                target=\"_blank\"\n                className=\"menu-item\"\n                rel=\"noopener noreferrer\"\n                style={{ padding: 0, display: 'block' }}\n              >\n                <ListItem className=\"menu-item\" button disablePadding sx={{ display: 'block' }}>\n                  <ListItemButton\n                    sx={{\n                      minHeight: 48,\n                      justifyContent: open ? 'initial' : 'center',\n                    }}\n                  >\n                    <ListItemIcon\n                      sx={{\n                        color: 'black',\n                        minWidth: 0,\n                        mr: '0px',\n                        justifyContent: 'center',\n                      }}\n                    >\n                      <img src={tokenIcon} alt=\"Home\" width={50} />\n                    </ListItemIcon>\n                    <div style={{ textAlign: 'left' }}>\n                      <h1 style={{ fontSize: '1.0rem', color: '#0C5D2D' }}>ADEY'S</h1>\n                      <h1 style={{ fontSize: '1.0rem', color: 'black' }}>TOKEN</h1>\n                      <h1 style={{ fontSize: '1.0rem', color: 'black' }}>MINTER</h1>\n                    </div>\n                  </ListItemButton>\n                </ListItem>\n              </a>\n            </Tooltip>\n\n            <Divider color=\"#aaa\" />\n            <Tooltip arrow followCursor title={open ? '' : 'Wine Press'} placement=\"top-start\">\n              <a\n                href=\"/\"\n                target=\"_blank\"\n                className=\"menu-item\"\n                rel=\"noopener noreferrer\"\n                style={{ padding: 0, display: 'block' }}\n              >\n                <ListItem className=\"menu-item\" button disablePadding sx={{ display: 'block' }}>\n                  <ListItemButton\n                    sx={{\n                      minHeight: 48,\n                      justifyContent: open ? 'initial' : 'center',\n                    }}\n                  >\n                    <ListItemIcon\n                      sx={{\n                        color: 'black',\n                        minWidth: 0,\n                        mr: '0px',\n                        justifyContent: 'center',\n                      }}\n                    >\n                      <img src={bridgeIcon} alt=\"Home\" width={50} />\n                    </ListItemIcon>\n                    <div style={{ textAlign: 'left' }}>\n                      <h1 style={{ fontSize: '1.0rem', color: '#0C5D2D' }}>ADEY'S</h1>\n                      <h1 style={{ fontSize: '1.0rem', color: 'black' }}>BRIDGE</h1>\n                    </div>\n                  </ListItemButton>\n                </ListItem>\n              </a>\n            </Tooltip>\n\n            <Divider color=\"#aaa\" />\n            <Tooltip arrow followCursor title={open ? '' : 'Wine Press'} placement=\"top-start\">\n              <a\n                href=\"/\"\n                target=\"_blank\"\n                className=\"menu-item\"\n                rel=\"noopener noreferrer\"\n                style={{ padding: 0, display: 'block' }}\n              >\n                <ListItem className=\"menu-item\" button disablePadding sx={{ display: 'block' }}>\n                  <ListItemButton\n                    sx={{\n                      minHeight: 48,\n                      justifyContent: open ? 'initial' : 'center',\n                    }}\n                  >\n                    <ListItemIcon\n                      sx={{\n                        color: 'black',\n                        minWidth: 0,\n                        mr: '0px',\n                        justifyContent: 'center',\n                      }}\n                    >\n                      <img src={fiatIcon} alt=\"Home\" width={50} />\n                    </ListItemIcon>\n                    <div style={{ textAlign: 'left' }}>\n                      <h1 style={{ fontSize: '1.0rem', color: '#0C5D2D' }}>ADEY'S</h1>\n                      <h1 style={{ fontSize: '1.0rem', color: 'black' }}>FIAT</h1>\n                    </div>\n                  </ListItemButton>\n                </ListItem>\n              </a>\n            </Tooltip>\n\n            <Divider color=\"#aaa\" />\n            <Tooltip arrow followCursor title={open ? '' : 'Wine Press'} placement=\"top-start\">\n              <a\n                href=\"/\"\n                target=\"_blank\"\n                className=\"menu-item\"\n                rel=\"noopener noreferrer\"\n                style={{ padding: 0, display: 'block' }}\n              >\n                <ListItem className=\"menu-item\" button disablePadding sx={{ display: 'block' }}>\n                  <ListItemButton\n                    sx={{\n                      minHeight: 48,\n                      justifyContent: open ? 'initial' : 'center',\n                    }}\n                  >\n                    <ListItemIcon\n                      sx={{\n                        color: 'black',\n                        minWidth: 0,\n                        mr: '0px',\n                        justifyContent: 'center',\n                      }}\n                    >\n                      <img src={swapIcon} alt=\"Home\" width={50} />\n                    </ListItemIcon>\n                    <div style={{ textAlign: 'left' }}>\n                      <h1 style={{ fontSize: '1.0rem', color: '#0C5D2D' }}>ADEY'S</h1>\n                      <h1 style={{ fontSize: '1.0rem', color: 'black' }}>SWAP/LP</h1>\n                    </div>\n                  </ListItemButton>\n                </ListItem>\n              </a>\n            </Tooltip>\n\n            <Divider color=\"#aaa\" />\n            <Tooltip arrow followCursor title={open ? '' : 'Wine Press'} placement=\"top-start\">\n              <a\n                href=\"/\"\n                target=\"_blank\"\n                className=\"menu-item\"\n                rel=\"noopener noreferrer\"\n                style={{ padding: 0, display: 'block' }}\n              >\n                <ListItem className=\"menu-item\" button disablePadding sx={{ display: 'block' }}>\n                  <ListItemButton\n                    sx={{\n                      minHeight: 48,\n                      justifyContent: open ? 'initial' : 'center',\n                    }}\n                  >\n                    <ListItemIcon\n                      sx={{\n                        color: 'black',\n                        minWidth: 0,\n                        mr: '0px',\n                        justifyContent: 'center',\n                      }}\n                    >\n                      <img src={vaultIcon} alt=\"Home\" width={50} />\n                    </ListItemIcon>\n                    <div style={{ textAlign: 'left' }}>\n                      <h1 style={{ fontSize: '1.0rem', color: '#0C5D2D' }}>ADEY'S</h1>\n                      <h1 style={{ fontSize: '1.0rem', color: 'black' }}>VAULT</h1>\n                    </div>\n                  </ListItemButton>\n                </ListItem>\n              </a>\n            </Tooltip>\n\n            <Divider color=\"#aaa\" />\n            <Tooltip arrow followCursor title={open ? '' : 'Wine Press'} placement=\"top-start\">\n              <a\n                href=\"/\"\n                target=\"_blank\"\n                className=\"menu-item\"\n                rel=\"noopener noreferrer\"\n                style={{ padding: 0, display: 'block' }}\n              >\n                <ListItem className=\"menu-item\" button disablePadding sx={{ display: 'block' }}>\n                  <ListItemButton\n                    sx={{\n                      minHeight: 48,\n                      justifyContent: open ? 'initial' : 'center',\n                    }}\n                  >\n                    <ListItemIcon\n                      sx={{\n                        color: 'black',\n                        minWidth: 0,\n                        mr: '0px',\n                        justifyContent: 'center',\n                      }}\n                    >\n                      <img src={dexIcon} alt=\"Home\" width={50} />\n                    </ListItemIcon>\n                    <div style={{ textAlign: 'left' }}>\n                      <h1 style={{ fontSize: '1.0rem', color: '#0C5D2D' }}>ADEY'S</h1>\n                      <h1 style={{ fontSize: '1.0rem', color: 'black' }}>MULTICHAIN</h1>\n                      <h1 style={{ fontSize: '1.0rem', color: 'black' }}>DEX</h1>\n                    </div>\n                  </ListItemButton>\n                </ListItem>\n              </a>\n            </Tooltip>\n          </div>\n        </Drawer>\n        <Box component=\"main\" sx={{ flexGrow: 1, p: 3 }}>\n          <DrawerHeader />\n          <Container maxWidth=\"lg\" style={{ paddingBottom: '5rem' }}>\n            {children}\n          </Container>\n          <Footer />\n        </Box>\n      </Box>\n    </div>\n  );\n};\n\nexport default Page;\n","E:\\projects\\adey\\front-end-main\\src\\grape-finance\\config.ts",["1346"],"import { Deployments } from './deployments';\nimport { ChainId } from '@pancakeswap/sdk';\n\nexport type Configuration = {\n  chainId: 56;\n  networkName: string;\n  ftmscanUrl: string;\n  defaultProvider: string;\n  deployments: Deployments;\n  externalTokens: { [contractName: string]: [string, number, [string, string]?] };\n  config?: EthereumConfig;\n\n  baseLaunchDate: Date;\n  bondLaunchesAt: Date;\n  boardroomLaunchesAt: Date;\n\n  refreshInterval: number;\n};\n\nexport type EthereumConfig = {\n  testing: boolean;\n  autoGasMultiplier: number;\n  defaultConfirmations: number;\n  defaultGas: string;\n  defaultGasPrice: string;\n  ethereumNodeTimeout: number;\n};\n\nexport const defaultEthereumConfig = {\n  testing: false,\n  autoGasMultiplier: 1.5,\n  defaultConfirmations: 3,\n  defaultGas: '6000000',\n  defaultGasPrice: '7000000000000',\n  ethereumNodeTimeout: 10000,\n};\n","E:\\projects\\adey\\front-end-main\\src\\hooks\\useCashPriceInEstimatedTWAP.ts",[],"E:\\projects\\adey\\front-end-main\\src\\hooks\\useApprove.ts",[],"E:\\projects\\adey\\front-end-main\\src\\views\\Raffle\\components\\ExchangeModal.tsx",[],"E:\\projects\\adey\\front-end-main\\src\\hooks\\usePegPoolWithdraw.ts",["1347"],"import { useCallback } from 'react';\nimport useBombFinance from './useGrapeFinance';\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\nimport { parseUnits } from 'ethers/lib/utils';\nimport { PegPool } from '../grape-finance/types';\nimport usePegPool from './usePegPool';\n\nconst usePegPoolWithdraw = (pool: PegPool) => {\n  const bombFinance = useBombFinance();\n  const handleTransactionReceipt = useHandleTransactionReceipt();\n  const { refreshPool } = usePegPool();\n\n  const handleWithdraw = useCallback(\n    async (amount: string) => {\n      const amountBn = parseUnits(amount);\n      handleTransactionReceipt(\n        bombFinance.withdrawPegPool(amountBn).then(async (tx) => {\n          await refreshPool();\n          return tx;\n        }),\n        `Withdraw ${amount} ${pool.depositTokenName} to pool`,\n      );\n    },\n    [pool, bombFinance, handleTransactionReceipt],\n  );\n\n  return { onWithdraw: handleWithdraw };\n};\n\nexport default usePegPoolWithdraw;\n","E:\\projects\\adey\\front-end-main\\src\\views\\Bank\\components\\WithdrawModal.tsx",[],"E:\\projects\\adey\\front-end-main\\src\\components\\Chart\\Chart.js",[],"E:\\projects\\adey\\front-end-main\\src\\views\\NFTRaffle\\components\\ExchangeModal.tsx",[],"E:\\projects\\adey\\front-end-main\\src\\components\\VineyardInfoCard\\VineyardInfoCard.tsx",["1348","1349","1350"],"import React, { useMemo } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Card, CardContent, Grid, Typography } from '@material-ui/core';\nimport { getDisplayBalance } from '../../utils/formatBalance';\nimport useStatsForPool from '../../hooks/useStatsForPool';\nimport useEarnings from '../../hooks/useEarnings';\nimport useStakedBalance from '../../hooks/useStakedBalance';\nimport useStakedTokenPriceInDollars from '../../hooks/useStakedTokenPriceInDollars';\nimport useGrapeStats from '../../hooks/useGrapeStats';\nimport useShareStats from '../../hooks/useWineStats';\nimport Stake from './components/Stake';\nimport Harvest from './components/Harvest';\nimport { Bank } from '../../grape-finance';\nimport PoolCardHeader from '../PoolCardHeader';\nimport PoolCardContent from '../PoolCardContent';\nimport TokenSymbol from '../TokenSymbol';\nimport plantImg from '../../assets/img/plant-removebg-preview.png';\n\ninterface VineyardInfoCardProps {\n  bank: Bank;\n}\n\nconst VineyardInfoCard: React.FC<VineyardInfoCardProps> = ({ bank }) => {\n  const statsOnPool = useStatsForPool(bank);\n  const earnings = useEarnings(bank.contract, bank.earnTokenName, bank.poolId);\n  const grapeStats = useGrapeStats();\n  const tShareStats = useShareStats();\n  const tokenStats = bank.earnTokenName === 'AKSHARE' ? tShareStats : grapeStats;\n\n  const tokenPriceInDollars = useMemo(\n    () => (tokenStats ? Number(tokenStats.priceInDollars).toFixed(2) : null),\n    [tokenStats],\n  );\n  const earnedInToken = Number(getDisplayBalance(earnings));\n  const earnedInDollars = (Number(tokenPriceInDollars) * earnedInToken).toFixed(2);\n\n  const stakedBalance = useStakedBalance(bank.contract, bank.poolId);\n  const stakedInToken = Number(getDisplayBalance(stakedBalance, bank.depositToken.decimal));\n  const stakedTokenPriceInDollars = useStakedTokenPriceInDollars(bank.depositTokenName, bank.depositToken);\n  const stakedInDollars = (Number(stakedTokenPriceInDollars) * stakedInToken).toFixed(2);\n\n  const backColor = ['#EAFF45', '#FF7134', '#58A0FF'];\n\n  return (\n    <Grid item xs={12} sm={12} md={6} lg={4}>\n      <Grid container justifyContent=\"space-between\" style={{ zIndex: '1000', alignItems: 'end' }}>\n        <TokenSymbol symbol={bank.firstDepositTokenName.toUpperCase()} height={70} width={70} />\n        <img src={plantImg} width={'50%'} height={'auto'} style={{ marginBottom: '-10px' }} />\n        <TokenSymbol symbol={bank.secondDepositTokenName.toUpperCase()} height={70} width={70} />\n      </Grid>\n      <Grid\n        style={{\n          background: backColor[bank.sort],\n          border: '1px solid black',\n          borderRadius: '200px',\n          textAlign: 'center',\n          marginTop: '-25px',\n          zIndex: 100,\n          width: '100%',\n          position: 'relative',\n        }}\n      >\n        <Typography variant=\"h4\" style={{ color: '#225D14' }}>\n          FARM\n        </Typography>\n        <Typography variant=\"h4\" style={{ color: '#225D14' }}>\n          {bank.firstDepositTokenName} - {bank.secondDepositTokenName}\n        </Typography>\n      </Grid>\n      <Card style={{ marginTop: '-15px', boxShadow: 'none' }}>\n        <CardContent style={{ boxShadow: '0px 0px 2px 0px black', margin: '-10px 20px' }}>\n          <PoolCardHeader bank={bank} statsOnPool={statsOnPool} stakedInToken={stakedInToken} showAPRCalc />\n          <PoolCardContent\n            bank={bank}\n            statsOnPool={statsOnPool}\n            stakedInToken={stakedInToken}\n            stakedInDollars={stakedInDollars}\n            earnedInToken={earnedInToken}\n            earnedInDollars={earnedInDollars}\n          />\n          <Grid item xs={12} md={12} lg={12}>\n            <Stake bank={bank} />\n          </Grid>\n          <Grid container spacing={1} style={{ marginTop: '10px', alignItems: 'center', justifyContent: 'center' }}>\n            <Grid item className=\"card-price-item\" xs={9} md={9} lg={9} style={{ color: '#212652' }}>\n              AKSHARE EARNED: ${earnedInToken}\n            </Grid>\n            <Grid item className=\"card-price-item\" xs={3} md={3} lg={3}>\n              <Harvest bank={bank} />\n            </Grid>\n          </Grid>\n        </CardContent>\n      </Card>\n    </Grid>\n  );\n};\n\nexport default VineyardInfoCard;\n","E:\\projects\\adey\\front-end-main\\src\\grape-finance\\GrapeFinance.ts",["1351","1352","1353","1354","1355"],"import { ChainId, CurrencyAmount, Fetcher, Pair, Route, Token, TokenAmount, Trade, TradeType } from '@pancakeswap/sdk';\n\nimport { Fetcher as FetcherPangolin, Token as TokenPangolin, Route as PangolinRoute } from '@pangolindex/sdk';\n\nimport { Configuration } from './config';\nimport {\n  ContractName,\n  TokenStat,\n  AllocationTime,\n  LPStat,\n  Bank,\n  NodesRewardWalletBalance,\n  PoolStats,\n  WineSwapperStat,\n  WalletNodesAndNFTs,\n  WalletStats,\n  ExtinctionPoolInfo,\n  ExtinctionRewardToken,\n  PegPool,\n  PegPoolToken,\n  PegPoolUserInfo,\n  WinepressUserInfo,\n} from './types';\nimport { BigNumber, BigNumberish, Contract, ethers, EventFilter } from 'ethers';\nimport { decimalToBalance } from './ether-utils';\nimport { TransactionResponse } from '@ethersproject/providers';\nimport ERC20, { LPERC20 } from './ERC20';\nimport { getFullDisplayBalance, getDisplayBalance } from '../utils/formatBalance';\nimport { getDefaultProvider } from '../utils/provider';\n\nimport { bankDefinitions } from '../config';\nimport moment from 'moment';\nimport { parseUnits, formatEther } from 'ethers/lib/utils';\nimport { MIM_TICKER, SPOOKY_ROUTER_ADDR, GRAPE_TICKER, WINE_TICKER } from '../utils/constants';\nimport { Console } from 'console';\n\n/**\n * An API module of Grape Finance contracts.\n * All contract-interacting domain logic should be defined in here.\n */\nexport class GrapeFinance {\n  myAccount: string;\n  provider: ethers.providers.Web3Provider;\n  signer?: ethers.Signer;\n  config: Configuration;\n  contracts: { [name: string]: Contract };\n  nftContracts: { [name: string]: Contract };\n  externalTokens: { [name: string]: ERC20 };\n  externalLPs: { [name: string]: LPERC20 };\n  boardroomVersionOfUser?: string;\n\n  GRAPEBTCB_LP: Contract;\n  GRAPE: ERC20;\n  WINE: ERC20;\n  GBOND: ERC20;\n  SOFT: ERC20;\n  WAVAX: ERC20;\n  BUSD: ERC20;\n  WAMP: ERC20;\n  VOLT: ERC20;\n  SW: ERC20;\n  DAI: ERC20;\n  HSHARE: ERC20;\n  VINTAGELP: ERC20;\n  VINTAGE: ERC20;\n  SVINTAGE: ERC20;\n\n  constructor(cfg: Configuration) {\n    const { deployments, externalTokens } = cfg;\n    const provider = getDefaultProvider();\n    // loads contracts from deployments\n    this.contracts = {};\n    this.nftContracts = {};\n    for (const [name, deployment] of Object.entries(deployments)) {\n      if (deployment.type === 'NFT') {\n        this.nftContracts[name] = new Contract(deployment.address, deployment.abi, provider);\n      } else {\n        this.contracts[name] = new Contract(deployment.address, deployment.abi, provider);\n      }\n    }\n    this.externalTokens = {};\n    this.externalLPs = {};\n    for (const [symbol, [address, decimal, lp]] of Object.entries(externalTokens)) {\n      if (lp) {\n        let [tokenA, tokenB] = lp;\n        this.externalLPs[symbol] = new LPERC20(new ERC20(address, provider, symbol, decimal), [\n          new ERC20(tokenA, provider, symbol, decimal),\n          new ERC20(tokenB, provider, symbol, decimal),\n        ]);\n      }\n      this.externalTokens[symbol] = new ERC20(address, provider, symbol, decimal);\n    }\n    this.GRAPE = new ERC20(deployments.Grape.address, provider, 'AKUSD');\n    this.WINE = new ERC20(deployments.Wine.address, provider, 'AKSHARE');\n    this.SOFT = new ERC20(deployments.Soft.address, provider, 'SOFT');\n    this.GBOND = new ERC20(deployments.BBond.address, provider, 'AKBOND');\n    this.BUSD = this.externalTokens['BUSD'];\n    this.WAMP = this.externalTokens['WAMP'];\n    this.VOLT = this.externalTokens['VOLT'];\n    this.SW = this.externalTokens['AKUSD-BUSD-LP'];\n    this.DAI = this.externalTokens['DAI'];\n    this.HSHARE = this.externalTokens['HSHARE'];\n    this.VINTAGELP = this.externalTokens['SOFT-BUSD-LP'];\n    this.VINTAGE = this.externalTokens['SOFT'];\n    this.SVINTAGE = this.externalTokens['sVintage'];\n    // Uniswap V2 Pair\n    //this.GRAPEMIM_LP = new Contract(externalTokens['AKUSD-BUSD-LP'][0], IUniswapV2PairABI, provider);\n\n    this.config = cfg;\n    this.provider = provider;\n  }\n\n  /**\n   * @param provider From an unlocked wallet. (e.g. Metamask)\n   * @param account An address of unlocked wallet account.\n   */\n  unlockWallet(provider: any, account: string) {\n    const newProvider = new ethers.providers.Web3Provider(provider, this.config.chainId);\n    this.signer = newProvider.getSigner(0);\n    this.myAccount = account;\n    for (const [name, contract] of Object.entries(this.contracts)) {\n      this.contracts[name] = contract.connect(this.signer);\n    }\n    const tokens = [this.GRAPE, this.WINE, this.GBOND, ...Object.values(this.externalTokens)];\n    for (const token of tokens) {\n      token.connect(this.signer);\n    }\n    //this.GRAPEMIM_LP = this.GRAPEMIM_LP.connect(this.signer);\n    console.log(`🔓 Wallet is unlocked. Welcome, ${account}!`);\n    this.fetchBoardroomVersionOfUser()\n      .then((version) => (this.boardroomVersionOfUser = version))\n      .catch((err) => {\n        console.error(`Failed to fetch boardroom version: ${err.stack}`);\n        this.boardroomVersionOfUser = 'latest';\n      });\n  }\n\n  get isUnlocked(): boolean {\n    return !!this.myAccount;\n  }\n\n  //===================================================================\n  //===================== GET ASSET STATS =============================\n  //===================FROM APE TO DISPLAY =========================\n  //=========================IN HOME PAGE==============================\n  //===================================================================\n\n  async getWinepressUserInfo(): Promise<WinepressUserInfo> {\n    const { MINER } = this.contracts;\n    const userInfo = await MINER.userInfo(this.myAccount);\n    const pendingRewards = await MINER.pendingRewards(this.myAccount);\n    const wineStats = await this.getLPStat('AKSHARE-BUSD-LP');\n    return {\n      totalBalance: Number(userInfo.trackedTokenBalance / 1e18),\n      totalClaimable: Number(pendingRewards / 1e18),\n      wineMIMLPPrice: wineStats.priceOfOne,\n    };\n  }\n\n  async getGrapeStat(): Promise<TokenStat> {\n    const { GrapeRewardPool, GrapeGenesisRewardPool } = this.contracts;\n    const supply = await this.GRAPE.totalSupply();\n    const grapeRewardPoolSupply = await this.GRAPE.balanceOf(GrapeGenesisRewardPool.address);\n    const grapeRewardPoolSupply2 = await this.GRAPE.balanceOf(GrapeRewardPool.address);\n    const grapeCirculatingSupply = supply.sub(grapeRewardPoolSupply).sub(grapeRewardPoolSupply2);\n\n    const minusAirdrop = getDisplayBalance(grapeCirculatingSupply, this.GRAPE.decimal, 0);\n\n    const priceInBTC = await this.getTokenPriceFromPancakeswapBTC(this.GRAPE);\n\n    const priceOfOneBTC = 1;\n\n    const priceOfGrapeInDollars = (Number(priceInBTC) * Number(priceOfOneBTC)).toFixed(2);\n\n    return {\n      tokenInFtm: priceInBTC?.toString(),\n      priceInDollars: priceOfGrapeInDollars,\n      totalSupply: getDisplayBalance(supply, 18, 0),\n      circulatingSupply: minusAirdrop,\n    };\n  }\n\n  async getHermesStat(): Promise<TokenStat> {\n    const { GrapeRewardPool, GrapeGenesisRewardPool } = this.contracts;\n    const supply = await this.GRAPE.totalSupply();\n    const grapeRewardPoolSupply = await this.GRAPE.balanceOf(GrapeGenesisRewardPool.address);\n    const grapeRewardPoolSupply2 = await this.GRAPE.balanceOf(GrapeRewardPool.address);\n    const grapeCirculatingSupply = supply.sub(grapeRewardPoolSupply).sub(grapeRewardPoolSupply2);\n\n    const minusAirdrop = getDisplayBalance(grapeCirculatingSupply, this.GRAPE.decimal, 0);\n\n    const a = await this.getTokenPriceFromPangolin(this.HSHARE);\n\n    return {\n      tokenInFtm: a.toString(),\n      priceInDollars: a,\n      totalSupply: getDisplayBalance(supply, 18, 0),\n      circulatingSupply: minusAirdrop,\n    };\n  }\n\n  async getBTCPriceUSD(): Promise<Number> {\n    const priceOfOneBTC = await this.getBTCBPriceFromPancakeswap();\n    return Number(priceOfOneBTC);\n  }\n\n  async sendGrape(amount: string | number, recepient: string): Promise<TransactionResponse> {\n    const { Grape } = this.contracts;\n    return await Grape.transfer(recepient, decimalToBalance(amount));\n  }\n\n  async getNodesRewardWalletBalance(): Promise<NodesRewardWalletBalance> {\n    const nodesRewardWallet = '0xa3C4C965BA6aA9382a8Edd965D13CB495F8da6F5';\n    const grapes = await this.GRAPE.balanceOf(nodesRewardWallet);\n    const wines = await this.WINE.balanceOf(nodesRewardWallet);\n    const grapeMimSWs = await this.SW.balanceOf(nodesRewardWallet);\n    return {\n      grapes: getDisplayBalance(grapes, 18, 2),\n      wines: getDisplayBalance(wines, 18, 2),\n      grapeMimSWs: getDisplayBalance(grapeMimSWs, 18, 2),\n    };\n  }\n\n  async getRaffleStat(account: string, raffleAddress: string): Promise<TokenStat> {\n    let total = 0;\n    const { Grape } = this.contracts;\n\n    const priceInBTC = await this.getTokenPriceFromPancakeswapBTC(this.GRAPE);\n\n    const balOfRaffle = await this.GRAPE.balanceOf(raffleAddress);\n\n    const currentBlockNumber = await this.provider.getBlockNumber();\n\n    const filterTo = Grape.filters.Transfer(account, raffleAddress);\n\n    const startBlock = currentBlockNumber - 100000;\n\n    let allEvents: any = [];\n\n    for (let i = startBlock; i < currentBlockNumber; i += 2000) {\n      const _startBlock = i;\n      const _endBlock = Math.min(currentBlockNumber, i + 1999);\n      const events = await Grape.queryFilter(filterTo, _startBlock, _endBlock);\n      allEvents = [...allEvents, ...events];\n    }\n\n    if (allEvents.length !== 0 && account !== null) {\n      for (let i = 0; i < allEvents.length; i++) {\n        total = total + Number(allEvents[i].args.value);\n      }\n      total = total / 1e18;\n    } else {\n      total = 0;\n    }\n\n    return {\n      tokenInFtm: priceInBTC?.toString(),\n      priceInDollars: total.toString(),\n      totalSupply: getDisplayBalance(balOfRaffle, 18, 0),\n      circulatingSupply: raffleAddress.toString(),\n    };\n  }\n\n  /**\n   * Calculates various stats for the requested LP\n   * @param name of the LP token to load stats for\n   * @returns\n   */\n  async getLPStat(name: string): Promise<LPStat> {\n    const lpToken = this.externalTokens[name];\n    const lpTokenSupplyBN = await lpToken.totalSupply();\n    const lpTokenSupply = getDisplayBalance(lpTokenSupplyBN, 18);\n    const token0 = name.startsWith('AKUSD') ? this.GRAPE : this.WINE;\n    const isGrape = name.startsWith('AKUSD');\n    const tokenAmountBN = await token0.balanceOf(lpToken.address);\n    const tokenAmount = getDisplayBalance(tokenAmountBN, 18);\n    const mimAmountBN =\n      lpToken.symbol === 'AKUSD-AKSHARE-LP'\n        ? await this.WINE.balanceOf(lpToken.address)\n        : await this.BUSD.balanceOf(lpToken.address);\n\n    const mimAmount = getDisplayBalance(mimAmountBN, 18);\n    const tokenAmountInOneLP = Number(tokenAmount) / Number(lpTokenSupply);\n    const mimAmountInOneLP = Number(mimAmount) / Number(lpTokenSupply);\n    const lpTokenPrice = await this.getLPTokenPrice(lpToken, token0, isGrape);\n    const lpTokenPriceFixed = Number(lpTokenPrice).toFixed(2).toString();\n    const liquidity = (Number(lpTokenSupply) * Number(lpTokenPrice)).toFixed(2).toString();\n\n    return {\n      tokenAmount: tokenAmountInOneLP.toFixed(2).toString(),\n      mimAmount: mimAmountInOneLP.toFixed(2).toString(),\n      priceOfOne: lpTokenPriceFixed,\n      totalLiquidity: liquidity,\n      totalSupply: Number(lpTokenSupply).toFixed(2).toString(),\n    };\n  }\n\n  async getLPStatBTC(name: string): Promise<LPStat> {\n    const lpToken = this.externalTokens[name];\n\n    const lpTokenSupplyBN = await lpToken.totalSupply();\n\n    const lpTokenSupply = getDisplayBalance(lpTokenSupplyBN, 18);\n\n    const token0 = name.startsWith('AKUSD') ? this.GRAPE : this.WINE;\n    const isGrape = name.startsWith('AKUSD');\n\n    const tokenAmountBN = await token0.balanceOf(lpToken.address);\n\n    const tokenAmount = getDisplayBalance(tokenAmountBN, 18);\n\n    const btcAmountBN = await this.BUSD.balanceOf(lpToken.address);\n\n    const btcAmount = getDisplayBalance(btcAmountBN, 18);\n    const tokenAmountInOneLP = Number(tokenAmount) / Number(lpTokenSupply);\n    const mimAmountInOneLP = Number(btcAmount) / Number(lpTokenSupply);\n    const lpTokenPrice = await this.getLPTokenPrice(lpToken, token0, isGrape);\n\n    const lpTokenPriceFixed = Number(lpTokenPrice).toFixed(2).toString();\n\n    const liquidity = (Number(lpTokenSupply) * Number(lpTokenPrice)).toFixed(2).toString();\n\n    return {\n      tokenAmount: tokenAmountInOneLP.toFixed(2).toString(),\n      mimAmount: mimAmountInOneLP.toFixed(5).toString(),\n      priceOfOne: lpTokenPriceFixed,\n      totalLiquidity: liquidity,\n      totalSupply: Number(lpTokenSupply).toFixed(2).toString(),\n    };\n  }\n  /**\n   * Use this method to get price for Grape\n   * @returns TokenStat for GBOND\n   * priceInBNB\n   * priceInDollars\n   * TotalSupply\n   * CirculatingSupply (always equal to total supply for bonds)\n   */\n  async getBondStat(): Promise<TokenStat> {\n    const { Treasury } = this.contracts;\n    const grapeStat = await this.getGrapeStat();\n    const grapeBal = await Treasury.getReserve();\n\n    const bondGrapeRatioBN = await Treasury.getBondPremiumRate();\n\n    const modifier = bondGrapeRatioBN / 1e18 > 1 ? bondGrapeRatioBN / 1e18 : 1;\n\n    const priceOfBBondInDollars = (Number(grapeStat.priceInDollars) * modifier).toFixed(2);\n    const supply = await this.GBOND.displayedTotalSupply();\n\n    return {\n      tokenInFtm: priceOfBBondInDollars,\n      priceInDollars: priceOfBBondInDollars,\n      totalSupply: supply,\n      circulatingSupply: supply,\n      treasuryGrapes: grapeBal,\n    };\n  }\n\n  /**\n   * @returns TokenStat for WINE\n   * priceInBNB\n   * priceInDollars\n   * TotalSupply\n   * CirculatingSupply (always equal to total supply for bonds)\n   */\n  async getSoftStat(): Promise<TokenStat> {\n    const supply = await this.SOFT.totalSupply();\n\n    const priceInBNB = await this.getTokenPriceFromPancakeswap(this.SOFT);\n    const priceOfSharesInDollars = Number(priceInBNB).toFixed(2);\n\n    return {\n      tokenInFtm: priceOfSharesInDollars,\n      priceInDollars: priceOfSharesInDollars,\n      totalSupply: getDisplayBalance(supply, this.SOFT.decimal, 0),\n      circulatingSupply: getDisplayBalance(supply, this.SOFT.decimal, 0),\n    };\n  }\n\n  /**\n   * @returns TokenStat for WINE\n   * priceInBNB\n   * priceInDollars\n   * TotalSupply\n   * CirculatingSupply (always equal to total supply for bonds)\n   */\n  async getShareStat(): Promise<TokenStat> {\n    const { WineRewardPool } = this.contracts;\n\n    const supply = await this.WINE.totalSupply();\n\n    const priceInBNB = await this.getTokenPriceFromPancakeswap(this.WINE);\n\n    const grapeRewardPoolSupply = await this.WINE.balanceOf(WineRewardPool.address);\n\n    const tShareCirculatingSupply = supply.sub(grapeRewardPoolSupply);\n\n    const priceOfSharesInDollars = Number(priceInBNB).toFixed(2);\n\n    return {\n      tokenInFtm: priceOfSharesInDollars,\n      priceInDollars: priceOfSharesInDollars,\n      totalSupply: getDisplayBalance(supply, this.WINE.decimal, 0),\n      circulatingSupply: getDisplayBalance(tShareCirculatingSupply, this.WINE.decimal, 0),\n    };\n  }\n\n  async getVintagePrice(): Promise<string> {\n    const mimBalance = await this.BUSD.balanceOf(this.VINTAGELP.address);\n    const vintageBalance = await this.VINTAGE.balanceOf(this.VINTAGELP.address);\n    return (+mimBalance / +vintageBalance).toFixed(3);\n  }\n\n  async getWalletStats(banks: Bank[]): Promise<WalletStats> {\n    const vineyardBanks = banks.filter(\n      (bank) => !bank.finished && (bank.sectionInUI === 2 || bank.sectionInUI === 6 || bank.sectionInUI === 7),\n    );\n    const nodeBanks = banks.filter((bank) => !bank.finished && bank.sectionInUI === 3);\n    let totalInVineyard = 0,\n      totalInNodes = 0,\n      totalInWinery = 0,\n      totalRewards = 0;\n\n    const winePriceInDollars = Number(await this.getDepositTokenPriceInDollars('AKSHARE', this.WINE));\n    const grapePriceInDollars = Number(await this.getDepositTokenPriceInDollars('AKUSD', this.GRAPE));\n\n    // Vineyard\n    for (let i = 0; i < vineyardBanks.length; i++) {\n      const bank = vineyardBanks[i];\n      // bank Value\n      const stakedBalance = await this.stakedBalanceOnBank(bank.contract, bank.poolId, this.myAccount);\n      const stakedInToken = Number(getDisplayBalance(stakedBalance, bank.depositToken.decimal));\n      const stakedTokenPriceInDollars = Number(\n        await this.getDepositTokenPriceInDollars(bank.depositTokenName, bank.depositToken),\n      );\n      totalInVineyard += stakedTokenPriceInDollars * stakedInToken;\n\n      // bank Earnings\n      const bankEarnings = await this.earnedFromBank(bank.contract, bank.earnTokenName, bank.poolId, this.myAccount);\n      const earningInDollars = winePriceInDollars * Number(getDisplayBalance(bankEarnings, bank.depositToken.decimal));\n      totalRewards += earningInDollars;\n      totalInVineyard += earningInDollars;\n    }\n\n    // Nodes\n    for (let i = 0; i < nodeBanks.length; i++) {\n      const bank = nodeBanks[i];\n      // Node value\n      const nodesCount = Number((await this.getNodes(bank.contract, this.myAccount))[0]);\n      const nodePrice = await this.getNodePrice(bank.contract, bank.poolId);\n      const stakedTokenPriceInDollars = Number(\n        await this.getDepositTokenPriceInDollars(bank.depositTokenName, bank.depositToken),\n      );\n      totalInNodes +=\n        nodesCount * (stakedTokenPriceInDollars * Number(getDisplayBalance(nodePrice, bank.depositToken.decimal)));\n\n      // Node earnings\n      const nodeEarnings = await this.earnedFromBank(bank.contract, bank.earnTokenName, bank.poolId, this.myAccount);\n      const earningInDollars =\n        stakedTokenPriceInDollars * Number(getDisplayBalance(nodeEarnings, bank.depositToken.decimal));\n      totalRewards += earningInDollars;\n      totalInNodes += earningInDollars;\n    }\n\n    // Winery deposit\n    const wineryStakedBalance = await this.getStakedSharesOnBoardroom();\n    const wineryStakedInToken = Number(getDisplayBalance(wineryStakedBalance));\n    // Winery earnings\n    const earnings = await this.getEarningsOnBoardroom();\n    const wineryEarnings = Number(getDisplayBalance(earnings));\n    totalRewards += grapePriceInDollars * wineryEarnings;\n\n    totalInWinery = winePriceInDollars * wineryStakedInToken + grapePriceInDollars * wineryEarnings;\n\n    return {\n      total: totalInVineyard + totalInNodes + totalInWinery,\n      totalRewards: totalRewards,\n      totalInVineyard: totalInVineyard,\n      totalInWinery: totalInWinery,\n      totalInNodes: totalInNodes,\n    };\n  }\n\n  async getBoardroomPrintRate(): Promise<number> {\n    const { Boardroom } = this.contracts;\n    const snapshotIndex = await Boardroom.latestSnapshotIndex();\n    const currentEpoch = await Boardroom.epoch();\n    return (snapshotIndex * 100) / currentEpoch;\n  }\n\n  async getBoardroomLatestSnapshotIndex(): Promise<number> {\n    const { Boardroom } = this.contracts;\n    return await Boardroom.latestSnapshotIndex();\n  }\n\n  async getWalletNodesAndNFTs(): Promise<WalletNodesAndNFTs> {\n    const grapeNodesCount = await this.getNodes('GrapeNode', this.myAccount);\n    const wineNodesCount = await this.getNodes('WineNode', this.myAccount);\n    const grapeMimSWNodesCount = await this.getNodes('LPNode', this.myAccount);\n\n    let walletNodesAndNFTs = {\n      grapes: grapeNodesCount[0].toNumber(),\n      wines: wineNodesCount[0].toNumber(),\n      grapeMimSWs: grapeMimSWNodesCount[0].toNumber(),\n      goonBags: 0,\n      glasses: 0,\n      decanters: 0,\n      goblets: 0,\n    };\n\n    // const walletNFTs = await this.getWalletNFTs();\n    // if (walletNFTs.length !== 0) {\n    //   const data = require('../nfts.json');\n    //   walletNFTs.forEach((walletNftId) => {\n    //     for (let i = 0; i < data.length; i++) {\n    //       if (data[i].Id == walletNftId) {\n    //         if (data[i].Type === 'GoonBag') {\n    //           walletNodesAndNFTs.goonBags++;\n    //         } else if (data[i].Type === 'Glass') {\n    //           walletNodesAndNFTs.glasses++;\n    //         } else if (data[i].Type === 'Decanter') {\n    //           walletNodesAndNFTs.decanters++;\n    //         } else if (data[i].Type === 'Goblet') {\n    //           walletNodesAndNFTs.goblets++;\n    //         }\n    //       }\n    //     }\n    //   });\n    // }\n    return walletNodesAndNFTs;\n  }\n\n  async getGrapeStatInEstimatedTWAP(): Promise<TokenStat> {\n    const { Oracle, GrapeRewardPool } = this.contracts;\n    let expectedPrice = await Oracle.twap(this.GRAPE.address, ethers.utils.parseEther('1'));\n\n    const supply = await this.GRAPE.totalSupply();\n    const grapeRewardPoolSupply = await this.GRAPE.balanceOf(GrapeRewardPool.address);\n    const grapeCirculatingSupply = supply.sub(grapeRewardPoolSupply);\n    return {\n      tokenInFtm: getDisplayBalance(expectedPrice),\n      priceInDollars: getDisplayBalance(expectedPrice),\n      totalSupply: getDisplayBalance(supply, this.GRAPE.decimal, 0),\n      circulatingSupply: getDisplayBalance(grapeCirculatingSupply, this.GRAPE.decimal, 0),\n    };\n  }\n\n  async getVintageStats(): Promise<TokenStat> {\n    const { cellar } = this.contracts;\n    let balance = await this.BUSD.balanceOf(this.VINTAGELP.address);\n    let balance2 = await this.VINTAGE.balanceOf(this.VINTAGELP.address);\n    let price = Number(balance) / Number(balance2);\n\n    let vintageBal = await cellar.vintageWineBalance();\n    let svintageBal = await cellar.totalSupply();\n\n    let ratio = Number(vintageBal) / Number(svintageBal);\n\n    let sPrice = price * ratio;\n    return {\n      tokenInFtm: ratio.toFixed(4),\n      priceInDollars: sPrice.toFixed(4),\n      totalSupply: '1',\n      circulatingSupply: '1',\n    };\n  }\n\n  async getGrapePriceInLastTWAP(): Promise<BigNumber> {\n    const { Treasury } = this.contracts;\n    return Treasury.getAkusdUpdatedPrice();\n  }\n\n  // async getGrapePegTWAP(): Promise<any> {\n  //   const { Treasury } = this.contracts;\n  //   const updatedPrice = Treasury.getGrapeUpdatedPrice();\n  //   const updatedPrice2 = updatedPrice * 10000;\n  //   return updatedPrice2;\n  // }\n\n  async getBondsPurchasable(): Promise<BigNumber> {\n    const { Treasury } = this.contracts;\n    // const burnableGrape = (Number(Treasury.getBurnableAkusdLeft()) * 1000).toFixed(2).toString();\n    return Treasury.getBurnableAkusdLeft();\n  }\n\n  async getNodes(contract: string, user: string): Promise<BigNumber[]> {\n    return await this.contracts[contract].getNodes(user);\n  }\n\n  async getMaxPayout(contract: string, user: string): Promise<BigNumber[]> {\n    return await this.contracts[contract].maxPayout(user);\n  }\n\n  async getDailyDrip(contract: string, user: string): Promise<BigNumber[]> {\n    return await this.contracts[contract].getDayDripEstimate(user);\n  }\n\n  async getUserDetails(contract: string, user: string): Promise<BigNumber[]> {\n    return await this.contracts[contract].users(user);\n  }\n\n  async getTotalNodes(contract: string): Promise<BigNumber[]> {\n    return await this.contracts[contract].getTotalNodes();\n  }\n\n  async getGrapeNodes(): Promise<BigNumber[]> {\n    const { GrapeNode } = this.contracts;\n    return await GrapeNode.getTotalNodes();\n  }\n\n  async getWineNodes(): Promise<BigNumber[]> {\n    const { WineNode } = this.contracts;\n    return await WineNode.getTotalNodes();\n  }\n\n  async getGrapeMimSWNodes(): Promise<BigNumber[]> {\n    const { LPNode } = this.contracts;\n    return await LPNode.getTotalNodes();\n  }\n\n  async getWalletNFTs(): Promise<BigNumber[]> {\n    const { TheWineryNFT } = this.nftContracts;\n    return await TheWineryNFT.walletOfOwner(this.myAccount);\n  }\n\n  /**\n   * Calculates the TVL, APR and daily APR of a provided pool/bank\n   * @param bank\n   * @returns\n   */\n  async getPoolAPRs(bank: Bank): Promise<PoolStats> {\n    if (this.myAccount === undefined) return;\n    const depositToken = bank.depositToken;\n\n    const poolContract = this.contracts[bank.contract];\n\n    if (bank.sectionInUI === 3) {\n      const [depositTokenPrice, points, totalPoints, tierAmount, poolBalance, totalBalance, dripRate, dailyUserDrip] =\n        await Promise.all([\n          this.getDepositTokenPriceInDollars(bank.depositTokenName, depositToken),\n          poolContract.tierAllocPoints(bank.poolId),\n          poolContract.totalAllocPoints(),\n          poolContract.tierAmounts(bank.poolId),\n          poolContract.getBalancePool(),\n          depositToken.balanceOf(bank.address),\n          poolContract.dripRate(),\n          poolContract.getDayDripEstimate(this.myAccount),\n        ]);\n      const stakeAmount = Number(getDisplayBalance(tierAmount));\n\n      const dailyDrip =\n        totalPoints && +totalPoints > 0\n          ? getDisplayBalance(poolBalance.mul(BigNumber.from(86400)).mul(points).div(totalPoints).div(dripRate))\n          : 0;\n      const dailyDripAPR = (Number(dailyDrip) / stakeAmount) * 100;\n      const yearlyDripAPR = ((Number(dailyDrip) * 365) / stakeAmount) * 100;\n\n      const dailyDripUser = Number(getDisplayBalance(dailyUserDrip));\n      const yearlyDripUser = Number(dailyDripUser) * 365;\n\n      const TVL = Number(depositTokenPrice) * Number(getDisplayBalance(totalBalance, depositToken.decimal));\n\n      return {\n        userDailyBurst: dailyDripUser.toFixed(2).toString(),\n        userYearlyBurst: yearlyDripUser.toFixed(2).toString(),\n        dailyAPR: dailyDripAPR.toFixed(2).toString(),\n        yearlyAPR: yearlyDripAPR.toFixed(2).toString(),\n        TVL: TVL.toFixed(2).toString(),\n      };\n    } else {\n      const depositTokenPrice = await this.getDepositTokenPriceInDollars(bank.depositTokenName, depositToken);\n\n      const stakeInPool = await depositToken.balanceOf(bank.address);\n\n      const TVL = Number(depositTokenPrice) * Number(getDisplayBalance(stakeInPool, depositToken.decimal));\n\n      let stat = bank.earnTokenName === 'AKUSD' ? await this.getGrapeStat() : await this.getShareStat();\n\n      const tokenPerSecond = await this.getTokenPerSecond(\n        bank.earnTokenName,\n        bank.contract,\n        poolContract,\n        bank.depositTokenName,\n      );\n\n      let tokenPerHour = tokenPerSecond.mul(60).mul(60);\n\n      const totalRewardPricePerYear =\n        Number(stat.priceInDollars) * Number(getDisplayBalance(tokenPerHour.mul(24).mul(365)));\n\n      const totalRewardPricePerDay = Number(stat.priceInDollars) * Number(getDisplayBalance(tokenPerHour.mul(24)));\n\n      const totalStakingTokenInPool =\n        Number(depositTokenPrice) * Number(getDisplayBalance(stakeInPool, depositToken.decimal));\n\n      const dailyAPR = (totalRewardPricePerDay / totalStakingTokenInPool) * 100;\n\n      const yearlyAPR = (totalRewardPricePerYear / totalStakingTokenInPool) * 100;\n      return {\n        dailyAPR: dailyAPR.toFixed(2).toString(),\n        yearlyAPR: yearlyAPR.toFixed(2).toString(),\n        TVL: TVL.toFixed(2).toString(),\n      };\n    }\n  }\n\n  async getPartnerAPRs(bank: Bank): Promise<PoolStats> {\n    if (this.myAccount === undefined) return;\n    const depositToken = bank.depositToken;\n\n    const poolContract = this.contracts[bank.contract];\n\n    const depositTokenPrice = await this.getDepositTokenPriceInDollars(bank.depositTokenName, depositToken);\n\n    const stakeInPool = await depositToken.balanceOf(bank.address);\n\n    const TVL = Number(depositTokenPrice) * Number(getDisplayBalance(stakeInPool, depositToken.decimal));\n\n    let stat = bank.earnTokenName === 'AKUSD' ? await this.getGrapeStat() : await this.getShareStat();\n    let hermes = await this.getHermesStat();\n\n    const tokenPerSecond1 = await poolContract.token1PerSecond();\n    const tokenPerSecond2 = await poolContract.token2PerSecond();\n\n    let tokenPerHour = tokenPerSecond1.mul(60).mul(60);\n    let tokenPerHour2 = tokenPerSecond2.mul(60).mul(60);\n\n    const totalRewardPricePerDay = Number(stat.priceInDollars) * Number(getDisplayBalance(tokenPerHour2.mul(24)));\n    const totalRewardPricePerDay2 = Number(hermes.priceInDollars) * Number(getDisplayBalance(tokenPerHour.mul(24)));\n\n    const totalStakingTokenInPool =\n      Number(depositTokenPrice) * Number(getDisplayBalance(stakeInPool, depositToken.decimal));\n\n    const dailyAPR = ((totalRewardPricePerDay + totalRewardPricePerDay2) / totalStakingTokenInPool) * 100;\n\n    const yearlyAPR = dailyAPR * 365;\n    return {\n      dailyAPR: dailyAPR.toFixed(2).toString(),\n      yearlyAPR: yearlyAPR.toFixed(2).toString(),\n      TVL: TVL.toFixed(2).toString(),\n    };\n  }\n\n  /**\n   * Method to return the amount of tokens the pool yields per second\n   * @param earnTokenName the name of the token that the pool is earning\n   * @param contractName the contract of the pool/bank\n   * @param poolContract the actual contract of the pool\n   * @returns\n   */\n  async getTokenPerSecond(\n    earnTokenName: string,\n    contractName: string,\n    poolContract: Contract,\n    depositTokenName: string,\n  ) {\n    if (earnTokenName === 'AKUSD') {\n      console.log(1111111111);\n      if (!contractName.endsWith('1')) {\n        const rewardPerSecond = await poolContract.grapePerSecond();\n\n        if (depositTokenName === 'WBNB') {\n          return rewardPerSecond.mul(720).div(2400).div(24);\n        } else if (depositTokenName === 'BUSD') {\n          return rewardPerSecond.mul(720).div(2400).div(24);\n        }\n        return rewardPerSecond.div(12);\n      }\n\n      if (depositTokenName === 'WBNB') {\n        const rewardPerSecond = await poolContract.epochGrapePerSecond(0);\n        return rewardPerSecond.div(100).mul(2);\n      } else if (depositTokenName === 'BUSD') {\n        const rewardPerSecond = await poolContract.epochGrapePerSecond(0);\n        return rewardPerSecond.div(100).mul(2);\n      }\n\n      const poolStartTime = await poolContract.poolStartTime();\n      await poolContract.epochGrapePerSecond(1);\n\n      const startDateTime = new Date(poolStartTime.toNumber() * 1000);\n      const FOUR_DAYS = 4 * 24 * 60 * 60 * 1000;\n      if (Date.now() - startDateTime.getTime() > FOUR_DAYS) {\n        return await poolContract.epochGrapePerSecond(1);\n      }\n      return await poolContract.epochGrapePerSecond(0);\n    }\n\n    //update for new tokens\n\n    const rewardPerSecond = await poolContract.aksharePerSecond();\n\n    if (depositTokenName.startsWith('AKSHARE-BUSD')) {\n      return rewardPerSecond.mul(4000).div(41000);\n    } else if (depositTokenName.startsWith('AKUSD-AKSHARE')) {\n      return rewardPerSecond.mul(1500).div(41000);\n    } else if (depositTokenName === 'AKUSD') {\n      return rewardPerSecond.mul(6000).div(41000);\n    } else if (depositTokenName === 'WAMP') {\n      return rewardPerSecond.mul(250).div(41000);\n    } else if (depositTokenName === 'AKUSD-BUSD-LP') {\n      return rewardPerSecond.mul(7500).div(41000);\n    } else if (depositTokenName === 'AKSHARE-POPS-LP') {\n      return rewardPerSecond.mul(250).div(41000);\n    } else if (depositTokenName === 'sVintage') {\n      return rewardPerSecond.mul(3500).div(41000);\n    } else {\n      return rewardPerSecond.mul(18000).div(41000);\n    }\n  }\n\n  /**\n   * Method to calculate the tokenPrice of the deposited asset in a pool/bank\n   * If the deposited token is an LP it will find the price of its pieces\n   * @param tokenName\n   * @param pool\n   * @param token\n   * @returns\n   */\n  async getDepositTokenPriceInDollars(tokenName: string, token: ERC20) {\n    let tokenPrice;\n    const priceOfOneFtmInDollars = await this.getWBNBPriceFromPancakeswap();\n\n    if (tokenName === 'WBNB') {\n      tokenPrice = priceOfOneFtmInDollars;\n    } else {\n      if (tokenName === 'AKUSD-BUSD-LP') {\n        tokenPrice = await this.getLPTokenPrice(token, this.GRAPE, true);\n      } else if (tokenName === 'AKSHARE-WBNB-LP') {\n        tokenPrice = await this.getLPTokenPrice(token, this.WINE, false);\n      } else if (tokenName === 'AKSHARE-BUSD-LP') {\n        tokenPrice = await this.getLPTokenPrice(token, this.WINE, false);\n      } else if (tokenName === 'SOFT-BUSD-LP') {\n        tokenPrice = await this.getLPTokenPrice(token, this.SOFT, false);\n      } else if (tokenName === 'SOFT-AKSHARE-LP') {\n        tokenPrice = await this.getLPTokenPrice(token, this.SOFT, false);\n      } else if (tokenName === 'WBNB-BUSD-LP') {\n        tokenPrice = await this.getLPTokenPrice(token, this.BUSD, false);\n      } else if (tokenName === 'BUSD') {\n        tokenPrice = '1';\n      } else {\n        tokenPrice = await this.getTokenPriceFromPancakeswap(token);\n        tokenPrice = (Number(tokenPrice) * 1).toString();\n      }\n    }\n    return tokenPrice;\n  }\n\n  //===================================================================\n  //===================== GET ASSET STATS =============================\n  //=========================== END ===================================\n  //===================================================================\n\n  async getCurrentEpoch(): Promise<BigNumber> {\n    const { Treasury } = this.contracts;\n    return Treasury.epoch();\n  }\n\n  async getExpansionRate(): Promise<Number> {\n    const { Treasury } = this.contracts;\n    return Treasury.maxExpansionTiers(8);\n  }\n\n  async getBondOraclePriceInLastTWAP(): Promise<BigNumber> {\n    const { Treasury } = this.contracts;\n    return Treasury.getBondPremiumRate();\n  }\n\n  /**\n   * Buy bonds with cash.\n   * @param amount amount of cash to purchase bonds with.\n   */\n  async buyBonds(amount: string | number): Promise<TransactionResponse> {\n    const { Treasury } = this.contracts;\n    const treasuryGrapePrice = await Treasury.getAkusdPrice();\n    return await Treasury.buyBonds(decimalToBalance(amount), treasuryGrapePrice);\n  }\n\n  /**\n   * Redeem bonds for cash.\n   * @param amount amount of bonds to redeem.\n   */\n  async redeemBonds(amount: string | number): Promise<TransactionResponse> {\n    const { Treasury } = this.contracts;\n    const priceForGrape = await Treasury.getAkusdPrice();\n\n    return await Treasury.redeemBonds(decimalToBalance(amount), priceForGrape);\n  }\n\n  async getTotalValueLocked(): Promise<Number> {\n    let totalValue = 0;\n    for (const bankInfo of Object.values(bankDefinitions)) {\n      const pool = this.contracts[bankInfo.contract];\n      // Since we have the NFT Contract, pool can be null\n      if (!pool) {\n        continue;\n      }\n      const token = this.externalTokens[bankInfo.depositTokenName];\n      const tokenPrice = await this.getDepositTokenPriceInDollars(bankInfo.depositTokenName, token);\n\n      const tokenAmountInPool = await token.balanceOf(pool.address);\n\n      const value = Number(getDisplayBalance(tokenAmountInPool, token.decimal)) * Number(tokenPrice);\n\n      const poolValue = Number.isNaN(value) ? 0 : value;\n      totalValue += poolValue;\n    }\n\n    const BSHAREPrice = (await this.getShareStat()).priceInDollars;\n    const boardroomtShareBalanceOf = await this.WINE.balanceOf(this.currentBoardroom().address);\n    const boardroomTVL = Number(getDisplayBalance(boardroomtShareBalanceOf, this.WINE.decimal)) * Number(BSHAREPrice);\n\n    return totalValue + boardroomTVL;\n  }\n\n  /**\n   * Calculates the price of an LP token\n   * Reference https://github.com/DefiDebauchery/discordpricebot/blob/4da3cdb57016df108ad2d0bb0c91cd8dd5f9d834/pricebot/pricebot.py#L150\n   * @param lpToken the token under calculation\n   * @param token the token pair used as reference (the other one would be BNB in most cases)\n   * @param isGrape sanity check for usage of grape token or tShare\n   * @returns price of the LP token\n   */\n  async getLPTokenPrice(lpToken: ERC20, token: ERC20, isGrape: boolean): Promise<string> {\n    const totalSupply = getFullDisplayBalance(await lpToken.totalSupply(), lpToken.decimal);\n    //Get amount of tokenA\n\n    const tokenSupply = getFullDisplayBalance(await token.balanceOf(lpToken.address), token.decimal);\n\n    const stat = isGrape === true ? await this.getGrapeStat() : await this.getShareStat();\n\n    const priceOfToken = stat.priceInDollars;\n\n    const tokenInLP = Number(tokenSupply) / Number(totalSupply);\n\n    const tokenPrice = (Number(priceOfToken) * tokenInLP * 2) //We multiply by 2 since half the price of the lp token is the price of each piece of the pair. So twice gives the total\n\n      .toString();\n\n    return tokenPrice;\n  }\n\n  /**\n   * Calculates the price of an LP token\n   * Reference https://github.com/DefiDebauchery/discordpricebot/blob/4da3cdb57016df108ad2d0bb0c91cd8dd5f9d834/pricebot/pricebot.py#L150\n   * @param lpToken the token under calculation\n   * @param token the token pair used as reference (the other one would be BNB in most cases)\n   * @param isGrape sanity check for usage of grape token or tShare\n   * @returns price of the LP token\n   */\n  async getApeLPTokenPrice(lpToken: ERC20, token: ERC20, isGrape: boolean): Promise<string> {\n    const totalSupply = getFullDisplayBalance(await lpToken.totalSupply(), lpToken.decimal);\n    //Get amount of tokenA\n    const tokenSupply = getFullDisplayBalance(await token.balanceOf(lpToken.address), token.decimal);\n    const stat = isGrape === true ? await this.getGrapeStat() : await this.getShareStat();\n    const priceOfToken = stat.priceInDollars;\n    const tokenInLP = Number(tokenSupply) / Number(totalSupply);\n    const tokenPrice = (Number(priceOfToken) * tokenInLP * 2) //We multiply by 2 since half the price of the lp token is the price of each piece of the pair. So twice gives the total\n      .toString();\n    return tokenPrice;\n  }\n\n  async earnedFromBank(\n    poolName: ContractName,\n    earnTokenName: String,\n    poolId: Number,\n    account = this.myAccount,\n  ): Promise<BigNumber> {\n    const pool = this.contracts[poolName];\n    try {\n      if (earnTokenName === 'AKUSD' && poolName.includes('Node')) {\n        return await pool.getTotalRewards(account);\n      }\n      if (earnTokenName === 'AKSHARE' && poolName.includes('Node')) {\n        return await pool.getTotalRewards(account);\n      }\n      if (earnTokenName === 'AKUSD-BUSD-LP' && poolName.includes('Node')) {\n        return await pool.getTotalRewards(account);\n      }\n      if (earnTokenName === 'AKUSD-BUSD-LP' && poolName.includes('Node')) {\n        return await pool.getTotalRewards(account);\n      }\n      if (earnTokenName === 'GRAPE-WLRS-LP' && poolName.includes('Node')) {\n        return await pool.getTotalRewards(account);\n      }\n      if (earnTokenName === 'AKUSD') {\n        return await pool.pendingGRAPE(poolId, account);\n      } else if (earnTokenName === 'AKSHARE') {\n        return await pool.pendingShare(poolId, account);\n      } else if (earnTokenName === 'HSHARE') {\n        return await pool.pendingToken1(poolId, account);\n      } else {\n        return await pool.pendingToken2(poolId, account);\n      }\n    } catch (err) {\n      // @ts-ignore\n      console.error(`Failed to call pendingShare() on pool ${pool.address}: ${err}`);\n      return BigNumber.from(0);\n    }\n  }\n\n  async stakedBalanceOnBank(poolName: ContractName, poolId: Number, account = this.myAccount): Promise<BigNumber> {\n    const pool = this.contracts[poolName];\n\n    try {\n      let userInfo = await pool.userInfo(poolId, account);\n\n      return await userInfo.amount;\n    } catch (err) {\n      // @ts-ignore\n      console.error(`Failed to call userInfo() on pool ${pool.address}: ${err.stack}`);\n      return BigNumber.from(0);\n    }\n  }\n\n  async claimedBalanceNode(poolName: ContractName, account = this.myAccount): Promise<BigNumber> {\n    const pool = this.contracts[poolName];\n    try {\n      let userInfo = await pool.users(account);\n      return await userInfo.total_claims;\n    } catch (err) {\n      console.error(`Failed to call userInfo() on pool ${pool.address}: ${err}`);\n      return BigNumber.from(0);\n    }\n  }\n\n  async getNodePrice(poolName: ContractName, poolId: Number): Promise<BigNumber> {\n    const pool = this.contracts[poolName];\n    try {\n      return await pool.tierAmounts(poolId);\n    } catch (err) {\n      console.error(`Failed to call tierAmounts on contract ${pool.address}: ${err}`);\n      return BigNumber.from(0);\n    }\n  }\n\n  /**\n   * Deposits token to given pool.\n   * @param poolName A name of pool contract.\n   * @param amount Number of tokens with decimals applied. (e.g. 1.45 DAI * 10^18)\n   * @returns {string} Transaction hash\n   */\n  async stake(\n    poolName: ContractName,\n    poolId: Number,\n    sectionInUI: Number,\n    amount: BigNumber,\n  ): Promise<TransactionResponse> {\n    const pool = this.contracts[poolName];\n\n    return sectionInUI !== 3 ? await pool.deposit(poolId, amount) : await pool.create(poolId, amount);\n  }\n\n  async setTierValues(poolName: ContractName): Promise<TransactionResponse> {\n    const pool = this.contracts[poolName];\n\n    return await pool.setTierValues([BigNumber.from('1000000000000000000')], [BigNumber.from('5000000000000000000')]);\n  }\n\n  async getTierValues(poolName: ContractName): Promise<void> {\n    const pool = this.contracts[poolName];\n\n    console.log(await pool.tierAmounts(0), await pool.tierAllocPoints(0));\n  }\n\n  /**\n   * Withdraws token from given pool.\n   * @param poolName A name of pool contract.\n   * @param amount Number of tokens with decimals applied. (e.g. 1.45 DAI * 10^18)\n   * @returns {string} Transaction hash\n   */\n  async unstake(poolName: ContractName, poolId: Number, amount: BigNumber): Promise<TransactionResponse> {\n    const pool = this.contracts[poolName];\n    return await pool.withdraw(poolId, amount);\n  }\n\n  /**\n   * Transfers earned token reward from given pool to my account.\n   */\n  async harvest(poolName: ContractName, poolId: Number, sectionInUI: Number): Promise<TransactionResponse> {\n    const pool = this.contracts[poolName];\n    //By passing 0 as the amount, we are asking the contract to only redeem the reward and not the currently staked token\n    return sectionInUI !== 3 ? await pool.withdraw(poolId, 0) : await pool.claim();\n  }\n\n  async compound(poolName: ContractName, poolId: Number, sectionInUI: Number): Promise<TransactionResponse> {\n    const pool = this.contracts[poolName];\n    //By passing 0 as the amount, we are asking the contract to only redeem the reward and not the currently staked token\n    return sectionInUI !== 3 ? await pool.withdraw(poolId, 0) : await pool.compound();\n  }\n\n  /**\n   * Harvests and withdraws deposited tokens from the pool.\n   */\n  async exit(poolName: ContractName, poolId: Number, account = this.myAccount): Promise<TransactionResponse> {\n    const pool = this.contracts[poolName];\n    let userInfo = await pool.userInfo(poolId, account);\n    return await pool.withdraw(poolId, userInfo.amount);\n  }\n\n  async fetchBoardroomVersionOfUser(): Promise<string> {\n    return 'latest';\n  }\n\n  currentBoardroom(): Contract {\n    if (!this.boardroomVersionOfUser) {\n      //throw new Error('you must unlock the wallet to continue.');\n    }\n\n    return this.contracts.Boardroom;\n  }\n\n  isOldBoardroomMember(): boolean {\n    return this.boardroomVersionOfUser !== 'latest';\n  }\n\n  async getDaiPrice(tokenContract: ERC20): Promise<string> {\n    const ready = await this.provider.ready;\n    if (!ready) return;\n    //const { chainId } = this.config;\n    const { DAI } = this.config.externalTokens;\n\n    const wmim = new Token(56, DAI[0], DAI[1], 'DAI');\n\n    const token = new Token(56, tokenContract.address, tokenContract.decimal, tokenContract.symbol);\n\n    try {\n      const wmimToToken = await Fetcher.fetchPairData(wmim, token, this.provider);\n\n      const priceInBUSD = new Route([wmimToToken], token);\n\n      return priceInBUSD.midPrice.toFixed(2);\n    } catch (err) {\n      console.error(`Failed to fetch token price of ${tokenContract.symbol}: ${err}`);\n    }\n  }\n\n  async getTokenPriceFromPancakeswap(tokenContract: ERC20): Promise<string> {\n    const ready = await this.provider.ready;\n    if (!ready) return;\n    //const { chainId } = this.config;\n    const { BUSD } = this.config.externalTokens;\n\n    const wmim = new Token(56, BUSD[0], BUSD[1], 'BUSD');\n\n    const token = new Token(56, tokenContract.address, tokenContract.decimal, tokenContract.symbol);\n    try {\n      const wmimToToken = await Fetcher.fetchPairData(wmim, token, this.provider);\n      const priceInBUSD = new Route([wmimToToken], token);\n\n      return priceInBUSD.midPrice.toFixed(4);\n    } catch (err) {\n      console.error(`Failed to fetch token price of ${tokenContract.symbol}: ${err}`);\n    }\n  }\n\n  async getTokenPriceFromPangolin(tokenContract: ERC20): Promise<string> {\n    const ready = await this.provider.ready;\n    if (!ready) return;\n    //const { chainId } = this.config;\n    const { WBNB } = this.config.externalTokens;\n    const { USDC } = this.config.externalTokens;\n    const wbnb = new TokenPangolin(56, WBNB[0], WBNB[1], 'WBNB');\n    const usdc = new TokenPangolin(56, USDC[0], USDC[1], 'USDC');\n    const token = new TokenPangolin(56, tokenContract.address, tokenContract.decimal, tokenContract.symbol);\n\n    try {\n      const wftmToToken = await FetcherPangolin.fetchPairData(wbnb, token, this.provider);\n      const priceInBUSD = new PangolinRoute([wftmToToken], token);\n\n      const wavaxtousd = await FetcherPangolin.fetchPairData(wbnb, usdc, this.provider);\n      const priceInBUSD2 = new PangolinRoute([wavaxtousd], wbnb);\n\n      const priceForPeg = Number(priceInBUSD.midPrice.toFixed(12));\n      const priceForPeg2 = Number(priceInBUSD2.midPrice.toFixed(12));\n\n      const hsharePrice = priceForPeg * priceForPeg2;\n\n      return hsharePrice.toFixed(4);\n    } catch (err) {\n      console.error(`Failed to fetch token price of ${tokenContract.symbol}: ${err}`);\n    }\n  }\n\n  async getTokenPriceFromPancakeswapBTC(tokenContract: ERC20): Promise<string> {\n    const ready = await this.provider.ready;\n    if (!ready) return;\n    //const { chainId } = this.config;\n    const { BUSD } = this.config.externalTokens;\n\n    const wbnb = new Token(56, BUSD[0], BUSD[1], 'BUSD');\n    const token = new Token(56, tokenContract.address, tokenContract.decimal, tokenContract.symbol);\n\n    try {\n      const wmimToToken = await Fetcher.fetchPairData(wbnb, token, this.provider);\n      const priceInBUSD = new Route([wmimToToken], token);\n\n      const priceForPeg = Number(priceInBUSD.midPrice.toFixed(12));\n      return priceForPeg.toFixed(4);\n    } catch (err) {\n      console.error(`Failed to fetch token price of ${tokenContract.symbol}: ${err}`);\n    }\n  }\n\n  async getTokenPriceFromPancakeswapGRAPEUSD(): Promise<string> {\n    const ready = await this.provider.ready;\n    if (!ready) return;\n    //const { chainId } = this.config;\n    const { BUSD } = this.config.externalTokens;\n\n    const mim = new Token(56, BUSD[0], BUSD[1]);\n    const token = new Token(56, this.GRAPE.address, this.GRAPE.decimal, 'AKUSD');\n    try {\n      const wmimToToken = await Fetcher.fetchPairData(mim, token, this.provider);\n      const priceInBUSD = new Route([wmimToToken], token);\n\n      const priceForPeg = Number(priceInBUSD.midPrice.toFixed(12));\n\n      return priceForPeg.toFixed(4);\n    } catch (err) {\n      console.error(`Failed to fetch token price of GRAPE: ${err}`);\n    }\n  }\n\n  async getWBNBPriceFromPancakeswap(): Promise<string> {\n    const ready = await this.provider.ready;\n    if (!ready) return;\n    const { WBNB, BUSD } = this.externalTokens;\n    try {\n      const fusdt_wmim_lp_pair = this.externalTokens['WBNB-BUSD-LP'];\n      let mim_amount_BN = await WBNB.balanceOf(fusdt_wmim_lp_pair.address);\n      let mim_amount = Number(getFullDisplayBalance(mim_amount_BN, WBNB.decimal));\n      let fusdt_amount_BN = await BUSD.balanceOf(fusdt_wmim_lp_pair.address);\n      let fusdt_amount = Number(getFullDisplayBalance(fusdt_amount_BN, BUSD.decimal));\n\n      return (fusdt_amount / mim_amount).toString();\n    } catch (err) {\n      console.error(`Failed to fetch token price of AVAX: ${err}`);\n    }\n  }\n\n  async getBTCBPriceFromPancakeswap(): Promise<string> {\n    const ready = await this.provider.ready;\n    if (!ready) return;\n    const { BUSD } = this.externalTokens;\n    try {\n      const btcPriceInBNB = await this.getTokenPriceFromPancakeswap(BUSD);\n\n      const wbnbPrice = await this.getWBNBPriceFromPancakeswap();\n\n      const btcprice = (Number(btcPriceInBNB) * Number(wbnbPrice)).toFixed(2).toString();\n\n      return btcprice;\n    } catch (err) {\n      console.error(`Failed to fetch token price of BTCB: ${err}`);\n    }\n  }\n\n  //===================================================================\n  //===================================================================\n  //===================== MASONRY METHODS =============================\n  //===================================================================\n  //===================================================================\n\n  async getBoardroomLastPrint() {\n    const Boardroom = this.currentBoardroom();\n    const { Treasury } = this.contracts;\n    const currentEpoch = await Treasury.epoch();\n    try {\n      const lastHistory = await Boardroom.boardroomHistory(currentEpoch);\n      return lastHistory[1];\n    } catch (e) {\n      console.error(e);\n    }\n    return 0;\n  }\n\n  async getBoardroomAPR() {\n    const Boardroom = this.currentBoardroom();\n\n    const latestSnapshotIndex = await Boardroom.latestSnapshotIndex();\n\n    const lastHistory = await Boardroom.boardroomHistory(latestSnapshotIndex);\n\n    const lastRewardsReceived = lastHistory[1];\n\n    const BSHAREPrice = (await this.getShareStat()).priceInDollars;\n\n    const GRAPEPrice = (await this.getGrapeStat()).priceInDollars;\n\n    const epochRewardsPerShare = lastRewardsReceived / 1e18;\n\n    //Mgod formula\n    const amountOfRewardsPerDay = epochRewardsPerShare * Number(GRAPEPrice) * 4;\n\n    const boardroomtShareBalanceOf = await this.WINE.balanceOf(Boardroom.address);\n\n    const boardroomTVL = Number(getDisplayBalance(boardroomtShareBalanceOf, this.WINE.decimal)) * Number(BSHAREPrice);\n\n    const realAPR = ((amountOfRewardsPerDay * 100) / boardroomTVL) * 365;\n\n    return realAPR;\n  }\n\n  /**\n   * Checks if the user is allowed to retrieve their reward from the Boardroom\n   * @returns true if user can withdraw reward, false if they can't\n   */\n  async canUserClaimRewardFromBoardroom(): Promise<boolean> {\n    const Boardroom = this.currentBoardroom();\n    return await Boardroom.canClaimReward(this.myAccount);\n  }\n\n  /**\n   * Checks if the user is allowed to retrieve their reward from the Boardroom\n   * @returns true if user can withdraw reward, false if they can't\n   */\n  async canUserUnstakeFromBoardroom(): Promise<boolean> {\n    const Boardroom = this.currentBoardroom();\n    const canWithdraw = await Boardroom.canWithdraw(this.myAccount);\n    const stakedAmount = await this.getStakedSharesOnBoardroom();\n    const notStaked = Number(getDisplayBalance(stakedAmount, this.WINE.decimal)) === 0;\n    const result = notStaked ? true : canWithdraw;\n    return result;\n  }\n\n  async timeUntilClaimRewardFromBoardroom(): Promise<BigNumber> {\n    return BigNumber.from(0);\n  }\n\n  async getTotalStakedInBoardroom(): Promise<BigNumber> {\n    const Boardroom = this.currentBoardroom();\n    return await Boardroom.totalSupply();\n  }\n\n  async stakeShareToBoardroom(amount: string): Promise<TransactionResponse> {\n    if (this.isOldBoardroomMember()) {\n      throw new Error(\"you're using old boardroom. please withdraw and deposit the GSHARE again.\");\n    }\n    const Boardroom = this.currentBoardroom();\n    return await Boardroom.stake(decimalToBalance(amount));\n  }\n\n  async getStakedSharesOnBoardroom(): Promise<BigNumber> {\n    const Boardroom = this.currentBoardroom();\n    if (this.boardroomVersionOfUser === 'v1') {\n      return await Boardroom.getShareOf(this.myAccount);\n    }\n\n    return await Boardroom.balanceOf(this.myAccount);\n  }\n\n  async getEarningsOnBoardroom(): Promise<BigNumber> {\n    const Boardroom = this.currentBoardroom();\n\n    if (this.boardroomVersionOfUser === 'v1') {\n      return await Boardroom.getCashEarningsOf(this.myAccount);\n    }\n\n    return await Boardroom.earned(this.myAccount);\n  }\n\n  async withdrawShareFromBoardroom(amount: string): Promise<TransactionResponse> {\n    const Boardroom = this.currentBoardroom();\n    return await Boardroom.withdraw(decimalToBalance(amount));\n  }\n\n  async harvestCashFromBoardroom(): Promise<TransactionResponse> {\n    const Boardroom = this.currentBoardroom();\n    if (this.boardroomVersionOfUser === 'v1') {\n      return await Boardroom.claimDividends();\n    }\n    return await Boardroom.claimReward();\n  }\n\n  async exitFromBoardroom(): Promise<TransactionResponse> {\n    const Boardroom = this.currentBoardroom();\n    return await Boardroom.exit();\n  }\n\n  async getTreasuryNextAllocationTime(): Promise<AllocationTime> {\n    const { Treasury } = this.contracts;\n    const nextEpochTimestamp: BigNumber = await Treasury.nextEpochPoint();\n    const nextAllocation = new Date(nextEpochTimestamp.mul(1000).toNumber());\n    const prevAllocation = new Date(Date.now());\n\n    return { from: prevAllocation, to: nextAllocation };\n  }\n  /**\n   * This method calculates and returns in a from to to format\n   * the period the user needs to wait before being allowed to claim\n   * their reward from the boardroom\n   * @returns Promise<AllocationTime>\n   */\n  async getUserClaimRewardTime(): Promise<AllocationTime> {\n    const { Boardroom, Treasury } = this.contracts;\n    const nextEpochTimestamp = await Boardroom.nextEpochPoint(); //in unix timestamp\n    const currentEpoch = await Boardroom.epoch();\n    const mason = await Boardroom.members(this.myAccount);\n    const startTimeEpoch = mason.epochTimerStart;\n    const period = await Treasury.PERIOD();\n    const periodInHours = period / 60 / 60; // 6 hours, period is displayed in seconds which is 21600\n    const rewardLockupEpochs = await Boardroom.rewardLockupEpochs();\n\n    const targetEpochForClaimUnlock = Number(startTimeEpoch) + Number(rewardLockupEpochs);\n\n    const fromDate = new Date(Date.now());\n    if (targetEpochForClaimUnlock - currentEpoch <= 0) {\n      return { from: fromDate, to: fromDate };\n    } else if (targetEpochForClaimUnlock - currentEpoch === 1) {\n      const toDate = new Date(nextEpochTimestamp * 1000);\n      return { from: fromDate, to: toDate };\n    } else {\n      const toDate = new Date(nextEpochTimestamp * 1000);\n      const delta = targetEpochForClaimUnlock - currentEpoch - 1;\n      const endDate = moment(toDate)\n        .add(delta * periodInHours, 'hours')\n        .toDate();\n      return { from: fromDate, to: endDate };\n    }\n  }\n\n  /**\n   * This method calculates and returns in a from to to format\n   * the period the user needs to wait before being allowed to unstake\n   * from the boardroom\n   * @returns Promise<AllocationTime>\n   */\n  async getUserUnstakeTime(): Promise<AllocationTime> {\n    const { Boardroom, Treasury } = this.contracts;\n    const nextEpochTimestamp = await Boardroom.nextEpochPoint();\n    const currentEpoch = await Boardroom.epoch();\n    const mason = await Boardroom.members(this.myAccount);\n    const startTimeEpoch = mason.epochTimerStart;\n    const period = await Treasury.PERIOD();\n    const PeriodInHours = period / 60 / 60;\n    const withdrawLockupEpochs = await Boardroom.withdrawLockupEpochs();\n    const fromDate = new Date(Date.now());\n    const targetEpochForClaimUnlock = Number(startTimeEpoch) + Number(withdrawLockupEpochs);\n    const stakedAmount = await this.getStakedSharesOnBoardroom();\n    if (currentEpoch <= targetEpochForClaimUnlock && Number(stakedAmount) === 0) {\n      return { from: fromDate, to: fromDate };\n    } else if (targetEpochForClaimUnlock - currentEpoch === 1) {\n      const toDate = new Date(nextEpochTimestamp * 1000);\n      return { from: fromDate, to: toDate };\n    } else {\n      const toDate = new Date(nextEpochTimestamp * 1000);\n      const delta = targetEpochForClaimUnlock - Number(currentEpoch) - 1;\n      const endDate = moment(toDate)\n        .add(delta * PeriodInHours, 'hours')\n        .toDate();\n\n      return { from: fromDate, to: endDate };\n    }\n  }\n\n  async watchAssetInMetamask(assetName: string): Promise<boolean> {\n    const { ethereum } = window as any;\n\n    if (ethereum && ethereum.chainId === '0x40') {\n      let asset;\n      let assetUrl;\n      if (assetName === 'AKUSD') {\n        asset = this.GRAPE;\n        assetUrl =\n          'https://raw.githubusercontent.com/grapefi/front-end/77fa78f2b05b9fecfc0ebd43aef4560c0c00890b/src/assets/img/grape.png';\n      } else if (assetName === 'AKSHARE') {\n        asset = this.WINE;\n        assetUrl =\n          'https://raw.githubusercontent.com/grapefi/front-end/77fa78f2b05b9fecfc0ebd43aef4560c0c00890b/src/assets/img/gshare.png';\n      } else if (assetName === 'AKBOND') {\n        asset = this.GBOND;\n        assetUrl =\n          'https://raw.githubusercontent.com/grapefi/front-end/77fa78f2b05b9fecfc0ebd43aef4560c0c00890b/src/assets/img/gbond.png';\n      } else if (assetName === 'SW') {\n        asset = this.SW;\n        asset.symbol = 'GRAPE-SW-LP';\n        assetUrl = 'https://raw.githubusercontent.com/grapefi/front-end/main/public/AKUSD-BUSD.png';\n      }\n      await ethereum.request({\n        method: 'wallet_watchAsset',\n        params: {\n          type: 'ERC20',\n          options: {\n            address: asset.address,\n            symbol: asset.symbol,\n            decimals: 18,\n            image: assetUrl,\n          },\n        },\n      });\n    }\n    return true;\n  }\n\n  async provideGrapeFtmLP(mimAmount: string, grapeAmount: BigNumber): Promise<TransactionResponse> {\n    const { TaxOffice } = this.contracts;\n    let overrides = {\n      value: parseUnits(mimAmount, 18),\n    };\n    return await TaxOffice.addLiquidityETHTaxFree(\n      grapeAmount,\n      grapeAmount.mul(992).div(1000),\n      parseUnits(mimAmount, 18).mul(992).div(1000),\n      overrides,\n    );\n  }\n\n  /**\n   * @returns an array of the regulation events till the most up to date epoch\n   */\n  async listenForRegulationsEvents(): Promise<any> {\n    const { Treasury } = this.contracts;\n\n    const treasuryDaoFundedFilter = Treasury.filters.DaoFundFunded();\n    const treasuryDevFundedFilter = Treasury.filters.DevFundFunded();\n    const treasuryBoardroomFundedFilter = Treasury.filters.BoardroomFunded();\n    const boughtBondsFilter = Treasury.filters.BoughtBonds();\n    const redeemBondsFilter = Treasury.filters.RedeemedBonds();\n\n    let epochBlocksRanges: any[] = [];\n    let boardroomFundEvents = await Treasury.queryFilter(treasuryBoardroomFundedFilter);\n    var events: any[] = [];\n    boardroomFundEvents.forEach(function callback(value, index) {\n      events.push({ epoch: index + 1 });\n      events[index].boardroomFund = getDisplayBalance(value.args[1]);\n      if (index === 0) {\n        epochBlocksRanges.push({\n          index: index,\n          startBlock: value.blockNumber,\n          boughBonds: 0,\n          redeemedBonds: 0,\n        });\n      }\n      if (index > 0) {\n        epochBlocksRanges.push({\n          index: index,\n          startBlock: value.blockNumber,\n          boughBonds: 0,\n          redeemedBonds: 0,\n        });\n        epochBlocksRanges[index - 1].endBlock = value.blockNumber;\n      }\n    });\n\n    epochBlocksRanges.forEach(async (value, index) => {\n      events[index].bondsBought = await this.getBondsWithFilterForPeriod(\n        boughtBondsFilter,\n        value.startBlock,\n        value.endBlock,\n      );\n      events[index].bondsRedeemed = await this.getBondsWithFilterForPeriod(\n        redeemBondsFilter,\n        value.startBlock,\n        value.endBlock,\n      );\n    });\n    let DEVFundEvents = await Treasury.queryFilter(treasuryDevFundedFilter);\n    DEVFundEvents.forEach(function callback(value, index) {\n      events[index].devFund = getDisplayBalance(value.args[1]);\n    });\n    let DAOFundEvents = await Treasury.queryFilter(treasuryDaoFundedFilter);\n    DAOFundEvents.forEach(function callback(value, index) {\n      events[index].daoFund = getDisplayBalance(value.args[1]);\n    });\n    return events;\n  }\n\n  /**\n   * Helper method\n   * @param filter applied on the query to the treasury events\n   * @param from block number\n   * @param to block number\n   * @returns the amount of bonds events emitted based on the filter provided during a specific period\n   */\n  async getBondsWithFilterForPeriod(filter: EventFilter, from: number, to: number): Promise<number> {\n    const { Treasury } = this.contracts;\n    const bondsAmount = await Treasury.queryFilter(filter, from, to);\n    return bondsAmount.length;\n  }\n\n  sqrt(value: BigNumberish) {\n    const ONE = ethers.BigNumber.from(1);\n    const TWO = ethers.BigNumber.from(2);\n    let x = ethers.BigNumber.from(value);\n    let z = x.add(ONE).div(TWO);\n    let y = x;\n    while (z.sub(y).isNegative()) {\n      y = z;\n      z = x.div(z).add(z).div(TWO);\n    }\n    return y;\n  }\n\n  /**\n   * Estimate the amount of tokens on each side of the pair.\n   * @param tokenName The name of the token\n   * @param lpName The name of the pair\n   * @param amount The amount of tokenName to be zapped in\n   * @returns the amount of bonds events emitted based on the filter provided during a specific period\n   */\n  async estimateZapIn(\n    tokenName: string,\n    lpName: string,\n    amount: string,\n  ): Promise<{ amounts: string[]; actions: string[] }> {\n    // YOU SHOULD NOT BE ABLE TO ZAP USING TOKENS OUTSIDE OF THE LP\n\n    // WARNING: SPAGHETTI CODE AHEAD\n\n    const lpToken = this.externalLPs[lpName];\n\n    let token: ERC20;\n\n    switch (tokenName) {\n      case GRAPE_TICKER: {\n        token = this.GRAPE;\n        break;\n      }\n      case WINE_TICKER: {\n        token = this.WINE;\n        break;\n      }\n      case MIM_TICKER: {\n        token = this.BUSD;\n        break;\n      }\n    }\n\n    // Check if token is part of the LP\n    if (!lpToken.pairTokenAddresses.includes(token.address.toLowerCase())) {\n      console.log(lpToken.pairTokenAddresses);\n      throw new Error('Estimate Zapin: Input token not present in pair.');\n    }\n\n    console.log([token.address, lpToken.token.address, SPOOKY_ROUTER_ADDR, parseUnits(amount, 18)]);\n\n    /* Didn't work\n    estimate = await zapper.estimateZapInToken(\n      token.address,\n      lpToken.address,\n      SPOOKY_ROUTER_ADDR,\n      parseUnits(amount, 18),\n    );*/\n\n    // Perform the swap calculation on client-side, using TraderJoe router\n    // getAmountOut()\n\n    // investment = tokenA investment\n    // half = half of tokenA investment\n    // numerator = corresponding number of tokenB (extcall)\n    // denominator = price quote after adding half to reserve of tokenA and removing numerator from reserve of tokenB\n    // swapAmount = investment - sqrt((half * half * numerator / denominator))\n\n    let otherToken = lpToken.pairTokenAddresses[0] == token.address ? lpToken.pairTokens[1] : lpToken.pairTokens[0];\n\n    let investment = ethers.utils.parseEther(amount);\n    let half = investment.div(2);\n\n    // get pair data: tokenA reserve & tokenB reserve\n    let pair = await Fetcher.fetchPairData(\n      new Token(ChainId.MAINNET, token.address, 18),\n      new Token(ChainId.MAINNET, otherToken.address, 18),\n      this.provider,\n    );\n    let estimateNum = await this.estimateTrade(token, otherToken, half, pair);\n\n    let numerator = ethers.utils.parseEther(await estimateNum.toSignificant(6));\n    let denominator = ethers.utils.parseEther(\n      (\n        await this.estimateTrade(token, otherToken, half, new Pair(pair.reserve0, pair.reserve1, ChainId.MAINNET))\n      ).toSignificant(6),\n    );\n    // investment - sqrt(half^2 * num)\n    let swapAmountIn = investment.sub(this.sqrt(half.mul(half).mul(numerator).div(denominator)));\n\n    let swapAmountOut = (await this.estimateTrade(token, otherToken, half, pair)).toSignificant(6);\n\n    return {\n      amounts: [ethers.utils.formatEther(swapAmountIn), swapAmountOut],\n      actions: [`Swap ${ethers.utils.formatEther(half)} for ${estimateNum.toSignificant(6)}`],\n    };\n  }\n\n  async estimateTrade(tokenFrom: ERC20, tokenTo: ERC20, amount: BigNumberish, pair?: Pair): Promise<CurrencyAmount> {\n    const inputToken = new Token(ChainId.MAINNET, tokenFrom.address, 18);\n    const outputToken = new Token(ChainId.MAINNET, tokenTo.address, 18);\n\n    // note that you may want/need to handle this async code differently,\n    // for example if top-level await is not an option\n    if (!pair) {\n      pair = await Fetcher.fetchPairData(inputToken, outputToken, this.provider);\n    }\n\n    const route = new Route([pair], inputToken, outputToken);\n\n    const trade = new Trade(\n      route,\n      new TokenAmount(inputToken, amount.toString()),\n      TradeType.EXACT_INPUT,\n      ChainId.MAINNET,\n    );\n\n    return trade.outputAmount;\n  }\n\n  async zapIn(tokenName: string, lpName: string, amount: string): Promise<TransactionResponse> {\n    const { zapper } = this.contracts;\n    const lpToken = this.externalTokens[lpName];\n\n    let token: ERC20;\n\n    switch (tokenName) {\n      case GRAPE_TICKER: {\n        token = this.GRAPE;\n        break;\n      }\n      case WINE_TICKER: {\n        token = this.WINE;\n        break;\n      }\n      case MIM_TICKER: {\n        token = this.BUSD;\n        break;\n      }\n    }\n\n    return await zapper.zapInToken(\n      token.address,\n      parseUnits(amount, 18),\n      lpToken.address,\n      SPOOKY_ROUTER_ADDR,\n      this.myAccount,\n    );\n  }\n  async zapIn_sw(tokenName: string, lpName: string, amount: string): Promise<TransactionResponse> {\n    const { sw_zapper } = this.contracts;\n\n    let token: ERC20;\n\n    switch (tokenName) {\n      case GRAPE_TICKER: {\n        token = this.GRAPE;\n        break;\n      }\n      case MIM_TICKER: {\n        token = this.BUSD;\n        break;\n      }\n    }\n\n    return await sw_zapper.zapInToken(token.address, parseUnits(amount, 18));\n  }\n  async swapBBondToWine(gbondAmount: BigNumber): Promise<TransactionResponse> {\n    const { WineSwapper } = this.contracts;\n    return await WineSwapper.swapBBondToWine(gbondAmount);\n  }\n  async estimateAmountOfWine(gbondAmount: string): Promise<string> {\n    const { WineSwapper } = this.contracts;\n    try {\n      const estimateBN = await WineSwapper.estimateAmountOfWine(parseUnits(gbondAmount, 18));\n      return getDisplayBalance(estimateBN, 18, 6);\n    } catch (err) {\n      console.error(`Failed to fetch estimate wine amount: ${err}`);\n    }\n  }\n\n  async getWineSwapperStat(address: string): Promise<WineSwapperStat> {\n    const { WineSwapper } = this.contracts;\n    const wineBalanceBN = await WineSwapper.getWineBalance();\n    const gbondBalanceBN = await WineSwapper.getBBondBalance(address);\n    // const grapePriceBN = await WineSwapper.getAkusdPrice();\n    // const winePriceBN = await WineSwapper.getWinePrice();\n    const rateWinePerGrapeBN = await WineSwapper.getWineAmountPerGrape();\n    const wineBalance = getDisplayBalance(wineBalanceBN, 18, 5);\n    const gbondBalance = getDisplayBalance(gbondBalanceBN, 18, 5);\n    return {\n      wineBalance: wineBalance.toString(),\n      gbondBalance: gbondBalance.toString(),\n      // grapePrice: grapePriceBN.toString(),\n      // winePrice: winePriceBN.toString(),\n      rateWinePerGrape: rateWinePerGrapeBN.toString(),\n    };\n  }\n\n  async getPegPool(): Promise<PegPool> {\n    const contract = this.contracts.PegPool;\n    const mim = new ERC20('0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56', this.signer, 'BUSD');\n    const [depositsEnabled, totalDepositTokenAmount, userInfo, approval] = await Promise.all([\n      contract.depositsEnabled(),\n      contract.totalDepositTokenAmount(),\n      this.getPegPoolUserInfo(),\n      mim.allowance(this.myAccount, contract.address),\n    ]);\n\n    return {\n      depositsEnabled,\n      totalDesposits: Number(formatEther(totalDepositTokenAmount)).toFixed(2),\n      depositTokenName: 'BUSD',\n      depositToken: mim,\n      userInfo,\n      approved: approval.gt(0),\n    };\n  }\n\n  async getPegPoolUserInfo(): Promise<PegPoolUserInfo> {\n    const amount: BigNumber = await this.contracts.PegPool.userInfo(this.myAccount);\n    return {\n      amountDeposited: getDisplayBalance(amount),\n      isDeposited: amount.gt(0),\n      amountDepositedBN: amount,\n    };\n  }\n\n  async getPegPoolPendingRewards(): Promise<PegPoolToken[]> {\n    const tokenMap: {\n      [key: string]: {\n        name: string;\n        pair: string;\n        injection: number;\n      };\n    } = {\n      '0xEfB73202a463Ab78B674F64290fdaD6c75009Bf7': {\n        name: 'AKSHARE',\n        pair: '0x2630b228e5a5f0153edb318914bf8e7e96e75c77',\n        injection: 0,\n      },\n      '0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56': {\n        name: 'BUSD',\n        pair: '0x2354ef4DF11afacb85a5C7f98B624072ECcddbB1',\n        injection: 0,\n      },\n    };\n\n    const [tks, tokens] = await Promise.all([\n      this.contracts.PegPool.getRewardTokens(),\n      this.contracts.PegPool.pendingRewards(this.myAccount),\n    ]);\n    const addresses = tokens[0];\n    const amounts = tokens[1];\n    const rewards: PegPoolToken[] = [];\n\n    for (let i = 0; i < addresses.length; i++) {\n      const info = tokenMap[addresses[i]];\n      console.log(info);\n      rewards.push({\n        token: new ERC20(addresses[i], this.provider.getSigner(), info.name),\n        name: info.name,\n        pairAddress: info.pair,\n        amount: Number(formatEther(amounts[i])).toFixed(8),\n        pendingValueBN: amounts[i],\n        rewardPerBlock: Number(formatEther(tks[i].rewardPerBlock)),\n        canCompound: info.name != 'AALTO',\n      });\n    }\n\n    return rewards;\n  }\n\n  async depositPegPool(amount: BigNumber) {\n    return this.contracts.PegPool.deposit(amount);\n  }\n\n  async compoundRewardsPegPool() {\n    return this.contracts.PegPool.compound();\n  }\n\n  async compoundTokenPegPool() {\n    return this.contracts.PegPool.compound();\n  }\n\n  async withdrawPegPool(amount: BigNumber) {\n    return this.contracts.PegPool.withdraw(amount);\n  }\n\n  async claimPegPool() {\n    return this.contracts.PegPool.claim();\n  }\n}\n","E:\\projects\\adey\\front-end-main\\src\\components\\LaunchCountdown\\LaunchCountdown.tsx",[],"E:\\projects\\adey\\front-end-main\\src\\components\\UnlockWallet\\UnlockWallet.tsx",[],"E:\\projects\\adey\\front-end-main\\src\\components\\TokenSymbol\\TokenSymbol.tsx",["1356","1357"],"import React from 'react';\n\n//Graveyard ecosystem logos\nimport grapeLogo from '../../assets/img/grape.png';\nimport wine from '../../assets/img/gshare.png';\nimport gbondLogo from '../../assets/img/gbond.png';\nimport mimLogo from '../../assets/img/mim.png';\nimport wavax from '../../assets/img/wavax.png';\nimport bnb from '../../assets/img/bnb.png';\nimport busd from '../../assets/img/busd.png';\nimport grapeWine from '../../assets/img/grape-wine.png';\nimport grapeMimLpLogo from '../../assets/img/AKUSD-BUSD.png';\nimport wineMimLpLogo from '../../assets/img/gshare-mim.png';\nimport wamp from '../../assets/img/WAMP.png';\nimport hsharewine from '../../assets/img/hshare-wine.png';\nimport gnode from '../../assets/img/gnode.png';\nimport grapewlrs from '../../assets/img/grape-wlrs.png';\nimport winePops from '../../assets/img/wine-pops.png';\nimport vintage from '../../assets/img/vintage-token.png';\nimport { Grid } from '@material-ui/core';\n\nconst logosBySymbol: { [title: string]: string } = {\n  //Real tokens\n  //=====================\n  AKUSD: grapeLogo,\n  AKBOND: gbondLogo,\n  AKSHARE: wine,\n  SOFT: vintage,\n  BNB: bnb,\n  BUSD: busd,\n  WBNB: wavax,\n  WAMP: wamp,\n  HSHARE: wamp,\n  GNODE: gnode,\n  sVintage: vintage,\n  'AKUSD-BUSD-LP': grapeMimLpLogo,\n  'AKSHARE-WBNB-LP': grapeMimLpLogo,\n  'AKSHARE-BUSD-LP': wineMimLpLogo,\n  'SOFT-BUSD-LP': grapewlrs,\n  'AKUSD-AKSHARE-LP': grapeWine,\n  'HSHARE-AKSHARE-LP': hsharewine,\n  'AKSHARE-POPS-LP': winePops,\n};\n\ntype LogoProps = {\n  symbol: string;\n  width?: number;\n  height?: number;\n  marginTop?: number;\n};\n\nconst TokenSymbol: React.FC<LogoProps> = ({ symbol, width, height, marginTop }) => {\n  if (!logosBySymbol[symbol]) {\n    throw new Error(`Invalid Token Logo symbol: ${symbol}`);\n  }\n  if (!width) {\n    width = 60;\n  }\n  if (!height) {\n    height = 60;\n  }\n\n  return (\n    <img\n      src={logosBySymbol[symbol]}\n      alt={`${symbol} Logo`}\n      width={width}\n      height={height}\n      style={{ marginTop: marginTop, zIndex: 1000 }}\n    />\n  );\n};\n\nexport default TokenSymbol;\n","E:\\projects\\adey\\front-end-main\\src\\components\\Label\\index.ts",[],"E:\\projects\\adey\\front-end-main\\src\\components\\CardContent\\index.ts",[],"E:\\projects\\adey\\front-end-main\\src\\hooks\\useAllowance.ts",[],"E:\\projects\\adey\\front-end-main\\src\\components\\NodesInfoCard\\NodesInfoCard.tsx",[],"E:\\projects\\adey\\front-end-main\\src\\hooks\\useHandleTransactionReceipt.ts",[],"E:\\projects\\adey\\front-end-main\\src\\utils\\formatBalance.ts",[],"E:\\projects\\adey\\front-end-main\\src\\views\\GrapeNode\\GrapeNode.jsx",["1358"],"import React, { useMemo } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useWallet } from 'use-wallet';\nimport PageHeader from '../../components/PageHeader';\nimport { Box, Card, CardContent, Typography, Grid, Button } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport styled from 'styled-components';\nimport Spacer from '../../components/Spacer';\nimport Harvest from './components/Harvest';\nimport Stake from './components/Stake';\nimport useBank from '../../hooks/useBank';\nimport useNodes from '../../hooks/useNodes';\nimport useMaxPayout from '../../hooks/useMaxPayout';\nimport useUserDetails from '../../hooks/useUserDetails';\nimport totalNodes from '../../hooks/useTotalNodes';\nimport useStatsForPool from '../../hooks/useStatsForPool';\nimport useStakedTokenPriceInDollars from '../../hooks/useStakedTokenPriceInDollars';\nimport useNodePrice from '../../hooks/useNodePrice';\nimport { getDisplayBalance } from '../../utils/formatBalance';\nimport { Alert } from '@material-ui/lab';\nimport useDailyDrip from '../../hooks/useDailyDrip';\n\nconst useStyles = makeStyles((theme) => ({\n  gridItem: {\n    height: '100%',\n    [theme.breakpoints.up('md')]: {\n      height: '90px',\n    },\n  },\n}));\n\nconst GrapeNode = () => {\n  const { bankId } = useParams();\n\n  const bank = useBank(bankId);\n  const { account } = useWallet();\n  const classes = useStyles();\n  const statsOnPool = useStatsForPool(bank);\n  const nodes = useNodes(bank?.contract, bank?.sectionInUI, account);\n  const nodePrice = useNodePrice(bank?.contract, bank.poolId, bank.sectionInUI);\n  const total = totalNodes(bank?.contract, bank?.sectionInUI);\n  const max = useMaxPayout(bank?.contract, bank?.sectionInUI, account);\n  const daily = useDailyDrip(bank?.contract, bank?.sectionInUI, account);\n  const userDetails = useUserDetails(bank?.contract, bank?.sectionInUI, account);\n  const stakedTokenPriceInDollars = useStakedTokenPriceInDollars(bank?.depositTokenName, bank?.depositToken);\n\n  const tokenPriceInDollars = useMemo(\n    () => (stakedTokenPriceInDollars ? stakedTokenPriceInDollars : null),\n    [stakedTokenPriceInDollars],\n  );\n\n  return bank ? (\n    <>\n      <Typography color=\"textPrimary\" align=\"center\" variant=\"h3\" gutterBottom>\n        {bank.earnTokenName} Nodes\n      </Typography>\n      <Box>\n        <Alert variant=\"filled\" severity=\"info\">\n          Please read our{' '}\n          <a\n            style={{ color: '#fff' }}\n            rel=\"noopener noreferrer\"\n            target={'_blank'}\n            href=\"https://grapefinance.gitbook.io/grape-finance-docs/unique-features/locked-staking-grape-nodes\"\n          >\n            Node Docs & Strategy\n          </a>{' '}\n          in order to fully understand how our node pools work before purchasing, by partaking you accept the risks\n          outlined in the docs & disclaimer.\n        </Alert>\n        <Alert variant=\"filled\" severity=\"info\" style={{ marginTop: '20px' }}>\n          Node APRs are determined by overall claim to compound ratio of the pool, a higher compound rate not only means\n          your daily returns increase it also keeps the APR stable and can help boost it. A good ratio for node health\n          is to compound 3 nodes for every 1 nodes worth of claims.\n        </Alert>\n        <Grid container justify=\"center\" spacing={2} style={{ marginBottom: '50px', marginTop: '20px' }}>\n          <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\n            <Card className={classes.gridItem}>\n              <CardContent style={{ textAlign: 'center' }}>\n                <Typography style={{ color: '#ccf' }}>Your Nodes | Value</Typography>\n                <Typography>\n                  {nodes[0] && (\n                    <>\n                      <b style={{ color: 'rgb(255, 255, 255)', marginRight: '0px' }}>{nodes[0].toString()}</b> |{' '}\n                      <b style={{ color: 'rgb(255, 255, 255)', marginRight: '0px' }}>\n                        $\n                        {(\n                          nodes[0] *\n                          (tokenPriceInDollars * getDisplayBalance(nodePrice, bank.depositToken.decimal, 1))\n                        ).toFixed(0)}\n                      </b>\n                    </>\n                  )}\n                </Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\n            <Card className={classes.gridItem}>\n              <CardContent style={{ textAlign: 'center' }}>\n                <Typography style={{ color: '#ccf' }}>Daily | $</Typography>\n                <Typography>\n                  {(Number(daily) / 1e18).toFixed(2)} | $ {((Number(daily) / 1e18) * tokenPriceInDollars).toFixed(2)}\n                </Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\n            <Card className={classes.gridItem}>\n              <CardContent style={{ textAlign: 'center' }}>\n                <Typography style={{ color: '#ccf' }}>Amount Claimed</Typography>\n                <Typography>{(Number(userDetails.total_claims) / 1e18).toFixed(2)} </Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\n            <Card className={classes.gridItem}>\n              <CardContent style={{ textAlign: 'center' }}>\n                <Typography style={{ color: '#ccf' }}>Max Possible Pay</Typography>\n                <Typography>{Number(max) / 1e18} </Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\n            <Card className={classes.gridItem}>\n              <CardContent style={{ textAlign: 'center' }}>\n                <Typography style={{ color: '#ccf' }}>APR | Daily</Typography>\n                <Typography>\n                  {bank.closedForStaking ? '0.00' : statsOnPool?.yearlyAPR}% |{' '}\n                  {bank.closedForStaking ? '0.00' : statsOnPool?.dailyAPR}%\n                </Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n\n          <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\n            <Card className={classes.gridItem}>\n              <CardContent style={{ textAlign: 'center' }}>\n                <Typography style={{ color: '#ccf' }}>Total Nodes | TVL</Typography>\n                <Typography>\n                  {Number(total[0])} | $\n                  {statsOnPool?.TVL ? Number(Number(statsOnPool?.TVL).toFixed(0)).toLocaleString('en-US') : '-.--'}\n                </Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n        </Grid>\n      </Box>\n\n      <Box mt={5}>\n        <StyledBank>\n          <StyledCardsWrapper>\n            <StyledCardWrapper>\n              <Harvest bank={bank} />\n            </StyledCardWrapper>\n            <Spacer />\n            <StyledCardWrapper>{<Stake bank={bank} />}</StyledCardWrapper>\n          </StyledCardsWrapper>\n          <Spacer size=\"lg\" />\n          {bank.depositTokenName === 'AKUSD-BUSD-SW' ? (\n            <Card>\n              <CardContent>\n                <StyledLink\n                  href={\n                    'https://www.swapsicle.io/add/0xd25e8D31C43133Af6E5321228E19EC4CbA66718d/0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56'\n                  }\n                  rel=\"noopener noreferrer\"\n                  target=\"_blank\"\n                >\n                  <span style={{ color: '#fff' }}>Provide liquidity for AKUSD-BUSD on Swapsicle</span>\n                </StyledLink>\n              </CardContent>\n            </Card>\n          ) : null}\n          {bank.depositTokenName === 'GRAPE-WLRS-LP' ? (\n            <Card>\n              <CardContent>\n                <StyledLink\n                  href={\n                    'https://traderjoexyz.com/pool/0x395908aeb53d33a9b8ac35e148e9805d34a555d3/0xd25e8D31C43133Af6E5321228E19EC4CbA66718d'\n                  }\n                  rel=\"noopener noreferrer\"\n                  target=\"_blank\"\n                >\n                  <span style={{ color: '#fff' }}>Provide liquidity for GRAPE-WLRS on Joe</span>\n                </StyledLink>\n              </CardContent>\n            </Card>\n          ) : null}\n        </StyledBank>\n      </Box>\n    </>\n  ) : (\n    <BankNotFound />\n  );\n};\n\nconst BankNotFound = () => {\n  return (\n    <Center>\n      <PageHeader icon=\"🏚\" title=\"Not Found\" subtitle=\"You've hit a bank just robbed by unicorns.\" />\n    </Center>\n  );\n};\n\nconst StyledBank = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  @media (max-width: 768px) {\n    width: 100%;\n  }\n`;\n\nconst StyledLink = styled.a`\n  font-weight: 700;\n  text-decoration: none;\n  color: ${(props) => props.theme.color.primary.main};\n`;\n\nconst StyledCardsWrapper = styled.div`\n  display: flex;\n  width: 600px;\n  @media (max-width: 768px) {\n    width: 100%;\n    flex-flow: column nowrap;\n    align-items: center;\n  }\n`;\n\nconst StyledCardWrapper = styled.div`\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  @media (max-width: 768px) {\n    width: 80%;\n  }\n`;\n\nconst Center = styled.div`\n  display: flex;\n  flex: 1;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport default GrapeNode;\n","E:\\projects\\adey\\front-end-main\\src\\utils\\constants.ts",[],"E:\\projects\\adey\\front-end-main\\src\\grape-finance\\ERC20.ts",[],"E:\\projects\\adey\\front-end-main\\src\\components\\Nav\\AccountButton.tsx",[],"E:\\projects\\adey\\front-end-main\\src\\hooks\\useStatsForPool.ts",[],"E:\\projects\\adey\\front-end-main\\src\\components\\TokenInput\\index.ts",[],"E:\\projects\\adey\\front-end-main\\src\\components\\ModalTitle\\index.ts",[],"E:\\projects\\adey\\front-end-main\\src\\components\\Label\\Label.tsx",[],"E:\\projects\\adey\\front-end-main\\src\\components\\CardContent\\CardContent.tsx",[],"E:\\projects\\adey\\front-end-main\\src\\components\\ModalActions\\index.ts",[],"E:\\projects\\adey\\front-end-main\\src\\hooks\\useDailyDrip.ts",[],"E:\\projects\\adey\\front-end-main\\src\\components\\Modal\\index.ts",[],"E:\\projects\\adey\\front-end-main\\src\\components\\PoolCardHeader\\index.ts",[],"E:\\projects\\adey\\front-end-main\\src\\components\\NodeCardContent\\index.ts",[],"E:\\projects\\adey\\front-end-main\\src\\components\\TokenInput\\TokenInput.tsx",[],"E:\\projects\\adey\\front-end-main\\src\\hooks\\useENS.ts",[],"E:\\projects\\adey\\front-end-main\\src\\components\\ModalTitle\\ModalTitle.tsx",[],"E:\\projects\\adey\\front-end-main\\src\\components\\ModalActions\\ModalActions.tsx",[],"E:\\projects\\adey\\front-end-main\\src\\components\\Nav\\AccountModal.tsx",[],"E:\\projects\\adey\\front-end-main\\src\\components\\Modal\\Modal.tsx",[],"E:\\projects\\adey\\front-end-main\\src\\components\\WalletProviderModal\\index.js",[],"E:\\projects\\adey\\front-end-main\\src\\components\\PoolCardHeader\\PoolCardHeader.tsx",["1359","1360","1361","1362","1363","1364","1365","1366","1367","1368"],"import React, { useState } from 'react';\nimport { Grid, Paper, Typography } from '@material-ui/core';\nimport TokenSymbol from '../TokenSymbol';\nimport { Bank } from '../../grape-finance';\nimport AprModal from '../../views/Vineyard/AprModal';\nimport SwapVerticalCircleIcon from '@material-ui/icons/SwapVerticalCircle';\nimport { PoolStats } from '../../grape-finance/types';\nimport { Button } from '@mui/material';\nimport RocketLaunchIcon from '@mui/icons-material/RocketLaunch';\n\ninterface PoolCardHeaderProps {\n  bank: Bank;\n  statsOnPool: PoolStats;\n  stakedInToken?: number;\n  showAPRCalc?: boolean;\n}\n\nconst PoolCardHeader: React.FC<PoolCardHeaderProps> = ({ bank, statsOnPool, stakedInToken, showAPRCalc = false }) => {\n  const [modalOpen, setModalOpen] = useState(false);\n\n  const handleCloseModal = () => {\n    setModalOpen(false);\n  };\n\n  const handleOpenModal = () => {\n    setModalOpen(true);\n  };\n\n  return (\n    <Grid container style={{ position: 'relative', paddingTop: '20px' }} spacing={1}>\n      {/* <AprModal\n        open={modalOpen}\n        amountDeposited={100}\n        handleClose={handleCloseModal}\n        statsOnPool={statsOnPool}\n        coin={bank.depositTokenName}\n      />\n      <Grid item xs={2} style={{ marginTop: 5 }}>\n        <h5 style={{ padding: 0, margin: 0 }}>Stats</h5>\n      </Grid>\n      <Grid item xs={10}>\n        <Grid container spacing={1} justifyContent=\"flex-end\">\n          {showAPRCalc && (\n            <Grid item>\n              <Button\n                className=\"action-button apr-calc\"\n                onClick={handleOpenModal}\n                variant=\"outlined\"\n                startIcon={<SwapVerticalCircleIcon />}\n              >\n                Apr Calc\n              </Button>\n            </Grid>\n          )}\n        </Grid>\n      </Grid> */}\n      <Grid item xs={12} md={12} lg={12}>\n        <Grid container alignItems=\"baseline\" justifyContent=\"space-between\">\n          <Grid item xs={4}>\n            <span className=\"pool-card-info-text\">APR:</span>\n          </Grid>\n          <Grid item xs={8}>\n            <span className=\"pool-card-info-text\">{bank.closedForStaking ? '0.00' : statsOnPool?.yearlyAPR}%</span>\n          </Grid>\n        </Grid>\n      </Grid>\n      <Grid item xs={12} md={12} lg={12}>\n        <Grid container justifyContent=\"space-between\">\n          <Grid item xs={4}>\n            <span className=\"pool-card-info-text\">TVL:</span>\n          </Grid>\n          <Grid item xs={8}>\n            <b className={'pool-card-info-text'}>\n              {' '}\n              ${statsOnPool?.TVL ? Number(Number(statsOnPool?.TVL).toFixed(0)).toLocaleString('en-US') : '-.--'}\n            </b>\n          </Grid>\n        </Grid>\n      </Grid>\n      <Grid item xs={12} md={12} lg={12}>\n        <Grid container alignItems=\"baseline\" justifyContent=\"space-between\">\n          <Grid item xs={4}>\n            <span className=\"pool-card-info-text1\">Status:</span>\n          </Grid>\n          <Grid item xs={8}>\n            <span className=\"pool-card-info-text1\">Running</span>\n          </Grid>\n        </Grid>\n      </Grid>\n      <Grid item xs={12} md={12} lg={12}>\n        <Grid container alignItems=\"baseline\" justifyContent=\"space-between\">\n          <Grid item xs={4}>\n            <span className=\"pool-card-info-text1\">Deposit:</span>\n          </Grid>\n          <Grid item xs={8}>\n            <span className=\"pool-card-info-text1\">{bank.depositTokenName}</span>\n          </Grid>\n        </Grid>\n      </Grid>\n      <Grid item xs={12} md={12} lg={12}>\n        <Grid container alignItems=\"baseline\" justifyContent=\"space-between\">\n          <Grid item xs={4}>\n            <span className=\"pool-card-info-text1\">Earn:</span>\n          </Grid>\n          <Grid item xs={8}>\n            <span className=\"pool-card-info-text1\">AKSHARE</span>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default PoolCardHeader;\n","E:\\projects\\adey\\front-end-main\\src\\components\\NodeCardContent\\NodeCardContent.tsx",["1369","1370","1371","1372","1373","1374","1375","1376","1377"],"import React, { useMemo } from 'react';\nimport { Button, Card, CardContent, Grid, Paper, Typography } from '@material-ui/core';\nimport TokenSymbol from '../TokenSymbol';\nimport { getDisplayBalance } from '../../utils/formatBalance';\nimport useStatsForPool from '../../hooks/useStatsForPool';\nimport useEarnings from '../../hooks/useEarnings';\nimport useGrapeStats from '../../hooks/useGrapeStats';\nimport useShareStats from '../../hooks/useWineStats';\nimport { Bank } from '../../grape-finance';\nimport { useGetMultiplierForNode } from '../../utils/constants';\nimport { Link } from 'react-router-dom';\nimport { useWallet } from 'use-wallet';\nimport useNodes from '../../hooks/useNodes';\nimport useLpStatsBTC from '../../hooks/useLpStatsBTC';\nimport PoolCardHeader from '../PoolCardHeader';\nimport { PoolStats } from '../../grape-finance/types';\n\ninterface NodeCardContentProps {\n  bank: Bank;\n  statsOnPool: PoolStats;\n}\n\nconst NodeCardContent: React.FC<NodeCardContentProps> = ({ bank, statsOnPool }) => {\n  const { account } = useWallet();\n  const nodes = useNodes(bank?.contract, bank?.sectionInUI, account);\n  const nodeCount = nodes[0];\n  const ticketRewards = useGetMultiplierForNode(bank.earnTokenName);\n  const earnings = useEarnings(bank.contract, bank.earnTokenName, bank.poolId);\n  const grapeStats = useGrapeStats();\n  const tShareStats = useShareStats();\n  const grapemimLpStats = useLpStatsBTC('AKUSD-BUSD-SW');\n  const grapeWLRSLpStats = useLpStatsBTC('GRAPE-WLRS-LP');\n\n  let tokenStats: any = 0;\n  if (bank.earnTokenName === 'AKSHARE') {\n    tokenStats = tShareStats;\n  } else if (bank.earnTokenName === 'AKUSD') {\n    tokenStats = grapeStats;\n  } else if (bank.earnTokenName === 'AKUSD-BUSD-SW') {\n    tokenStats = grapemimLpStats;\n  } else if (bank.earnTokenName === 'GRAPE-WLRS-LP') {\n    tokenStats = grapeWLRSLpStats;\n  }\n\n  const tokenPriceInDollars = useMemo(\n    () => (tokenStats ? Number(tokenStats.priceInDollars).toFixed(2) : null),\n    [tokenStats],\n  );\n  const tokenPriceInDollarsLP = useMemo(\n    () => (tokenStats ? Number(tokenStats.priceOfOne).toFixed(2) : null),\n    [tokenStats],\n  );\n  const earnedInToken = Number(getDisplayBalance(earnings));\n  const earnedInDollars = (Number(tokenPriceInDollars) * earnedInToken).toFixed(2);\n  const earnedInDollarsLP = (Number(tokenPriceInDollarsLP) * Number(getDisplayBalance(earnings))).toFixed(2);\n\n  return (\n    <Grid container direction=\"column\" spacing={1}>\n      {Number(nodeCount) > 0 && (\n        <>\n          <Grid item style={{ marginTop: 15 }}>\n            <h5 style={{ padding: 0, margin: 0 }}>Your stats</h5>\n          </Grid>\n          <Grid item>\n            <Grid container justifyContent=\"space-between\">\n              <Grid item>\n                <span className=\"card-info-text\">Your Nodes / Airdrop Tickets</span>\n              </Grid>\n              <Grid item>\n                <b className={'card-info-value'}>\n                  {' '}\n                  {nodeCount ? `${Number(nodeCount)} / ${Number(nodeCount) * ticketRewards}` : null}\n                </b>\n              </Grid>\n            </Grid>\n          </Grid>\n        </>\n      )}\n      {Number(nodeCount) === 0 && (\n        <>\n          <Grid item>\n            <Grid container justifyContent=\"space-between\">\n              <Grid item>\n                <span className=\"card-info-text\">Airdrop Tickets</span>\n              </Grid>\n              <Grid item>\n                <b className={'card-info-value'}>{ticketRewards} per Node</b>\n              </Grid>\n            </Grid>\n          </Grid>\n        </>\n      )}\n\n      {Number(nodeCount) > 0 && (\n        <>\n          <Grid item>\n            <Grid container justifyContent=\"space-between\">\n              <Grid item>\n                <span className=\"card-info-text\">Earned</span>\n              </Grid>\n              <Grid item>\n                <b className={'card-info-value'}>{`${earnedInToken} ${bank.earnTokenName}`}</b>\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid item>\n            <Grid container justifyContent=\"space-between\">\n              <Grid item>\n                <span className=\"card-info-text\">Earned $</span>\n              </Grid>\n              <Grid item>\n                <b className={'card-info-value'}>{`≈$${\n                  bank.earnTokenName === 'AKUSD-BUSD-SW' || bank.earnTokenName === 'GRAPE-WLRS-LP'\n                    ? Number(earnedInDollarsLP).toLocaleString('en-US')\n                    : Number(earnedInDollars).toLocaleString('en-US')\n                }`}</b>\n              </Grid>\n            </Grid>\n          </Grid>\n        </>\n      )}\n    </Grid>\n  );\n};\n\nexport default NodeCardContent;\n","E:\\projects\\adey\\front-end-main\\src\\components\\WalletProviderModal\\WalletProviderModal.js",[],"E:\\projects\\adey\\front-end-main\\src\\components\\Input\\index.ts",[],"E:\\projects\\adey\\front-end-main\\src\\hooks\\useLpStatsBTC.ts",[],"E:\\projects\\adey\\front-end-main\\src\\hooks\\useGrapeStats.ts",[],"E:\\projects\\adey\\front-end-main\\src\\hooks\\useNodes.ts",[],"E:\\projects\\adey\\front-end-main\\src\\hooks\\useEarnings.ts",[],"E:\\projects\\adey\\front-end-main\\src\\components\\Input\\Input.tsx",[],"E:\\projects\\adey\\front-end-main\\src\\components\\WalletProviderModal\\WalletCard.js",[],"E:\\projects\\adey\\front-end-main\\src\\components\\Container\\index.ts",[],"E:\\projects\\adey\\front-end-main\\src\\components\\Card\\index.ts",[],"E:\\projects\\adey\\front-end-main\\src\\components\\Container\\Container.tsx",[],"E:\\projects\\adey\\front-end-main\\src\\components\\Card\\Card.tsx",[],"E:\\projects\\adey\\front-end-main\\src\\hooks\\useNodePrice.ts",["1378"],"import { useCallback, useEffect, useState } from 'react';\n\nimport { BigNumber } from 'ethers';\nimport useGrapeFinance from './useGrapeFinance';\nimport { ContractName } from '../grape-finance';\nimport config from '../config';\n\nconst useNodePrice = (poolName: ContractName, poolId: Number, sectionInUI: Number) => {\n  const [amount, setAmount] = useState(BigNumber.from(0));\n  const grapeFinance = useGrapeFinance();\n\n  const fetchAmount = useCallback(async () => {\n    const balance = sectionInUI === 3 ? await grapeFinance.getNodePrice(poolName, poolId) : BigNumber.from(0);\n    setAmount(balance);\n  }, [poolName, poolId, sectionInUI, grapeFinance]);\n\n  useEffect(() => {\n    if (sectionInUI === 3) {\n      fetchAmount().catch((err) => console.error(err.stack));\n\n      const refreshBalance = setInterval(fetchAmount, config.refreshInterval);\n      return () => clearInterval(refreshBalance);\n    }\n  }, [poolName, setAmount, grapeFinance, fetchAmount]);\n\n  return amount;\n};\n\nexport default useNodePrice;","E:\\projects\\adey\\front-end-main\\src\\hooks\\useStakedTokenPriceInDollars.ts",[],"E:\\projects\\adey\\front-end-main\\src\\hooks\\useUserDetails.ts",[],"E:\\projects\\adey\\front-end-main\\src\\hooks\\useMaxPayout.ts",[],"E:\\projects\\adey\\front-end-main\\src\\hooks\\useTotalNodes.ts",[],"E:\\projects\\adey\\front-end-main\\src\\views\\GrapeNode\\components\\Stake.jsx",[],"E:\\projects\\adey\\front-end-main\\src\\views\\GrapeNode\\components\\Harvest.jsx",[],"E:\\projects\\adey\\front-end-main\\src\\components\\Spacer\\index.ts",[],"E:\\projects\\adey\\front-end-main\\src\\components\\PageHeader\\index.ts",[],"E:\\projects\\adey\\front-end-main\\src\\hooks\\useCompound.ts",[],"E:\\projects\\adey\\front-end-main\\src\\hooks\\useHarvest.ts",[],"E:\\projects\\adey\\front-end-main\\src\\views\\GrapeNode\\components\\ZapModal.tsx",["1379","1380","1381","1382","1383","1384"],"import React, { useState, useMemo } from 'react';\n\nimport { Button, Select, MenuItem, InputLabel, withStyles } from '@material-ui/core';\n// import Button from '../../../components/Button'\nimport Modal, { ModalProps } from '../../../components/Modal';\nimport ModalActions from '../../../components/ModalActions';\nimport ModalTitle from '../../../components/ModalTitle';\nimport TokenInput from '../../../components/TokenInput';\nimport styled from 'styled-components';\n\nimport { getDisplayBalance } from '../../../utils/formatBalance';\nimport Label from '../../../components/Label';\nimport useLpStats from '../../../hooks/useLpStats';\nimport useTokenBalance from '../../../hooks/useTokenBalance';\nimport useGrapeFinance from '../../../hooks/useGrapeFinance';\nimport useApproveSWZapper, { ApprovalState } from '../../../hooks/useApproveSWZapper';\nimport { GRAPE_TICKER, MIM_TICKER } from '../../../utils/constants';\nimport { Alert } from '@material-ui/lab';\n\ninterface ZapProps extends ModalProps {\n  onConfirm: (zapAsset: string, lpName: string, amount: string) => void;\n  LPtokenName?: string;\n  decimals?: number;\n}\n\nconst ZapModal: React.FC<ZapProps> = ({ onConfirm, onDismiss, LPtokenName = '', decimals = 18 }) => {\n  const grapeFinance = useGrapeFinance();\n  //const {balance} = useWallet();\n\n  const grapeBalance = useTokenBalance(grapeFinance.GRAPE);\n  const mimBalance = useTokenBalance(grapeFinance.MIM);\n\n  let [showZapData, setShowZapData] = useState(false);\n  //const avaxDisplayBalance = (Number(balance) / 1e18).toFixed(4).toString();\n\n  const [val, setVal] = useState('');\n  // The token to be swapped from.\n  const [zappingToken, setZappingToken] = useState(MIM_TICKER);\n  const [zappingTokenBalance, setZappingTokenBalance] = useState(getDisplayBalance(mimBalance, decimals));\n  const [estimate, setEstimate] = useState({ token0: '0', token1: '0' });\n  const { approvalState, approve } = useApproveSWZapper(zappingToken);\n  const grapemimLpStats = useLpStats('AKUSD-BUSD-SW');\n  const grapeLPStats = useMemo(() => (grapemimLpStats ? grapemimLpStats : null), [grapemimLpStats]);\n  const mimAmountPerLP = grapeLPStats?.mimAmount;\n  /**\n   * Checks if a value is a valid number or not\n   * @param n is the value to be evaluated for a number\n   * @returns\n   */\n  function isNumeric(n: any) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n  const handleChangeAsset = (event: any) => {\n    const value = event.target.value;\n    if (value == 'NONE') {\n      setShowZapData(false);\n    } else {\n      setVal('0');\n      setEstimate({ token0: '0', token1: '0' });\n      setZappingToken(value);\n      setZappingTokenBalance(getDisplayBalance(mimBalance, decimals));\n      if (event.target.value === GRAPE_TICKER) {\n        setZappingTokenBalance(getDisplayBalance(grapeBalance, decimals));\n      }\n      if (event.target.value === MIM_TICKER) {\n        setZappingTokenBalance(getDisplayBalance(mimBalance, decimals));\n      }\n      setShowZapData(true);\n    }\n  };\n\n  const handleChange = async (e: any) => {\n    // the - is to stop negatives\n    if (!isNumeric(e.currentTarget.value) || e.currentTarget.value.includes('-')) return;\n    if (e.currentTarget.value === '' || Number(e.currentTarget.value) == 0) {\n      setVal(e.currentTarget.value);\n      setEstimate({ token0: '0', token1: '0' });\n    } else {\n      setVal(e.currentTarget.value);\n      const estimateZap = await grapeFinance.estimateZapIn(\n        zappingToken,\n        LPtokenName,\n        String(e.currentTarget.value).trim(),\n      );\n\n      setEstimate({ token0: estimateZap.amounts[0], token1: estimateZap.amounts[1] });\n    }\n  };\n\n  const handleSelectMax = async () => {\n    setVal(zappingTokenBalance);\n    const estimateZap = await grapeFinance.estimateZapIn(zappingToken, LPtokenName, String(zappingTokenBalance));\n    setEstimate({ token0: estimateZap.amounts[0].toString(), token1: estimateZap.amounts[1].toString() });\n  };\n\n  function getOrderLPName(lpName: string): string[] {\n    if (lpName.includes('AKUSD-BUSD-SW')) return [GRAPE_TICKER, MIM_TICKER];\n    return;\n  }\n\n  function getOrderLPBalanceThing(token0: string, token1: string): string[] {\n    if (token0 == GRAPE_TICKER) return [token0, token1];\n    if (token0 == MIM_TICKER) return [token1, token0];\n    return;\n  }\n\n  function normalizeOrder(token0: string, tokenAmount0: string, tokenAmount1: string) {\n    if (token0 == GRAPE_TICKER) return [tokenAmount0, tokenAmount1];\n    if (token0 == MIM_TICKER) return [tokenAmount1, tokenAmount0];\n    return;\n  }\n\n  let [token0Name, token1Name] = getOrderLPName(LPtokenName);\n  let [tokenA, tokenB] = getOrderLPBalanceThing(token0Name, token1Name);\n  return (\n    <Modal>\n      <ModalTitle text={`Zap in ${LPtokenName}`} />\n\n      <StyledActionSpacer />\n      <InputLabel style={{ color: '#fff' }} id=\"label\">\n        Select asset to zap with\n      </InputLabel>\n      <Select\n        onChange={handleChangeAsset}\n        style={{ color: '#fff' }}\n        labelId=\"label\"\n        id=\"select\"\n        value={showZapData ? zappingToken : 'NONE'}\n      >\n        <StyledMenuItem value=\"NONE\">Choose asset</StyledMenuItem>\n        {LPtokenName.includes(MIM_TICKER) && <StyledMenuItem value={MIM_TICKER}>MIM</StyledMenuItem>}\n        {/*LPtokenName.includes(GRAPE_TICKER) && <StyledMenuItem value={GRAPE_TICKER}>GRAPE</StyledMenuItem>*/}\n      </Select>\n      {showZapData && (\n        <>\n          <TokenInput\n            onSelectMax={handleSelectMax}\n            onChange={handleChange}\n            value={val}\n            max={zappingTokenBalance}\n            symbol={zappingToken}\n          />\n          <Label text=\"Zap Estimations\" />\n          <StyledDescriptionText>\n            {' '}\n            {LPtokenName} tokens: {Number(estimate.token0) / Number(mimAmountPerLP)}\n          </StyledDescriptionText>\n          <StyledDescriptionText>\n            {/* Spaghetti bolognese right here! */} (\n            {Number(normalizeOrder(zappingToken, estimate.token0, estimate.token1)[0])} {tokenA} /{' '}\n            {Number(normalizeOrder(zappingToken, estimate.token0, estimate.token1)[1])} {tokenB}){' '}\n          </StyledDescriptionText>\n          <ModalActions>\n            <Button\n              color=\"primary\"\n              variant=\"contained\"\n              onClick={() =>\n                approvalState !== ApprovalState.APPROVED ? approve() : onConfirm(zappingToken, LPtokenName, val)\n              }\n            >\n              {approvalState !== ApprovalState.APPROVED ? 'Approve' : 'Zap'}\n            </Button>\n          </ModalActions>\n        </>\n      )}\n\n      <StyledActionSpacer />\n      <Alert variant=\"filled\" severity=\"info\">\n        You need to manually stake the LP tokens after zapping. Maximum slippage is 1%.{' '}\n      </Alert>\n    </Modal>\n  );\n};\n\nconst StyledActionSpacer = styled.div`\n  height: ${(props) => props.theme.spacing[4]}px;\n  width: ${(props) => props.theme.spacing[4]}px;\n`;\n\nconst StyledDescriptionText = styled.div`\n  align-items: center;\n  color: ${(props) => props.theme.color.grey[400]};\n  display: flex;\n  font-size: 14px;\n  font-weight: 700;\n  height: 22px;\n  justify-content: flex-start;\n`;\nconst StyledMenuItem = withStyles({\n  root: {\n    backgroundColor: 'white',\n    color: '#2c2560',\n    '&:hover': {\n      backgroundColor: 'grey',\n      color: '#2c2560',\n    },\n    selected: {\n      backgroundColor: 'black',\n    },\n  },\n})(MenuItem);\n\nexport default ZapModal;\n","E:\\projects\\adey\\front-end-main\\src\\hooks\\useZapSW.ts",[],"E:\\projects\\adey\\front-end-main\\src\\hooks\\useStake.ts",[],"E:\\projects\\adey\\front-end-main\\src\\components\\Spacer\\Spacer.tsx",[],"E:\\projects\\adey\\front-end-main\\src\\components\\PageHeader\\PageHeader.tsx",[],"E:\\projects\\adey\\front-end-main\\src\\views\\GrapeNode\\components\\DepositModal.jsx",["1385"],"import React, { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { Button } from '@material-ui/core';\nimport ReactTooltip from 'react-tooltip';\nimport Modal from '../../../components/Modal';\nimport ModalActions from '../../../components/ModalActions';\nimport ModalTitle from '../../../components/ModalTitle';\nimport TokenInput from '../../../components/TokenInput';\n\nimport { getFullDisplayBalance } from '../../../utils/formatBalance';\n\nimport useNodeText from '../../../hooks/useNodeText';\n\n\nconst DepositModal = ({ bank, max, decimals, onConfirm, onDismiss, tokenName = '' }) => {\n  const [val, setVal] = useState('');\n  const { getNodeText } = useNodeText();\n  const [width, setWidth] = useState(window.innerWidth);\n  const [amount, setAmount] = useState(1);\n  \n  function handleWindowSizeChange() {\n    setWidth(window.innerWidth);\n  }\n  useEffect(() => {\n    window.addEventListener('resize', handleWindowSizeChange);\n    return () => {\n      window.removeEventListener('resize', handleWindowSizeChange);\n    }\n  }, []);\n\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max, decimals, false);\n  }, [max, decimals]);\n\n  const handleChange = useCallback(\n    (e) => {\n      setVal(e.currentTarget.value);\n    },\n    [setVal],\n  );\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance);\n  }, [fullBalance, setVal]);\n\n  const handleAmountChange = (event) => {\n    setAmount(parseInt(event.currentTarget.value));\n  }\n\n\n  return (\n    <Modal>\n      <ReactTooltip effect=\"solid\" clickable type=\"dark\" place=\"bottom\" />\n      <ModalTitle text={bank.sectionInUI !== 3 ? `Deposit ${tokenName}` : `Purchase ${getNodeText(bank.poolId)}s`} />\n\n      {bank.sectionInUI !== 3 ? <><TokenInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n      />\n        <ModalActions>\n      \n          <Button className=\"shinyButton\" onClick={() => onConfirm(val)}>\n            Confirm\n          </Button>\n        </ModalActions></>\n        :\n        <div style={{ display: 'flex', justifyContent: 'space-evenly' }}>\n          <input type=\"number\" value={amount} onChange={handleAmountChange} min=\"1\" max=\"100\" />\n          <Button className=\"shinyButton\" onClick={() => onConfirm(amount)}>\n            Confirm\n          </Button>\n        </div>\n      }\n    </Modal>\n  );\n};\n\nexport default DepositModal;","E:\\projects\\adey\\front-end-main\\src\\components\\Value\\index.ts",[],"E:\\projects\\adey\\front-end-main\\src\\components\\CardIcon\\index.ts",[],"E:\\projects\\adey\\front-end-main\\src\\hooks\\useApproveSWZapper.ts",["1386"],"import {useCallback, useMemo} from 'react';\nimport { BigNumber, ethers } from 'ethers';\nimport useGrapeFinance from './useGrapeFinance';\nimport {useHasPendingApproval, useTransactionAdder} from '../state/transactions/hooks';\nimport useAllowance from './useAllowance';\nimport ERC20 from '../grape-finance/ERC20';\nimport {GRAPE_TICKER, MIM_TICKER, SW_ZAPPER_ROUTER_ADDR} from '../utils/constants';\n\nconst APPROVE_AMOUNT = ethers.constants.MaxUint256;\nconst APPROVE_BASE_AMOUNT = BigNumber.from('1000000000000000000000000');\n\nexport enum ApprovalState {\n    UNKNOWN,\n    NOT_APPROVED,\n    PENDING,\n    APPROVED,\n  }\n  \nconst useApproveSWZapper = (zappingToken: string) => {\n    const grapeFinance = useGrapeFinance();\n    let token: ERC20;\n  \n    if (zappingToken === GRAPE_TICKER) token = grapeFinance.GRAPE;\n    else if (zappingToken === MIM_TICKER) token = grapeFinance.externalTokens[MIM_TICKER];\n    const pendingApproval = useHasPendingApproval(token.address, SW_ZAPPER_ROUTER_ADDR);\n    const currentAllowance = useAllowance(token, SW_ZAPPER_ROUTER_ADDR, pendingApproval);\n  \n    // check the current approval status\n    const approvalState: ApprovalState = useMemo(() => {\n      // we might not have enough data to know whether or not we need to approve\n      if (!currentAllowance) return ApprovalState.UNKNOWN;\n  \n      // amountToApprove will be defined if currentAllowance is\n      return currentAllowance.lt(APPROVE_BASE_AMOUNT)\n        ? pendingApproval\n          ? ApprovalState.PENDING\n          : ApprovalState.NOT_APPROVED\n        : ApprovalState.APPROVED;\n    }, [currentAllowance, pendingApproval, token, grapeFinance]);\n  \n    const addTransaction = useTransactionAdder();\n  \n    const approve = useCallback(async (): Promise<void> => {\n      if (approvalState !== ApprovalState.NOT_APPROVED) {\n        console.error('approve was called unnecessarily');\n        return;\n      }\n  \n      const response = await token.approve(SW_ZAPPER_ROUTER_ADDR, APPROVE_AMOUNT);\n      addTransaction(response, {\n        summary: `Approve ${token.symbol}`,\n        approval: {\n          tokenAddress: token.address,\n          spender: SW_ZAPPER_ROUTER_ADDR,\n        },\n      });\n    }, [approvalState, token, addTransaction]);\n  \n    return {approvalState, approve};\n};\n\nexport default useApproveSWZapper;\n","E:\\projects\\adey\\front-end-main\\src\\hooks\\useLpStats.ts",[],"E:\\projects\\adey\\front-end-main\\src\\components\\IconButton\\index.ts",[],"E:\\projects\\adey\\front-end-main\\src\\components\\icons\\index.ts",[],"E:\\projects\\adey\\front-end-main\\src\\hooks\\useNodeText.ts",[],"E:\\projects\\adey\\front-end-main\\src\\components\\Value\\Value.tsx",[],"E:\\projects\\adey\\front-end-main\\src\\components\\CardIcon\\CardIcon.tsx",[],"E:\\projects\\adey\\front-end-main\\src\\components\\IconButton\\IconButton.tsx",["1387"],"import React from 'react';\nimport styled from 'styled-components';\n\nimport { Link } from 'react-router-dom';\n\ninterface IconButtonProps {\n  children?: React.ReactNode;\n  disabled?: boolean;\n  onClick?: () => void;\n  to?: string;\n}\n\nconst IconButton: React.FC<IconButtonProps> = ({ children, disabled, onClick, to }) => {\n  return (\n    <StyledButton disabled={disabled} onClick={onClick}>\n      {!!to ? <StyledLink to={to}>{children}</StyledLink> : children}\n    </StyledButton>\n  );\n};\n\ninterface StyledButtonProps {\n  disabled?: boolean;\n}\n/*\n  box-shadow: 6px 6px 12px ${props => props.theme.color.grey[600]},\n    -12px -12px 24px ${props => props.theme.color.grey[800]}aa;\n */\n\n// background-color: ${(props) => (!props.disabled ? '#571eb1' : props.theme.color.grey[900])};\n// color: ${(props) => (!props.disabled ? props.theme.color.primary.main : props.theme.color.grey[500])};\n\nconst StyledButton = styled.button<StyledButtonProps>`\n  align-items: center;\n  border: 0px solid #f9d749;\n  border-radius: 28px;\n  background-color: #212652;\n  box-shadow: ${(props) => ('0px 0px 5px 0px ' + !props.disabled ? 'rgba(251,221,76,1)' : 'grey' + ';')};\n  color: ${(props) => (!props.disabled ? '#fff' : 'grey')};\n  cursor: pointer;\n  display: flex;\n  font-weight: 700;\n  height: 56px;\n  justify-content: center;\n  letter-spacing: 1px;\n  outline: none;\n  padding: 0;\n  margin: 0;\n  pointer-events: ${(props) => (!props.disabled ? undefined : 'none')};\n  text-transform: uppercase;\n  width: 56px;\n\n  &:hover {\n    background-color: #d19aff;\n    color: #fff;\n  }\n`;\n\nconst StyledLink = styled(Link)`\n  align-items: center;\n  color: inherit;\n  display: flex;\n  flex: 1;\n  height: 56px;\n  justify-content: center;\n  margin: 0 ${(props) => -props.theme.spacing[4]}px;\n  padding: 0 ${(props) => props.theme.spacing[4]}px;\n  text-decoration: none;\n`;\n\nexport default IconButton;\n","E:\\projects\\adey\\front-end-main\\src\\components\\icons\\AddIcon.tsx",[],"E:\\projects\\adey\\front-end-main\\src\\components\\icons\\RemoveIcon.tsx",[],"E:\\projects\\adey\\front-end-main\\src\\components\\Icon\\index.ts",[],"E:\\projects\\adey\\front-end-main\\src\\components\\Icon\\Icon.tsx",[],"E:\\projects\\adey\\front-end-main\\src\\hooks\\useStakedBalance.ts",[],"E:\\projects\\adey\\front-end-main\\src\\hooks\\useVintagePrice.ts",[],"E:\\projects\\adey\\front-end-main\\src\\hooks\\useEagerConnect.js",[],"E:\\projects\\adey\\front-end-main\\src\\components\\PoolCardContent\\index.ts",[],"E:\\projects\\adey\\front-end-main\\src\\components\\Button\\index.ts",[],"E:\\projects\\adey\\front-end-main\\src\\components\\Footer\\index.js",[],"E:\\projects\\adey\\front-end-main\\src\\components\\PoolCardContent\\PoolCardContent.tsx",[],"E:\\projects\\adey\\front-end-main\\src\\components\\Button\\Button.tsx",[],"E:\\projects\\adey\\front-end-main\\src\\components\\Footer\\Footer.js",[],"E:\\projects\\adey\\front-end-main\\src\\hooks\\usePegPoolWithdrawFee.ts",["1388"],"import { BigNumber } from 'ethers';\nimport { formatEther } from 'ethers/lib/utils';\nimport { useEffect, useState } from 'react';\nimport useBombFinance from './useGrapeFinance';\n\nconst usePegPoolWithdrawFee = () => {\n  const bombFinance = useBombFinance();\n  const isUnlocked = bombFinance?.isUnlocked;\n  const [withdrawFeePercent, setWithdrawFeePercent] = useState<number>(null);\n\n  useEffect(() => {\n    const updateFee = async () => {\n      const twap: BigNumber = await bombFinance.contracts.PegPool.getUpdatedTWAP();\n      const twapNum = Number(formatEther(twap));\n\n      if (twapNum >= 1) {\n        setWithdrawFeePercent(0);\n        return;\n      }\n\n      const brackets = [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1];\n      for (let i = 0; i < brackets.length; i++) {\n        if (twapNum >= brackets[i]) {\n          setWithdrawFeePercent(Number(((1 - brackets[i]) * 100).toFixed(2)));\n          return;\n        }\n      }\n    };\n\n    if (isUnlocked) {\n      updateFee();\n      const timer = setInterval(() => {\n        updateFee();\n      }, 1000 * 30);\n\n      return () => clearInterval(timer);\n    }\n  }, [isUnlocked]);\n\n  return { withdrawFeePercent };\n};\n\nexport default usePegPoolWithdrawFee;\n","E:\\projects\\adey\\front-end-main\\src\\hooks\\usePegPoolDeposit.ts",["1389","1390"],"import { useCallback } from 'react';\nimport useBombFinance from './useGrapeFinance';\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\nimport { formatEther, parseUnits } from 'ethers/lib/utils';\nimport { PegPool } from '../grape-finance/types';\nimport usePegPool from './usePegPool';\n\nconst usePegPoolDeposit = (pool: PegPool) => {\n  const bombFinance = useBombFinance();\n  const handleTransactionReceipt = useHandleTransactionReceipt();\n  const { refreshPool } = usePegPool();\n\n  const handleDeposit = useCallback(\n    async (amount: string) => {\n      const amountBn = parseUnits(amount);\n      handleTransactionReceipt(\n        bombFinance.depositPegPool(amountBn).then((tx) => {\n          refreshPool();\n          return tx;\n        }),\n        `Deposit ${Number(amount).toFixed(2)} ${pool.depositTokenName} to pool`,\n      );\n    },\n    [pool, bombFinance, handleTransactionReceipt],\n  );\n\n  return { onDeposit: handleDeposit };\n};\n\nexport default usePegPoolDeposit;\n","E:\\projects\\adey\\front-end-main\\src\\views\\Extinction\\components\\PegPoolRewards.tsx",["1391","1392"],"import { Box, Button, Card, CardContent, Typography, Grid } from '@material-ui/core';\nimport ReactTooltip from 'react-tooltip';\nimport React, { useEffect, useState } from 'react';\nimport { PegPoolToken } from '../../../grape-finance/types';\nimport TokenSymbol from '../../../components/TokenSymbol';\nimport usePegPoolCompound from '../../../hooks/usePegPoolCompound';\nimport usePegPoolRewardsClaim from '../../../hooks/usePegPoolRewardsClaim';\nimport usePegPoolWithdrawFee from '../../../hooks/usePegPoolWithdrawFee';\n\nconst PegPoolRewards: React.FC<{\n  rewardTokens: PegPoolToken[];\n  totalRewardValue: string;\n  apr: { daily: string; yearly: string };\n}> = ({ rewardTokens, totalRewardValue, apr }) => {\n  const [hasRewards, setHasRewards] = useState(false);\n  const { doClaim } = usePegPoolRewardsClaim();\n  const { onCompound } = usePegPoolCompound();\n  const { withdrawFeePercent } = usePegPoolWithdrawFee();\n\n  const checkRewards = () => {\n    let hasClaim = false;\n    rewardTokens.forEach((rw) => (hasClaim = rw.pendingValueBN?.gt(0)));\n    setHasRewards(hasClaim);\n  };\n\n  const handleClaim = () => {\n    if (hasRewards) {\n      doClaim();\n    }\n  };\n\n  useEffect(() => {\n    if (rewardTokens?.length) {\n      checkRewards();\n    }\n  }, [rewardTokens]);\n\n  return (\n    <Card variant=\"outlined\">\n      <CardContent>\n        <div style={{ textAlign: 'center' }}>\n          <Grid container justifyContent=\"center\" spacing={2}>\n            <Grid item>\n              <TokenSymbol symbol={'AKSHARE'} width={50} height={50} />\n            </Grid>\n            <Grid item>\n              <TokenSymbol symbol={'BUSD'} width={50} height={50} />\n            </Grid>\n          </Grid>\n        </div>\n        <Grid container direction=\"column\">\n          <Grid item>\n            <Grid container style={{ marginTop: '20px' }} alignItems=\"baseline\" justifyContent=\"space-between\">\n              <Grid item>\n                <Typography variant=\"h5\">Your Total Rewards</Typography>\n              </Grid>\n              <Grid item>\n                <Typography align=\"right\"></Typography>\n                <Typography variant=\"h5\">${totalRewardValue}</Typography>\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid item>\n            <Grid container alignItems=\"baseline\" justifyContent=\"space-between\">\n              <Grid item>\n                <Typography variant=\"h6\">DAILY APR</Typography>\n              </Grid>\n              <Grid item>\n                <Typography align=\"right\"></Typography>\n                <Typography variant=\"h6\">{withdrawFeePercent === 0 ? 0 : apr.daily}%</Typography>\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid item>\n            <Grid container alignItems=\"baseline\" justifyContent=\"space-between\">\n              <Grid item>\n                <Typography variant=\"h6\">YEARLY APR</Typography>\n              </Grid>\n              <Grid item>\n                <Typography align=\"right\"></Typography>\n                <Typography variant=\"h6\">{withdrawFeePercent === 0 ? 0 : apr.yearly}%</Typography>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n\n        <Grid container justifyContent=\"center\" alignItems=\"center\">\n          {rewardTokens?.map((token, i) => {\n            return (\n              <Grid container justifyContent=\"space-between\" alignItems=\"center\" key={i} style={{ marginTop: '35px' }}>\n                <Grid item xs={1}>\n                  <TokenSymbol symbol={token.name} width={40} height={40} />\n                </Grid>\n                <Grid item xs={1}>\n                  <Typography\n                    style={{\n                      fontWeight: 700,\n                      paddingTop: '5px',\n                      display: 'block',\n                    }}\n                  >\n                    {' '}\n                    {token.name}\n                  </Typography>\n                  <Typography\n                    style={{\n                      fontSize: '14px',\n                      color: 'rgb(200, 200, 200)',\n                    }}\n                  >\n                    {token.currentPrice}\n                  </Typography>\n                </Grid>\n                <Grid item xs={9}>\n                  <Typography align=\"right\">\n                    {token.amount} {token.name}\n                  </Typography>\n                  <Typography align=\"right\">${token.pendingValue}</Typography>\n                </Grid>\n                {token.canCompound && (\n                  <Grid container justifyContent=\"flex-end\" style={{ marginTop: '5px' }}>\n                    <Grid item>\n                      <span\n                        style={{\n                          color: 'white',\n                          display: 'inline-block',\n                          margin: '8px',\n                          borderRadius: '50%',\n                          width: '20px',\n                          background: '#e647e6',\n                          textAlign: 'center',\n                          fontSize: '14px',\n                          cursor: 'pointer',\n                        }}\n                        data-tip=\"*Compound deposit result subject to DEX fees/slippage\"\n                      >\n                        !\n                      </span>\n\n                      <ReactTooltip />\n                    </Grid>\n                    <Grid item>\n                      <Button\n                        disabled={!hasRewards}\n                        className={hasRewards ? 'shinyButton' : 'shinyButtonDisabled'}\n                        onClick={onCompound}\n                      >\n                        Compound\n                      </Button>\n                    </Grid>\n                  </Grid>\n                )}\n              </Grid>\n            );\n          })}\n          <Grid container style={{ marginTop: '30px' }}>\n            <Button\n              className={hasRewards ? 'shinyButton' : 'shinyButtonDisabled'}\n              fullWidth={true}\n              disabled={!hasRewards}\n              onClick={handleClaim}\n            >\n              Claim All\n            </Button>\n          </Grid>\n        </Grid>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default PegPoolRewards;\n","E:\\projects\\adey\\front-end-main\\src\\views\\Bank\\components\\DepositModal.tsx",[],"E:\\projects\\adey\\front-end-main\\src\\hooks\\usePegPoolRewardsClaim.ts",["1393"],"import { useCallback } from 'react';\nimport useBombFinance from './useGrapeFinance';\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\nimport usePegPool from './usePegPool';\n\nconst usePegPoolRewardsClaim = () => {\n  const bombFinance = useBombFinance();\n  const handleTransactionReceipt = useHandleTransactionReceipt();\n  const { refreshPool } = usePegPool();\n\n  const handleReward = useCallback(() => {\n    handleTransactionReceipt(\n      bombFinance.claimPegPool().then(async (tx) => {\n        await refreshPool();\n        return tx;\n      }),\n      ` Claim rewards from Peg Pool `,\n    );\n  }, [bombFinance, handleTransactionReceipt]);\n\n  return { doClaim: handleReward };\n};\n\nexport default usePegPoolRewardsClaim;\n","E:\\projects\\adey\\front-end-main\\src\\hooks\\usePegPoolCompound.ts",[],"E:\\projects\\adey\\front-end-main\\src\\views\\Rebates\\components\\DepositModal.tsx",["1394"],"import React, { useCallback, useMemo, useState } from 'react';\nimport styled from 'styled-components';\n\nimport { Button } from '@material-ui/core';\nimport Modal, { ModalProps } from '../../../components/Modal';\nimport ModalActions from '../../../components/ModalActions';\nimport ModalTitle from '../../../components/ModalTitle';\nimport TokenInput from '../../../components/TokenInput';\nimport useRebateTreasury from \"../../../hooks/useRebateTreasury\"\nimport useTombFinance from '../../../hooks/useGrapeFinance';\nimport useFantomPrice from '../../../hooks/useFantomPrice';\nimport useTombStats from '../../../hooks/useWineStats';\n\nimport { getFullDisplayBalance } from '../../../utils/formatBalance';\nimport { BigNumber } from 'ethers';\n\n\n\n\ninterface DepositModalProps extends ModalProps {\n  max: BigNumber;\n  onConfirm: (amount: Number) => void;\n  tokenName?: string;\n  token?: any;\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '', token }) => {\n  const tombStats = useTombStats();\n  const [val, setVal] = useState('');\n\n  const tombFinance = useTombFinance();\n  const rebateStats = useRebateTreasury();\n  const { price: ftmPrice} = useFantomPrice();\n  \n  const tombPriceInDollars = useMemo(\n    () => (tombStats ? Number(tombStats.priceInDollars).toFixed(2) : null),\n    [tombStats],\n  );\n\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max, 18);\n  }, [max, tokenName]);\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value);\n    },\n    [setVal],\n  );\n\n  const handleSelectMax = useCallback(() => {\n    setVal((rebateStats.tombAvailable > +fullBalance ? fullBalance : fullBalance));\n  }, [fullBalance, setVal, rebateStats]);\n\n  function getAssetPrice(token: String) {\n    const address = tombFinance.externalTokens[tokenName].address\n    const assetPrice = rebateStats.assets.find((a: any) => a.token === address).price\n    return assetPrice\n  }\n\n  function getOutAmount() {\n    const toBondPrice = getAssetPrice(tokenName)\n    const outAmount = +val * (toBondPrice / rebateStats.tombPrice * (1 + (rebateStats.bondPremium / 100)) * (token.params.multiplier / 1000000))\n    return outAmount\n  }\n\n  function formatOutAmount() {\n    const outAmount = getOutAmount()\n    return `Receiving: ${outAmount.toFixed(4)} WINE ($${(outAmount * Number(tombPriceInDollars)).toFixed(2)})`\n  }\n\n  function formatInAmount() {\n    return `Input: ${(+val).toFixed(4)} ${tokenName} ($${((+val) * getAssetPrice(tokenName) * ftmPrice).toFixed(2)})`\n  }\n\n  return (\n    <Modal>\n      <ModalTitle text={`Bond ${tokenName}`} />\n      <TokenInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n      />\n      <StyledMaxText style={{marginTop: \"14px\"}}>\n        { formatInAmount() }\n      </StyledMaxText>\n      <StyledMaxText>\n        { formatOutAmount() }\n      </StyledMaxText>\n      <StyledMaxText>\n         Estimated Return: {((((getOutAmount() * Number(tombPriceInDollars)) - ((+val) * getAssetPrice(tokenName) * ftmPrice))/((+val) * getAssetPrice(tokenName) * ftmPrice))*100).toFixed(2)}%\n      </StyledMaxText>\n      <StyledMaxText style = {{color: getOutAmount() < rebateStats.tombAvailable ? \"white\" : \"var(--accent)\"}}>\n        {rebateStats.tombAvailable > 0 ? `${rebateStats.tombAvailable.toFixed(4)} Wine Available` : \"Wine Sold Out\"}\n      </StyledMaxText>\n      <ModalActions>\n        <Button color={ (getOutAmount() < rebateStats.tombAvailable ? \"primary\" : \"secondary\") } variant=\"contained\" disabled = { getOutAmount() >= rebateStats.tombAvailable } onClick={() => onConfirm(+val)}>\n          Confirm\n        </Button>\n      </ModalActions>\n    </Modal>\n  );\n};\n\nconst StyledMaxText = styled.div`\n  align-items: center;\n  color: ${(props) => props.theme.color.grey[600]};\n  display: flex;\n  font-size: 18px;\n  margin-top: 2px;\n  font-weight: 700;\n  justify-content: flex-start;\n`;\n\n\nexport default DepositModal;\n","E:\\projects\\adey\\front-end-main\\src\\views\\Bond\\BondEstimatorModal.js",["1395"],"import { Modal, Grid, GridItem, Box, Typography, makeStyles } from '@material-ui/core';\nimport React, { useEffect, useState } from 'react';\nimport CloseIcon from '@material-ui/icons/Close';\n\nconst useStyles = makeStyles((theme) => ({\n  textField: {\n    color: 'black',\n    '& *': {\n      color: 'black',\n    },\n  },\n  text: {\n    fontSize: '14px',\n  },\n  subTitle: {\n    color: '#fff',\n    fontSize: '14px',\n    fontWeight: 'bold',\n  },\n  greenText: {\n    color: '#36d846',\n    fontSize: '14px',\n  },\n  inputButton: {\n    marginLeft: '8px',\n    fontSize: '12px',\n    borderRadius: '4px',\n    background: '#0c7aca',\n    border: 'none',\n    outline: 'none',\n    padding: '0px 4px',\n    lineHeight: '24px',\n    color: 'white',\n    cursor: 'pointer',\n  },\n  input: {\n    appearance: 'none',\n    border: 'none',\n    outline: 'none',\n    padding: 'none',\n    width: '100%',\n    paddingBlock: '5px',\n    backgroundColor: 'transparent',\n    '&::-webkit-outer-spin-button, &::-webkit-inner-spin-button': {\n      WebkitAppearance: 'none',\n    },\n    '&[type=number]': {\n      MozAppearance: 'none',\n    },\n  },\n}));\n\nconst style = {\n  position: 'absolute',\n  top: '50%',\n  color: '#fff',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  width: 'min(90%, 450px)',\n  bgcolor: 'rgba(0,0,0,0.8)',\n  p: '24px',\n  display: 'flex',\n  flexDirection: 'column',\n  outline: 'none',\n  boxSizing: 'border-box',\n  borderRadius: '12px',\n};\n\nconst BondEstimatorModal = ({ open, walletBondAmount, handleClose }) => {\n  const [bondAmount, setBondAmount] = useState(walletBondAmount);\n  const [twap, setTwap] = useState(1.1);\n\n  const classes = useStyles();\n\n  const [ratio, setRatio] = useState(1);\n  const [grapeRedeemed, setGrapeRedeemed] = useState('1');\n\n  const updateCalculation = (bondAmount, twap) => {\n    const coeff = 0.7;\n    const ratio = 1 + (Number(twap) - 1) * coeff;\n    setRatio(ratio.toFixed(3));\n    setGrapeRedeemed((Number(bondAmount) * ratio).toFixed(2));\n  };\n\n  useEffect(() => {\n    updateCalculation(bondAmount, twap);\n  }, [open, walletBondAmount, handleClose, bondAmount, twap]);\n\n  return (\n    <Modal open={open}>\n      <Box sx={style}>\n        <Box\n          sx={{\n            display: 'flex',\n            justifyContent: 'flex-end',\n          }}\n        >\n          <Box\n            sx={{\n              cursor: 'pointer',\n            }}\n            onClick={() => {\n              handleClose();\n              setBondAmount(walletBondAmount);\n            }}\n          >\n            <CloseIcon />\n          </Box>\n        </Box>\n        <Box\n          sx={{\n            display: 'flex',\n            flexDirection: 'column',\n          }}\n        >\n          <Typography className={classes.text}>Enter GBonds amount:</Typography>\n          <Box\n            sx={{\n              borderRadius: '10px',\n              bgcolor: '#eff2f4',\n              border: '1px solid #d0d3d4',\n              p: '10px',\n              mt: '10px',\n            }}\n          >\n            <Box\n              sx={{\n                display: 'flex',\n                flexDirection: 'row',\n                alignItems: 'center',\n                mb: '10px',\n              }}\n            >\n              <input\n                type=\"text\"\n                value={bondAmount}\n                className={classes.input}\n                onChange={(e) => {\n                  setBondAmount(e.target.value);\n                  // updateCalculation(e.target.value, twap);\n                }}\n              />\n            </Box>\n          </Box>\n        </Box>\n        <Box\n          mt={1}\n          sx={{\n            display: 'flex',\n            flexDirection: 'column',\n          }}\n        >\n          <Typography className={classes.text}>Enter Grape TWAP:</Typography>\n          <Box\n            sx={{\n              borderRadius: '10px',\n              bgcolor: '#eff2f4',\n              border: '1px solid #d0d3d4',\n              p: '10px',\n              mt: '10px',\n            }}\n          >\n            <Box\n              sx={{\n                display: 'flex',\n                flexDirection: 'row',\n                alignItems: 'center',\n                mb: '10px',\n              }}\n            >\n              <input\n                type=\"number\"\n                value={twap}\n                className={classes.input}\n                onChange={(e) => {\n                  setTwap(e.target.value);\n                  // updateCalculation(bondAmount, e.target.value);\n                }}\n              />\n            </Box>\n          </Box>\n        </Box>\n        <Box mt={3}>\n          <Grid container direction=\"column\">\n            <Grid item>\n              <Grid container justifyContent=\"space-between\">\n                <Grid item>TWAP</Grid>\n                <Grid item>\n                  <b>{twap}</b>\n                </Grid>\n              </Grid>\n            </Grid>\n            <Grid item>\n              <Grid container justifyContent=\"space-between\">\n                <Grid item>GBonds amount</Grid>\n                <Grid item>\n                  <b>{Number(bondAmount).toFixed(2)}</b>\n                </Grid>\n              </Grid>\n            </Grid>\n            <Grid item>\n              <Grid container style={{ color: '#212652' }} justifyContent=\"space-between\">\n                <Grid item>Ratio</Grid>\n                <Grid item>\n                  <b>1 / {ratio}</b>\n                </Grid>\n              </Grid>\n            </Grid>\n            <Grid item>\n              <Grid container style={{ color: '#212652' }} justifyContent=\"space-between\">\n                <Grid item>Grapes redeemed</Grid>\n                <Grid item>\n                  <b>{grapeRedeemed}</b>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Box>\n      </Box>\n    </Modal>\n  );\n};\n\nexport default BondEstimatorModal;\n","E:\\projects\\adey\\front-end-main\\src\\views\\Dashboard\\DashboardBoardroomCard.js",["1396"],"import React, { useMemo } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Card, CardContent, Paper, Typography, Grid } from '@material-ui/core';\n\nimport TokenSymbol from '../../components/TokenSymbol';\n\nimport { getDisplayBalance } from '../../utils/formatBalance';\n\nimport useGrapeStats from '../../hooks/useGrapeStats';\nimport useGrapeFinance from '../../hooks/useGrapeFinance';\nimport useFetchBoardroomAPR from '../../hooks/useFetchBoardroomAPR';\nimport useStakedTokenPriceInDollars from '../../hooks/useStakedTokenPriceInDollars';\nimport useTotalStakedOnBoardroom from '../../hooks/useTotalStakedOnBoardroom';\nimport useEarningsOnBoardroom from '../../hooks/useEarningsOnBoardroom';\nimport useHarvestFromBoardroom from '../../hooks/useHarvestFromBoardroom';\nimport useClaimRewardCheck from '../../hooks/boardroom/useClaimRewardCheck';\nimport useStakedBalanceOnBoardroom from '../../hooks/useStakedBalanceOnBoardroom';\nimport ReactTooltip from 'react-tooltip';\nimport rewards from '../../assets/jsons/rewards.json';\n\nconst DashboardBoardroomCard = () => {\n  const { onReward } = useHarvestFromBoardroom();\n  const earnings = useEarningsOnBoardroom();\n  const canClaimReward = useClaimRewardCheck();\n  const grapeStats = useGrapeStats();\n  const tokenPriceInDollars = useMemo(\n    () => (grapeStats ? Number(grapeStats.priceInDollars).toFixed(2) : null),\n    [grapeStats],\n  );\n  const earnedInToken = Number(getDisplayBalance(earnings));\n  const earnedInDollars = (Number(tokenPriceInDollars) * earnedInToken).toFixed(2);\n\n  const boardroomAPR = useFetchBoardroomAPR();\n  const totalStaked = useTotalStakedOnBoardroom();\n  const stake = Number(getDisplayBalance(totalStaked)).toFixed(0);\n  const grapeFinance = useGrapeFinance();\n  const stakedTokenPriceInDollars = useStakedTokenPriceInDollars('AKSHARE', grapeFinance.WINE);\n  const tvl = stake * stakedTokenPriceInDollars;\n\n  const stakedBalance = useStakedBalanceOnBoardroom();\n  const stakedInToken = Number(getDisplayBalance(stakedBalance));\n  const stakedInDollars = (Number(stakedTokenPriceInDollars) * stakedInToken).toFixed(2);\n\n  return (\n    <Grid item xs={12} sm={12} md={6} lg={4}>\n      <Card>\n        <CardContent>\n          <Grid container style={{ position: 'relative' }} spacing={1}>\n            <Grid\n              item\n              xs={4}\n              sm={3}\n              md={3}\n              lg={3}\n              style={{ backgroundColor: 'rgba(255, 255, 255, 0.1)', borderTopLeftRadius: 5, borderBottomLeftRadius: 5 }}\n            >\n              <div style={{ padding: '5px' }}>\n                <TokenSymbol symbol=\"WINE\" height={70} width={70} />\n              </div>\n            </Grid>\n            <Grid\n              item\n              xs={8}\n              sm={9}\n              md={9}\n              lg={9}\n              style={{\n                paddingTop: '10px',\n                backgroundColor: 'rgba(255, 255, 255, 0.1)',\n                borderTopRightRadius: 5,\n                borderBottomRightRadius: 5,\n              }}\n            >\n              <Grid container direction=\"column\">\n                <Grid item>\n                  <Typography color=\"textPrimary\" variant=\"h5\">\n                    Wine\n                  </Typography>\n                  <Typography color=\"textSecondary\">\n                    <span>Earn GRAPE</span>\n                  </Typography>\n                </Grid>\n              </Grid>\n            </Grid>\n\n            <Grid item style={{ marginTop: 5 }}>\n              <h5 style={{ padding: 0, margin: 0 }}>Winery stats</h5>\n            </Grid>\n            <Grid item xs={12} md={12} lg={12}>\n              <Grid container justifyContent=\"space-between\">\n                <Grid item>\n                  <span className=\"card-info-text\">TVL</span>\n                </Grid>\n                <Grid item>\n                  <b className={'info-card-price'}>\n                    {' '}\n                    ${tvl ? Number(Number(tvl).toFixed(0)).toLocaleString('en-US') : '-.--'}\n                  </b>\n                </Grid>\n              </Grid>\n            </Grid>\n            <Grid item xs={12} md={12} lg={12}>\n              <Grid container alignItems=\"baseline\" justifyContent=\"space-between\">\n                <Grid item>\n                  <span className=\"card-info-text\">APR</span>\n                </Grid>\n                <Grid item>\n                  <span className=\"info-card-price\">{boardroomAPR.toFixed(0)}%</span>\n                </Grid>\n              </Grid>\n            </Grid>\n            <Grid item xs={12} md={12} lg={12}>\n              <Grid container alignItems=\"baseline\" justifyContent=\"space-between\">\n                <Grid item>\n                  <span className=\"card-info-text\">Daily</span>\n                </Grid>\n                <Grid item>\n                  <span className=\"info-card-price\">{(boardroomAPR / 365).toFixed(2)}%</span>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n\n          <Grid container direction=\"column\" spacing={1}>\n            <Grid item style={{ marginTop: 15 }}>\n              <h5 style={{ padding: 0, margin: 0 }}>Your stats</h5>\n            </Grid>\n            <Grid item>\n              <Grid container justifyContent=\"space-between\">\n                <Grid item>\n                  <span className=\"card-info-text\">Staked</span>\n                </Grid>\n                <Grid item>\n                  <b\n                    className={stakedInToken > 0 ? 'card-info-value' : 'card-info-value grey-text'}\n                  >{`${stakedInToken} WINE`}</b>\n                </Grid>\n              </Grid>\n            </Grid>\n            <Grid item>\n              <Grid container justifyContent=\"space-between\">\n                <Grid item>\n                  <span className=\"card-info-text\">Value $</span>\n                </Grid>\n                <Grid item>\n                  <b className={stakedInToken > 0 ? 'card-info-value' : 'card-info-value grey-text'}>\n                    ≈${Number(stakedInDollars).toLocaleString('en-US')}\n                  </b>\n                </Grid>\n              </Grid>\n            </Grid>\n            <Grid item>\n              <Grid container justifyContent=\"space-between\">\n                <Grid item>\n                  <span className=\"card-info-text\">Earned</span>\n                </Grid>\n                <Grid item>\n                  <b\n                    className={stakedInToken > 0 ? 'card-info-value' : 'card-info-value grey-text'}\n                  >{`${earnedInToken} GRAPE`}</b>\n                </Grid>\n              </Grid>\n            </Grid>\n            <Grid item>\n              <Grid container justifyContent=\"space-between\">\n                <Grid item>\n                  <span className=\"card-info-text\">Earned $</span>\n                </Grid>\n                <Grid item>\n                  <b className={stakedInToken > 0 ? 'card-info-value' : 'card-info-value grey-text'}>\n                    ≈${Number(earnedInDollars).toLocaleString('en-US')}\n                  </b>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid container spacing={1} style={{ marginTop: '10px' }}>\n            <Grid item className=\"card-price-item\" xs={5}>\n              <Button component={Link} to={`/winery`} className=\"shinyButton\" style={{ width: '100%' }}>\n                View\n              </Button>\n            </Grid>\n            <Grid item className=\"card-price-item\" xs={5}>\n              <Button\n                className={earnings.eq(0) || !canClaimReward ? 'shinyButtonDisabled' : 'shinyButton'}\n                disabled={earnings.eq(0) || !canClaimReward}\n                onClick={onReward}\n                style={{ width: '100%' }}\n              >\n                Claim\n              </Button>\n            </Grid>\n            <Grid item xs={2}>\n              <span\n                style={{\n                  color: 'white',\n                  display: 'block',\n                  borderRadius: '4px',\n                  height: '100%',\n                  background: '#e647e6',\n                  textAlign: 'center',\n                  fontSize: '25px',\n                  cursor: 'pointer',\n                }}\n                data-for=\"wine-tooltip\"\n                data-tip={rewards['GRAPE']}\n              >\n                ?\n              </span>\n              <ReactTooltip id=\"wine-tooltip\" effect=\"solid\" multiline />\n            </Grid>\n          </Grid>\n        </CardContent>\n      </Card>\n    </Grid>\n  );\n};\n\nexport default DashboardBoardroomCard;\n","E:\\projects\\adey\\front-end-main\\src\\views\\Dashboard\\DashboardInfoCardNodes.js",[],"E:\\projects\\adey\\front-end-main\\src\\views\\Vineyard\\FarmCard.js",[],"E:\\projects\\adey\\front-end-main\\src\\0x.ts",[],"E:\\projects\\adey\\front-end-main\\src\\hooks\\useBondsPurchasable.ts",[],"E:\\projects\\adey\\front-end-main\\src\\hooks\\useCashPriceInLastTWAP.ts",[],"E:\\projects\\adey\\front-end-main\\src\\hooks\\useCompoundAll.ts",["1397"],"import {useCallback} from 'react';\nimport useGrapeFinance from './useGrapeFinance';\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\nimport {Bank} from '../grape-finance';\nimport useEarningsAll from './useEarningsAll';\n\nconst useCompoundAll = (banks: Bank[]) => {\n  const grapeFinance = useGrapeFinance();\n  const earnings = useEarningsAll(banks);\n  const handleTransactionReceipt = useHandleTransactionReceipt();\n\n  const handleReward = useCallback(async () => {\n    let nodesToCompound = []\n    for (let i = 0; i < banks.length; i++) {\n      const bank = banks[i]\n      const nodePrice = await grapeFinance.getNodePrice(bank.contract, bank.poolId)\n      const nodeEarnings = earnings.get(`${bank.contract}-${bank.poolId}`)\n      if (!nodeEarnings.eq(0) && Number(nodeEarnings) >= Number(nodePrice)) {\n        nodesToCompound.push(bank)\n      }\n    }\n    Promise.all(\n      nodesToCompound\n        .map((bank: Bank) => {\n          handleTransactionReceipt(\n            grapeFinance.compound(bank.contract, bank.poolId, bank.sectionInUI),\n            `Compound ${bank.earnTokenName} from ${bank.contract}`,\n          );\n        }),\n    );\n  }, [banks, earnings, grapeFinance, handleTransactionReceipt]);\n\n  return handleReward;\n};\n\nexport default useCompoundAll;\n","E:\\projects\\adey\\front-end-main\\src\\hooks\\useWinepressUserInfo.ts",[],"E:\\projects\\adey\\front-end-main\\src\\hooks\\useBondStats.ts",[],"E:\\projects\\adey\\front-end-main\\src\\hooks\\useHarvestAll.ts",["1398"],"import {useCallback} from 'react';\nimport useGrapeFinance from './useGrapeFinance';\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\nimport {Bank} from '../grape-finance';\nimport useEarningsAll from './useEarningsAll';\n\nconst useHarvestAll = (banks: Bank[]) => {\n  const grapeFinance = useGrapeFinance();\n  const earnings = useEarningsAll(banks);\n  const handleTransactionReceipt = useHandleTransactionReceipt();\n\n  const handleReward = useCallback(async () => {\n    Promise.all(\n      banks\n        .filter((bank: Bank) => !earnings.get(`${bank.contract}-${bank.poolId}`).eq(0))\n        .map((bank: Bank) => {\n          console.log('claiming '+ bank.contract)\n          handleTransactionReceipt(\n            grapeFinance.harvest(bank.contract, bank.poolId, bank.sectionInUI),\n            `Claim ${bank.earnTokenName} from ${bank.contract}`,\n          );\n        }),\n    );\n  }, [banks, earnings, grapeFinance, handleTransactionReceipt]);\n\n  return handleReward;\n};\n\nexport default useHarvestAll;\n","E:\\projects\\adey\\front-end-main\\src\\hooks\\useWalletStats.ts",["1399"],"import {useEffect, useState} from 'react';\nimport useGrapeFinance from './useGrapeFinance';\nimport {Bank, WalletStats} from '../grape-finance/types';\nimport useRefresh from './useRefresh';\n\nconst useWalletStats = (banks: Bank[]) => {\n  const [stat, setStat] = useState<WalletStats>();\n  const {fastRefresh} = useRefresh();\n  const grapeFinance = useGrapeFinance();\n\n  useEffect(() => {\n    async function fetchWalletStats() {\n      try {\n        setStat(await grapeFinance.getWalletStats(banks));\n      } catch (err) {\n        console.error(err);\n      }\n    }\n    fetchWalletStats();\n  }, [setStat, grapeFinance, fastRefresh]);\n\n  return stat;\n};\n\nexport default useWalletStats;\n","E:\\projects\\adey\\front-end-main\\src\\hooks\\useTreasuryAllocationTimes.ts",[],"E:\\projects\\adey\\front-end-main\\src\\grape-finance\\constants.ts",[],"E:\\projects\\adey\\front-end-main\\src\\hooks\\useGetBoardroomPrintRate.ts",[],"E:\\projects\\adey\\front-end-main\\src\\hooks\\useTotalStakedOnBoardroom.ts",[],"E:\\projects\\adey\\front-end-main\\src\\hooks\\useFetchBoardroomAPR.ts",[],"E:\\projects\\adey\\front-end-main\\src\\hooks\\useCurrentEpoch.ts",[],"E:\\projects\\adey\\front-end-main\\src\\hooks\\useStakedBalanceOnBoardroom.ts",[],"E:\\projects\\adey\\front-end-main\\src\\hooks\\useRedeemOnBoardroom.ts",[],"E:\\projects\\adey\\front-end-main\\src\\views\\Dashboard\\ProgressCountdown.tsx",[],"E:\\projects\\adey\\front-end-main\\src\\hooks\\boardroom\\useWithdrawCheck.ts",[],"E:\\projects\\adey\\front-end-main\\src\\hooks\\boardroom\\useClaimRewardCheck.ts",[],"E:\\projects\\adey\\front-end-main\\src\\views\\Bond\\components\\ExchangeCard.tsx",["1400"],"import React from 'react';\nimport styled from 'styled-components';\n\nimport { Button, Card } from '@material-ui/core';\n\n// import Button from '../../../components/Button';\n// import Card from '../../../components/Card';\nimport CardContent from '../../../components/CardContent';\nimport useGrapeFinance from '../../../hooks/useGrapeFinance';\nimport Label from '../../../components/Label';\nimport TokenSymbol from '../../../components/TokenSymbol';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowRight } from '@fortawesome/free-solid-svg-icons';\nimport useModal from '../../../hooks/useModal';\nimport ExchangeModal from './ExchangeModal';\nimport ERC20 from '../../../grape-finance/ERC20';\nimport useTokenBalance from '../../../hooks/useTokenBalance';\nimport useApprove, { ApprovalState } from '../../../hooks/useApprove';\nimport useCatchError from '../../../hooks/useCatchError';\n\ninterface ExchangeCardProps {\n  action: string;\n  fromToken: ERC20;\n  fromTokenName: string;\n  toToken: ERC20;\n  toTokenName: string;\n  priceDesc: string;\n  onExchange: (amount: string) => void;\n  disabled?: boolean;\n  disabledDescription?: string;\n}\n\nconst ExchangeCard: React.FC<ExchangeCardProps> = ({\n  action,\n  fromToken,\n  fromTokenName,\n  toToken,\n  toTokenName,\n  priceDesc,\n  onExchange,\n  disabled = false,\n  disabledDescription,\n}) => {\n  const catchError = useCatchError();\n  const {\n    contracts: { Treasury },\n  } = useGrapeFinance();\n  const [approveStatus, approve] = useApprove(fromToken, Treasury.address);\n\n  const balance = useTokenBalance(fromToken);\n  const [onPresent, onDismiss] = useModal(\n    <ExchangeModal\n      title={action}\n      description={priceDesc}\n      max={balance}\n      onConfirm={(value) => {\n        onExchange(value);\n        onDismiss();\n      }}\n      action={action}\n      tokenName={fromTokenName}\n    />,\n  );\n  return (\n    <Card style={{ boxShadow: 'none' }}>\n      <CardContent>\n        <StyledCardTitle>{`${action} ${toTokenName}`}</StyledCardTitle>\n        <StyledCardContentInner style={{ backgroundColor: '#212652', padding: '30px' }}>\n          <StyledExchanger>\n            <StyledToken>\n              <TokenSymbol width={55} height={50} symbol={fromToken.symbol} />\n              <Label text={fromTokenName} color=\"#fff\" />\n            </StyledToken>\n            <StyledExchangeArrow>\n              <FontAwesomeIcon icon={faArrowRight} />\n            </StyledExchangeArrow>\n            <StyledToken>\n              <TokenSymbol width={55} height={50} symbol={toToken.symbol} />\n              <Label text={toTokenName} color=\"#fff\" />\n            </StyledToken>\n          </StyledExchanger>\n          <StyledDesc style={{ textAlign: 'center' }}>{priceDesc}</StyledDesc>\n          <StyledCardActions style={{ textAlign: 'center' }}>\n            {approveStatus !== ApprovalState.APPROVED && !disabled ? (\n              <Button\n                className=\"shinyButton\"\n                disabled={approveStatus === ApprovalState.PENDING || approveStatus === ApprovalState.UNKNOWN}\n                onClick={() => catchError(approve(), `Unable to approve ${fromTokenName}`)}\n              >\n                {`Approve ${fromTokenName}`}\n              </Button>\n            ) : (\n              <Button\n                className={disabled ? 'shinyButtonDisabled' : 'shinyButton'}\n                onClick={onPresent}\n                disabled={disabled}\n                style={{ color: 'black' }}\n              >\n                {disabledDescription || action}\n              </Button>\n            )}\n          </StyledCardActions>\n        </StyledCardContentInner>\n      </CardContent>\n    </Card>\n  );\n};\n\nconst StyledCardTitle = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 20px;\n  font-weight: 700;\n  height: 64px;\n  justify-content: center;\n  color: #ccf;\n  margin-top: ${(props) => -props.theme.spacing[3]}px;\n`;\n\nconst StyledCardIcon = styled.div`\n  background-color: rgba(0, 0, 0, 0.2);\n  width: 80px;\n  height: 80px;\n  border-radius: 36px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-bottom: ${(props) => props.theme.spacing[2]}px;\n`;\n\nconst StyledExchanger = styled.div`\n  align-items: center;\n  display: flex;\n  margin-bottom: ${(props) => props.theme.spacing[5]}px;\n`;\n\nconst StyledExchangeArrow = styled.div`\n  font-size: 20px;\n  padding-left: ${(props) => props.theme.spacing[3]}px;\n  padding-right: ${(props) => props.theme.spacing[3]}px;\n  padding-bottom: ${(props) => props.theme.spacing[4]}px;\n`;\n\nconst StyledToken = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  font-weight: 600;\n`;\n\nconst StyledCardActions = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-top: ${(props) => props.theme.spacing[3]}px;\n  width: 100%;\n`;\n\nconst StyledDesc = styled.span``;\n\nconst StyledCardContentInner = styled.div`\n  align-items: center;\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: space-between;\n`;\n\nexport default ExchangeCard;\n","E:\\projects\\adey\\front-end-main\\src\\views\\Bond\\components\\ExchangeStat.tsx",[],"E:\\projects\\adey\\front-end-main\\src\\views\\Home\\GetStartedModal.js",["1401"],"import {Modal, Box, makeStyles} from '@material-ui/core';\nimport React from 'react';\nimport CloseIcon from '@material-ui/icons/Close';\nimport getStartedImg from '../../assets/img/getStarted.jpg';\n\nconst style = {\n  position: 'absolute',\n  color: '#fff',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  minWidth: '450px',\n  bgcolor: 'rgba(0,0,0,0.8)',\n  p: '24px',\n  display: 'flex',\n  flexDirection: 'column',\n  outline: 'none',\n  boxSizing: 'border-box',\n  borderRadius: '12px',\n};\n\nconst AirdropRewardModal = ({open, handleClose}) => {\n  return (\n    <Modal open={open}>\n      <Box sx={style}>\n        <Box sx={{display: 'flex', justifyContent: 'flex-end'}}>\n          <Box\n            sx={{\n              cursor: 'pointer',\n            }}\n            onClick={() => {\n              handleClose();\n            }}\n          >\n            <CloseIcon />\n          </Box>\n        </Box>\n        <Box\n          sx={{\n            display: 'flex',\n            flexDirection: 'column',\n          }}\n        >\n          <img alt=\"get started\" src={getStartedImg} width=\"100%\" height=\"100%\" />\n        </Box>\n      </Box>\n    </Modal>\n  );\n};\n\nexport default AirdropRewardModal;\n","E:\\projects\\adey\\front-end-main\\src\\views\\Home\\AirdropRewardModal.js",["1402"],"import { Modal, Box, Typography, makeStyles, CircularProgress } from '@material-ui/core';\nimport React, { useState, useMemo, useEffect } from 'react';\nimport CloseIcon from '@material-ui/icons/Close';\nimport useGrapeFinance from '../../hooks/useGrapeFinance';\nimport useWalletNodesAndNFTs from '../../hooks/useWalletNodesAndNFTs';\nimport {\n  NFT_TICKET_COUNT,\n  GRAPE_NODE_MULTIPLIER,\n  WINE_NODE_MULTIPLIER,\n  GRAPEMIMSW_NODE_MULTIPLIER,\n  GOON_MULTIPLIER,\n  GLASS_MULTIPLIER,\n  DECANTER_MULTIPLIER,\n  GOBLET_MULTIPLIER,\n} from '../../utils/constants';\n\nconst useStyles = makeStyles((theme) => ({\n  textField: {\n    color: 'black',\n    '& *': {\n      color: 'black',\n    },\n  },\n  text: {\n    fontSize: '14px',\n  },\n  biggerText: {\n    fontSize: '15px',\n  },\n  purpleText: {\n    fontSize: '16px',\n    color: '#212652',\n  },\n  noEligible: {\n    fontSize: '16px',\n    color: 'red',\n  },\n  subTitle: {\n    color: '#0a274280',\n    fontSize: '14px',\n    fontWeight: 'bold',\n  },\n  greenText: {\n    color: '#36d846',\n    fontSize: '14px',\n  },\n  inputButton: {\n    marginLeft: '8px',\n    fontSize: '12px',\n    borderRadius: '4px',\n    background: '#0c7aca',\n    border: 'none',\n    outline: 'none',\n    padding: '0px 4px',\n    lineHeight: '24px',\n    color: 'white',\n    cursor: 'pointer',\n  },\n  input: {\n    appearance: 'none',\n    fontSize: '20px',\n    border: 'none',\n    outline: 'none',\n    padding: 'none',\n    width: '100%',\n    paddingBlock: '5px',\n    backgroundColor: 'transparent',\n    '&::-webkit-outer-spin-button, &::-webkit-inner-spin-button': {\n      WebkitAppearance: 'none',\n    },\n    '&[type=number]': {\n      MozAppearance: 'none',\n    },\n  },\n}));\n\nconst style = {\n  position: 'absolute',\n  color: '#fff',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  width: 'min(90%, 450px)',\n  bgcolor: 'rgba(0,0,0,0.8)',\n  p: '24px',\n  display: 'flex',\n  flexDirection: 'column',\n  outline: 'none',\n  boxSizing: 'border-box',\n  borderRadius: '12px',\n};\n\nconst AirdropRewardModal = ({\n  open,\n  handleClose,\n  grapes,\n  grapePrice,\n  wines,\n  winePrice,\n  grapeMimSW,\n  grapeMimSWPrice,\n  totalGrapes,\n  totalWine,\n  totalGrapeMimSW,\n}) => {\n  const grapeFinance = useGrapeFinance();\n  const [ticketNumber, setTicketNumber] = useState(1);\n  const [manualEntry, setManualEntry] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  const useWalletsNodesAndNFTs = useWalletNodesAndNFTs();\n  const walletNodesAndNFTs = useMemo(() => {\n    setLoading(grapeFinance?.myAccount && !useWalletsNodesAndNFTs);\n\n    if (useWalletsNodesAndNFTs && manualEntry === false) {\n      setLoading(false);\n      setTicketNumber(\n        useWalletsNodesAndNFTs.grapes * GRAPE_NODE_MULTIPLIER +\n          useWalletsNodesAndNFTs.wines * WINE_NODE_MULTIPLIER +\n          useWalletsNodesAndNFTs.grapeMimSWs * GRAPEMIMSW_NODE_MULTIPLIER +\n          useWalletsNodesAndNFTs.goonBags * GOON_MULTIPLIER +\n          useWalletsNodesAndNFTs.glasses * GLASS_MULTIPLIER +\n          useWalletsNodesAndNFTs.decanters * DECANTER_MULTIPLIER +\n          useWalletsNodesAndNFTs.goblets * GOBLET_MULTIPLIER,\n      );\n    }\n    return useWalletsNodesAndNFTs;\n  }, [useWalletsNodesAndNFTs, manualEntry, grapeFinance.myAccount]);\n\n  const classes = useStyles();\n\n  const getNumberOfNodes = (coin) => {\n    if (coin === 'AKUSD') {\n      return Number(grapes);\n    } else if (coin === 'AKSHARE') {\n      return Number(wines);\n    } else if (coin === 'AKUSD-BUSD SW') {\n      return Number(grapeMimSW);\n    }\n  };\n\n  const getPriceForNodes = (coin) => {\n    if (coin === 'AKUSD') {\n      return Number((totalGrapes * grapePrice).toFixed(0));\n    } else if (coin === 'AKSHARE') {\n      return Number((totalWine * winePrice).toFixed(0));\n    } else if (coin === 'AKUSD-BUSD SW') {\n      return Number((totalGrapeMimSW * grapeMimSWPrice).toFixed(0));\n    }\n  };\n\n  const getTotalPriceForNodes = () => {\n    return getPriceForNodes('AKUSD') + getPriceForNodes('AKSHARE') + getPriceForNodes('AKUSD-BUSD SW');\n  };\n\n  const getShareDollarValue = () => {\n    return Number(((ticketNumber * getTotalPriceForNodes()) / (getTotalTicketsFromNodes() + 9600)).toFixed(0));\n  };\n\n  const getShareGrapes = () => {\n    return Number((ticketNumber * totalGrapes) / (getTotalTicketsFromNodes() + NFT_TICKET_COUNT)).toFixed(2);\n  };\n\n  const getShareWines = () => {\n    return Number((ticketNumber * totalWine) / (getTotalTicketsFromNodes() + NFT_TICKET_COUNT)).toFixed(2);\n  };\n\n  // const getShareGrapeMimSW = () => {\n  //   return Number((ticketNumber * totalGrapeMimSW) / (getTotalTicketsFromNodes() + NFT_TICKET_COUNT)).toFixed(2);\n  // }\n\n  const elibileToAirdrop = () => {\n    if (!grapeFinance?.myAccount || manualEntry === true) {\n      return true;\n    }\n\n    return (\n      walletNodesAndNFTs &&\n      (walletNodesAndNFTs.goonBags > 0 ||\n        walletNodesAndNFTs.glasses > 0 ||\n        walletNodesAndNFTs.decanters > 0 ||\n        walletNodesAndNFTs.goblets > 0)\n    );\n  };\n\n  const getTotalTicketsFromNodes = () => {\n    return (\n      getNumberOfNodes('AKUSD') * GRAPE_NODE_MULTIPLIER +\n      getNumberOfNodes('AKSHARE') * WINE_NODE_MULTIPLIER +\n      getNumberOfNodes('AKUSD-BUSD SW') * GRAPEMIMSW_NODE_MULTIPLIER\n    );\n  };\n\n  return (\n    <Modal open={open}>\n      <Box sx={style}>\n        <Box sx={{ display: 'flex', justifyContent: 'flex-end' }}>\n          <Box\n            sx={{\n              cursor: 'pointer',\n            }}\n            onClick={() => {\n              setManualEntry(false);\n              setLoading(false);\n              handleClose();\n            }}\n          >\n            <CloseIcon />\n          </Box>\n        </Box>\n        <Box\n          sx={{\n            display: 'flex',\n            flexDirection: 'column',\n          }}\n        >\n          <h2 style={{ fontSize: '22px' }}>\n            Number of tickets\n            {loading && <CircularProgress style={{ marginLeft: '10px' }} size={22} color=\"inherit\" />}\n          </h2>\n          <Box\n            sx={{\n              borderRadius: '10px',\n              bgcolor: '#eff2f4',\n              border: '1px solid #d0d3d4',\n              p: '10px',\n              mt: '10px',\n            }}\n          >\n            <Box\n              sx={{\n                display: 'flex',\n                flexDirection: 'row',\n                alignItems: 'center',\n                mb: '10px',\n              }}\n            >\n              <input\n                type=\"number\"\n                value={ticketNumber}\n                className={classes.input}\n                onChange={(e) => {\n                  setManualEntry(true);\n                  setLoading(false);\n                  setTicketNumber(e.target.value);\n                }}\n              />{' '}\n              <br />\n            </Box>\n            <Box sx={{ fontStyle: 'italic', marginTop: '10px', fontSize: '11px', color: '#000' }}>\n              1 Grape node gives {GRAPE_NODE_MULTIPLIER} ticket.\n              {walletNodesAndNFTs && <b>You have {walletNodesAndNFTs.grapes} Grape Nodes.</b>}\n              <br />1 Wine node gives {WINE_NODE_MULTIPLIER} tickets.\n              {walletNodesAndNFTs && <b>You have {walletNodesAndNFTs.wines} Wine Nodes.</b>}\n              <br />1 AKUSD-BUSD SW node gives {GRAPEMIMSW_NODE_MULTIPLIER} ticket.\n              {walletNodesAndNFTs && <b>You have {walletNodesAndNFTs.grapeMimSWs} AKUSD-BUSD SW Nodes.</b>}\n              <br />1 Goon Bag gives {GOON_MULTIPLIER} ticket.\n              {walletNodesAndNFTs && <b>You have {walletNodesAndNFTs.goonBags} Goon Bag(s).</b>}\n              <br />1 Glass gives {GLASS_MULTIPLIER} tickets.\n              {walletNodesAndNFTs && <b>You have {walletNodesAndNFTs.glasses} Glass(es).</b>}\n              <br />1 Decanter gives {DECANTER_MULTIPLIER} tickets.\n              {walletNodesAndNFTs && <b>You have {walletNodesAndNFTs.decanters} Decanter(s).</b>}\n              <br />1 Goblet gives {GOBLET_MULTIPLIER} tickets.\n              {walletNodesAndNFTs && <b>You have {walletNodesAndNFTs.goblets} Goblet(s).</b>}\n              <br />\n            </Box>\n          </Box>\n          <Box\n            sx={{\n              display: 'flex',\n              flexDirection: 'column',\n              marginTop: '20px',\n            }}\n          >\n            <Box>\n              <h2 style={{ fontSize: '22px' }}>Details</h2>\n              <Typography className={classes.text}>\n                {getNumberOfNodes('AKUSD')} Grape Nodes ({totalGrapes} Grapes in pool)\n              </Typography>\n              <Typography className={classes.text}>\n                {getNumberOfNodes('AKSHARE')} Wine Nodes ({totalWine} Wine in pool){' '}\n              </Typography>\n              <Typography className={classes.text}>{getNumberOfNodes('AKUSD-BUSD SW')} AKUSD-BUSD SW Nodes</Typography>\n\n              <Box sx={{ marginTop: '10px' }} className={classes.text}>\n                Tickets from Nodes: {getTotalTicketsFromNodes()}\n              </Box>\n              <Typography className={classes.text}>Tickets from NFTs: {NFT_TICKET_COUNT}</Typography>\n              <Typography className={classes.biggerText}>\n                <b>TOTAL TICKETS: {getTotalTicketsFromNodes() + NFT_TICKET_COUNT}</b>\n              </Typography>\n\n              <h2 sx={{ marginTop: '20px' }} style={{ fontSize: '22px' }}>\n                Results\n              </h2>\n              {!elibileToAirdrop() ? (\n                <Typography className={classes.noEligible}>\n                  You are not eligible to the NFT monthly airdrop. You need to own at least 1 Winery Collection NFT (any\n                  kind) and at least 1 node (any kind). If you were eligible, you would get:\n                </Typography>\n              ) : (\n                <Box className={classes.purpleText}>\n                  <b>\n                    At current prices, your {ticketNumber} tickets are worth ≈${getShareDollarValue()}\n                  </b>\n                </Box>\n              )}\n              <div>\n                <Typography className={classes.text}>≈{getShareGrapes()} Grape(s)</Typography>\n                <Typography className={classes.text}>≈{getShareWines()} Wine(s)</Typography>\n              </div>\n\n              <Box sx={{ fontStyle: 'italic', marginTop: '10px', fontSize: '11px' }}>\n                Please note that the numbers are only an estimation, they are based upon the current balance of the\n                reward pool and the current prices. They also estimate that all NFTs are held by node holders. Do not\n                consider the results as your final reward amount.\n              </Box>\n            </Box>\n          </Box>\n        </Box>\n      </Box>\n    </Modal>\n  );\n};\n\nexport default AirdropRewardModal;\n","E:\\projects\\adey\\front-end-main\\src\\views\\Winery\\components\\ProgressCountdown.tsx",[],"E:\\projects\\adey\\front-end-main\\src\\views\\Winery\\components\\Stake.tsx",["1403","1404","1405","1406","1407","1408","1409"],"import React, { useMemo } from 'react';\nimport styled from 'styled-components';\n\nimport { Box, Button, Grid, Card, CardContent, Typography } from '@material-ui/core';\n\n// import Button from '../../../components/Button';\n// import Card from '../../../components/Card';\n// import CardContent from '../../../components/CardContent';\nimport CardIcon from '../../../components/CardIcon';\nimport { AddIcon, RemoveIcon } from '../../../components/icons';\nimport IconButton from '../../../components/IconButton';\nimport Label from '../../../components/Label';\nimport Value from '../../../components/Value';\n\nimport useApprove, { ApprovalState } from '../../../hooks/useApprove';\nimport useModal from '../../../hooks/useModal';\nimport useTokenBalance from '../../../hooks/useTokenBalance';\nimport useWithdrawCheck from '../../../hooks/boardroom/useWithdrawCheck';\n\nimport { getDisplayBalance } from '../../../utils/formatBalance';\n\nimport DepositModal from './DepositModal';\nimport WithdrawModal from './WithdrawModal';\nimport useGrapeFinance from '../../../hooks/useGrapeFinance';\nimport ProgressCountdown from './ProgressCountdown';\nimport useStakedBalanceOnBoardroom from '../../../hooks/useStakedBalanceOnBoardroom';\nimport useStakedTokenPriceInDollars from '../../../hooks/useStakedTokenPriceInDollars';\nimport useUnstakeTimerBoardroom from '../../../hooks/boardroom/useUnstakeTimerBoardroom';\nimport TokenSymbol from '../../../components/TokenSymbol';\nimport useStakeToBoardroom from '../../../hooks/useStakeToBoardroom';\nimport useWithdrawFromBoardroom from '../../../hooks/useWithdrawFromBoardroom';\nimport nImg from '../../../assets/img/n-removebg-preview.png';\nimport zigImg from '../../../assets/img/zig-removebg-preview.png';\nimport roundImg from '../../../assets/img/round-removebg-preview.png';\nimport dotsyImg from '../../../assets/img/dotsy-removebg-preview.png';\n\nconst Stake: React.FC = () => {\n  const grapeFinance = useGrapeFinance();\n  const [approveStatus, approve] = useApprove(grapeFinance.WINE, grapeFinance.contracts.Boardroom.address);\n\n  const tokenBalance = useTokenBalance(grapeFinance.WINE);\n  const stakedBalance = useStakedBalanceOnBoardroom();\n  const { from, to } = useUnstakeTimerBoardroom();\n\n  const stakedTokenPriceInDollars = useStakedTokenPriceInDollars('AKSHARE', grapeFinance.WINE);\n\n  const tokenPriceInDollars = useMemo(\n    () =>\n      stakedTokenPriceInDollars\n        ? (Number(stakedTokenPriceInDollars) * Number(getDisplayBalance(stakedBalance))).toFixed(2).toString()\n        : null,\n    [stakedTokenPriceInDollars, stakedBalance],\n  );\n  // const isOldBoardroomMember = boardroomVersion !== 'latest';\n\n  const { onStake } = useStakeToBoardroom();\n  const { onWithdraw } = useWithdrawFromBoardroom();\n  const canWithdrawFromBoardroom = useWithdrawCheck();\n\n  const [onPresentDeposit, onDismissDeposit] = useModal(\n    <DepositModal\n      max={tokenBalance}\n      onConfirm={(value) => {\n        onStake(value);\n        onDismissDeposit();\n      }}\n      tokenName={'AKSHARE'}\n    />,\n  );\n\n  const [onPresentWithdraw, onDismissWithdraw] = useModal(\n    <WithdrawModal\n      max={stakedBalance}\n      onConfirm={(value) => {\n        onWithdraw(value);\n        onDismissWithdraw();\n      }}\n      tokenName={'AKSHARE'}\n    />,\n  );\n\n  return (\n    <>\n      <Grid style={{ textAlign: 'center', zIndex: 1000 }}>\n        <TokenSymbol height={70} width={70} symbol=\"AKSHARE\" />\n      </Grid>\n      <Grid\n        style={{\n          background: 'white',\n          border: '1px solid black',\n          borderRadius: '200px',\n          textAlign: 'center',\n          marginTop: '-20px',\n          zIndex: 100,\n        }}\n      >\n        <Typography variant=\"h4\" style={{ color: '#225D14' }}>\n          AKSHARE\n        </Typography>\n        <Grid container justifyContent=\"space-between\" style={{ padding: '0px 20px', marginTop: '-10px' }}>\n          <img src={nImg} width=\"23%\" />\n          <img src={zigImg} width=\"23%\" />\n          <img src={roundImg} width=\"23%\" />\n          <img src={dotsyImg} width=\"23%\" />\n        </Grid>\n      </Grid>\n      <Box>\n        <Card style={{ marginTop: '-30px', boxShadow: 'none' }}>\n          <CardContent>\n            <StyledCardContentInner style={{ boxShadow: '0px 0px 2px 0px black', margin: '-10px 20px' }}>\n              <div\n                style={{\n                  width: 0,\n                  height: 0,\n                  borderTop: '90px solid #212652',\n                  borderBottom: '10px solid transparent',\n                  borderLeft: '50px solid transparent',\n                  borderRight: '50px solid transparent',\n                  zIndex: 1,\n                }}\n              ></div>\n              <StyledCardHeader>\n                <Typography variant=\"h5\" style={{ color: '#212652' }}>\n                  AKSHARE: STAKED\n                </Typography>\n                <Typography variant=\"h5\" style={{ color: '#212652' }}>{`$${Number(tokenPriceInDollars).toLocaleString(\n                  'en-US',\n                )}`}</Typography>\n              </StyledCardHeader>\n              <StyledCardActions>\n                {approveStatus !== ApprovalState.APPROVED ? (\n                  <Button\n                    disabled={approveStatus !== ApprovalState.NOT_APPROVED}\n                    className=\"shinyButton\"\n                    onClick={approve}\n                  >\n                    Approve AKSHARE\n                  </Button>\n                ) : (\n                  <>\n                    <IconButton disabled={!canWithdrawFromBoardroom} onClick={onPresentWithdraw}>\n                      <RemoveIcon color={!canWithdrawFromBoardroom ? '' : 'yellow'} />\n                    </IconButton>\n                    <StyledActionSpacer />\n                    <IconButton onClick={onPresentDeposit}>\n                      <AddIcon color={!canWithdrawFromBoardroom ? '' : 'yellow'} />\n                    </IconButton>\n                  </>\n                )}\n              </StyledCardActions>\n            </StyledCardContentInner>\n          </CardContent>\n        </Card>\n        <Box mt={2} style={{ color: '#FFF' }}>\n          {canWithdrawFromBoardroom ? (\n            ''\n          ) : (\n            <Card>\n              <CardContent>\n                <Typography style={{ textAlign: 'center' }}>Withdraw possible in</Typography>\n                <ProgressCountdown hideBar={true} base={from} deadline={to} description=\"Withdraw available in\" />\n              </CardContent>\n            </Card>\n          )}\n        </Box>\n      </Box>\n    </>\n  );\n};\n\nconst StyledCardHeader = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n`;\nconst StyledCardActions = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-bottom: ${(props) => props.theme.spacing[5]}px;\n  width: 100%;\n`;\n\nconst StyledActionSpacer = styled.div`\n  height: ${(props) => props.theme.spacing[4]}px;\n  width: ${(props) => props.theme.spacing[4]}px;\n`;\n\nconst StyledCardContentInner = styled.div`\n  align-items: center;\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: space-between;\n`;\n\nexport default Stake;\n","E:\\projects\\adey\\front-end-main\\src\\views\\Winery\\components\\Harvest.tsx",["1410","1411","1412","1413","1414","1415","1416","1417","1418","1419"],"import React, { useMemo } from 'react';\nimport styled from 'styled-components';\n\nimport { Box, Button, Card, CardContent, Grid, Typography } from '@material-ui/core';\n\nimport TokenSymbol from '../../../components/TokenSymbol';\nimport Label from '../../../components/Label';\nimport Value from '../../../components/Value';\nimport CardIcon from '../../../components/CardIcon';\nimport useClaimRewardTimerBoardroom from '../../../hooks/boardroom/useClaimRewardTimerBoardroom';\nimport useClaimRewardCheck from '../../../hooks/boardroom/useClaimRewardCheck';\nimport ProgressCountdown from './ProgressCountdown';\nimport useHarvestFromBoardroom from '../../../hooks/useHarvestFromBoardroom';\nimport useEarningsOnBoardroom from '../../../hooks/useEarningsOnBoardroom';\nimport useGrapeStats from '../../../hooks/useGrapeStats';\nimport { getDisplayBalance } from '../../../utils/formatBalance';\nimport ReactTooltip from 'react-tooltip';\nimport rewards from '../../../assets/jsons/rewards.json';\nimport dogiImg from '../../../assets/img/dogi-removebg-preview.png';\nimport wideImg from '../../../assets/img/wide-removebg-preview.png';\nimport guyImg from '../../../assets/img/guy-removebg-preview.png';\nimport colorImg from '../../../assets/img/color-removebg-preview.png';\nimport babiImg from '../../../assets/img/babi-removebg-preview.png';\n\nconst Harvest: React.FC = () => {\n  const grapeStats = useGrapeStats();\n  const { onReward } = useHarvestFromBoardroom();\n  const earnings = useEarningsOnBoardroom();\n  const canClaimReward = useClaimRewardCheck();\n\n  const tokenPriceInDollars = useMemo(\n    () => (grapeStats ? Number(grapeStats.priceInDollars).toFixed(2) : null),\n    [grapeStats],\n  );\n\n  const earnedInDollars = (Number(tokenPriceInDollars) * Number(getDisplayBalance(earnings))).toFixed(2);\n\n  const { from, to } = useClaimRewardTimerBoardroom();\n\n  return (\n    <>\n      <Grid style={{ textAlign: 'center', zIndex: 1000 }}>\n        <TokenSymbol height={70} width={70} symbol=\"SOFT\" />\n      </Grid>\n      <Grid\n        style={{\n          background: 'white',\n          border: '1px solid black',\n          borderRadius: '200px',\n          textAlign: 'center',\n          marginTop: '-20px',\n          zIndex: 100,\n        }}\n      >\n        <Typography variant=\"h4\" style={{ color: '#225D14' }}>\n          SOFT\n        </Typography>\n        <Grid container justifyContent=\"space-between\" style={{ padding: '0px 20px', marginTop: '-10px' }}>\n          <img src={dogiImg} width=\"15%\" />\n          <img src={wideImg} width=\"15%\" />\n          <img src={guyImg} width=\"15%\" />\n          <img src={colorImg} width=\"15%\" />\n          <img src={babiImg} width=\"15%\" />\n        </Grid>\n      </Grid>\n      <Box>\n        <Card style={{ marginTop: '-30px', boxShadow: 'none' }}>\n          <CardContent>\n            <StyledCardContentInner style={{ boxShadow: '0px 0px 2px 0px black', margin: '-10px 20px' }}>\n              <div\n                style={{\n                  width: 0,\n                  height: 0,\n                  borderTop: '90px solid #212652',\n                  borderBottom: '10px solid transparent',\n                  borderLeft: '50px solid transparent',\n                  borderRight: '50px solid transparent',\n                  zIndex: 1,\n                }}\n              ></div>\n              <StyledCardHeader>\n                <Typography variant=\"h5\" style={{ color: '#212652' }}>\n                  SOFT EARNED\n                </Typography>\n                <Typography variant=\"h5\" style={{ color: '#212652' }}>{`$${Number(earnedInDollars).toLocaleString(\n                  'en-US',\n                )}`}</Typography>\n              </StyledCardHeader>\n              <StyledCardActions>\n                <Grid container spacing={1} justifyContent=\"center\">\n                  <Grid item xs={8}>\n                    <Button\n                      onClick={onReward}\n                      style={{ width: '100%' }}\n                      className={earnings.eq(0) || !canClaimReward ? 'shinyButtonDisabled' : 'shinyButton'}\n                      disabled={earnings.eq(0) || !canClaimReward}\n                    >\n                      Claim Reward\n                    </Button>\n                  </Grid>\n                </Grid>\n              </StyledCardActions>\n            </StyledCardContentInner>\n          </CardContent>\n        </Card>\n        <Box mt={2} style={{ color: '#FFF' }}>\n          {canClaimReward ? (\n            ''\n          ) : (\n            <Card>\n              <CardContent>\n                <Typography style={{ textAlign: 'center' }}>Claim possible in</Typography>\n                <ProgressCountdown hideBar={true} base={from} deadline={to} description=\"Claim available in\" />\n              </CardContent>\n            </Card>\n          )}\n        </Box>\n      </Box>\n    </>\n  );\n};\n\nconst StyledCardHeader = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n`;\nconst StyledCardActions = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-bottom: ${(props) => props.theme.spacing[5]}px;\n  width: 100%;\n`;\n\nconst StyledCardContentInner = styled.div`\n  align-items: center;\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: space-between;\n`;\n\nexport default Harvest;\n","E:\\projects\\adey\\front-end-main\\src\\views\\Vineyard\\AprModal.js",[],"E:\\projects\\adey\\front-end-main\\src\\hooks\\useNodesRewardBalance.ts",[],"E:\\projects\\adey\\front-end-main\\src\\hooks\\useTotalValueLocked.ts",[],"E:\\projects\\adey\\front-end-main\\src\\hooks\\useGrapeMimSWTotalNode.ts",[],"E:\\projects\\adey\\front-end-main\\src\\hooks\\useGrapeTotalNodes.ts",[],"E:\\projects\\adey\\front-end-main\\src\\hooks\\useWineTotalNodes.ts",[],"E:\\projects\\adey\\front-end-main\\src\\hooks\\useHarvestFromBoardroom.ts",[],"E:\\projects\\adey\\front-end-main\\src\\hooks\\useEarningsOnBoardroom.ts",[],"E:\\projects\\adey\\front-end-main\\src\\views\\Bank\\index.ts",[],"E:\\projects\\adey\\front-end-main\\src\\hooks\\useFantomPrice.ts",[],"E:\\projects\\adey\\front-end-main\\src\\hooks\\useEarningsAll.ts",["1420","1421","1422"],"import {useCallback, useEffect, useState} from 'react';\nimport {BigNumber} from 'ethers';\nimport useGrapeFinance from './useGrapeFinance';\nimport {Bank, ContractName} from '../grape-finance';\nimport config from '../config';\n\nconst useEarningsAll = (banks: Bank[]) => {\n  const [balances, setBalances] = useState<Map<string, BigNumber>>(new Map());\n  const grapeFinance = useGrapeFinance();\n  const isUnlocked = grapeFinance?.isUnlocked;\n  const args = banks.map((bank: Bank) => ({poolName: bank.contract, earnTokenName: bank.earnTokenName, poolId: bank.poolId}));\n  const fetchBalance = useCallback(async () => {\n    const balances = await Promise.all(\n        args.map(async (arg: {poolName: ContractName; earnTokenName: string; poolId: Number}) => {\n        const {poolName, earnTokenName, poolId} = arg;\n        const balance = await grapeFinance.earnedFromBank(poolName, earnTokenName, poolId, grapeFinance.myAccount);\n        return [`${poolName}-${poolId}`, balance];\n      }),\n    );\n    setBalances(new Map(balances as any));\n  }, [JSON.stringify(args), grapeFinance]);\n\n  useEffect(() => {\n    if (isUnlocked) {\n      fetchBalance().catch((err) => console.error(err.stack));\n\n      const refreshBalance = setInterval(fetchBalance, config.refreshInterval);\n      return () => clearInterval(refreshBalance);\n    }\n  }, [isUnlocked, JSON.stringify(args), grapeFinance, fetchBalance]);\n\n  return balances;\n};\n\nexport default useEarningsAll;\n","E:\\projects\\adey\\front-end-main\\src\\components\\DashboardInfoCard\\index.ts",[],"E:\\projects\\adey\\front-end-main\\src\\hooks\\useIsWindowVisible.ts",[],"E:\\projects\\adey\\front-end-main\\src\\hooks\\useDebounce.ts",[],"E:\\projects\\adey\\front-end-main\\src\\hooks\\useCatchError.ts",[],"E:\\projects\\adey\\front-end-main\\src\\hooks\\useWalletNodesAndNFTs.ts",[],"E:\\projects\\adey\\front-end-main\\src\\hooks\\useWithdrawFromBoardroom.ts",[],"E:\\projects\\adey\\front-end-main\\src\\hooks\\useStakeToBoardroom.ts",[],"E:\\projects\\adey\\front-end-main\\src\\views\\Bond\\components\\ExchangeModal.tsx",[],"E:\\projects\\adey\\front-end-main\\src\\hooks\\boardroom\\useClaimRewardTimerBoardroom.ts",[],"E:\\projects\\adey\\front-end-main\\src\\hooks\\boardroom\\useUnstakeTimerBoardroom.ts",[],"E:\\projects\\adey\\front-end-main\\src\\views\\Winery\\components\\WithdrawModal.tsx",[],"E:\\projects\\adey\\front-end-main\\src\\views\\Winery\\components\\DepositModal.tsx",[],"E:\\projects\\adey\\front-end-main\\src\\components\\InfoCard\\index.ts",[],"E:\\projects\\adey\\front-end-main\\src\\components\\LPInfoCard\\index.ts",[],"E:\\projects\\adey\\front-end-main\\src\\views\\Bank\\Bank.tsx",["1423","1424","1425","1426"],"import React, { useEffect, useMemo } from 'react';\nimport styled from 'styled-components';\n\nimport { useParams } from 'react-router-dom';\nimport { useWallet } from 'use-wallet';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { Box, Button, Card, CardContent, Typography, Grid } from '@material-ui/core';\n\nimport PageHeader from '../../components/PageHeader';\nimport Spacer from '../../components/Spacer';\nimport UnlockWallet from '../../components/UnlockWallet';\nimport Harvest from './components/Harvest';\nimport HarvestHermes from './components/HarvestHermes';\nimport Stake from './components/Stake';\nimport useBank from '../../hooks/useBank';\nimport useStatsForPool from '../../hooks/useStatsForPool';\n\nimport useRedeem from '../../hooks/useRedeem';\nimport { Bank as BankEntity } from '../../grape-finance';\n\nimport { Alert } from '@material-ui/lab';\nimport useModal from '../../hooks/useModal';\nimport StratModal from './components/StratModal';\nimport zone1 from '../../assets/img/1.jpg';\nimport zone2 from '../../assets/img/2.jpg';\nimport zone3 from '../../assets/img/3.jpg';\nimport wampStrat from '../../assets/img/wamp-strat.jpg';\nimport useCashPriceInLastTWAP from '../../hooks/useCashPriceInLastTWAP';\nimport usebShareStats from '../../hooks/useWineStats';\nconst useStyles = makeStyles((theme) => ({\n  gridItem: {\n    height: '100%',\n    [theme.breakpoints.up('md')]: {\n      height: '90px',\n    },\n  },\n}));\n\nconst Bank: React.FC = () => {\n  useEffect(() => window.scrollTo(0, 0));\n\n  const classes = useStyles();\n  // @ts-ignore\n  const { bankId } = useParams();\n  const bank = useBank(bankId);\n\n  const { account } = useWallet();\n  const { onRedeem } = useRedeem(bank);\n  const statsOnPool = useStatsForPool(bank);\n  const bShareStats = usebShareStats();\n  const cashPrice = useCashPriceInLastTWAP();\n\n  const bondScale = (Number(cashPrice) / 1e18).toFixed(2);\n  const bSharePriceInDollars = useMemo(\n    () => (bShareStats ? Number(bShareStats.priceInDollars).toFixed(2) : null),\n    [bShareStats],\n  );\n\n  let curStrat: string;\n  if (Number(bondScale) >= 2) {\n    curStrat = zone1;\n  } else if (Number(bondScale) < 2 && Number(bondScale) >= 1) {\n    curStrat = zone2;\n  } else {\n    curStrat = zone3;\n  }\n  console.log(bank.depositTokenName);\n  let name: string;\n  let vaultUrl: string;\n  let strat: string;\n  let stratText: string;\n\n  if (bank.depositTokenName.includes('AKUSD-BUSD')) {\n    name = 'Autocompound your AKUSD-BUSD on Magik to buy back & burn AKUSD';\n    vaultUrl = 'https://magik.farm/#/avax';\n    strat = curStrat;\n    stratText = 'Click here to see the optimal strategy for this vault';\n  } else if (bank.depositTokenName.includes('WINE-BUSD')) {\n    name = 'Autocompound your WINE-BUSD on Magik to buy back & burn AKUSD';\n    vaultUrl = 'https://magik.farm/#/avax';\n    strat = curStrat;\n    stratText = 'Click here to see the optimal strategy for this vault';\n  } else if (bank.depositTokenName.includes('AKUSD-WINE')) {\n    name = 'Autocompound your AKUSD-WINE on Magik to buy back & burn AKUSD';\n    vaultUrl = 'https://magik.farm/#/avax';\n    strat = curStrat;\n    stratText = 'Click here to see the optimal strategy for this vault';\n  } else if (bank.depositTokenName === 'AKUSD') {\n    name = 'Autocompound your AKUSD on Magik to buy back & burn AKUSD';\n    vaultUrl = 'https://magik.farm/#/avax';\n    strat = '';\n    stratText = '';\n  } else if (bank.depositTokenName === 'WINE-POPS-LP') {\n    name = '';\n    vaultUrl = '';\n    strat = '';\n    stratText = '';\n  } else if (bank.depositTokenName === 'sVintage') {\n    name = 'Get sVintage by staking Vintage in the Winemaker Cellar here';\n    vaultUrl = 'https://winemaker.grapefinance.app/app/Cellar';\n    strat = '';\n    stratText = '';\n  } else if (bank.depositTokenName === 'WAMP') {\n    name = 'Get WAMP to stake for WINE here';\n    vaultUrl = 'https://app.asgarddao.fi/#/pledge';\n    strat = wampStrat;\n    stratText = 'Click here to see the optimal strategy for this vault';\n  }\n\n  const [onPresentDeposit, onDismissDeposit] = useModal(<StratModal strat={strat} />);\n\n  return account && bank ? (\n    <>\n      <Typography color=\"textPrimary\" align=\"center\" variant=\"h3\" gutterBottom>\n        {bank?.name}\n      </Typography>\n\n      {name !== '' ? (\n        <Box mt={5}>\n          <Grid container justify=\"center\" spacing={3} style={{ marginBottom: '30px' }}>\n            <Alert variant=\"filled\">\n              {' '}\n              <a href={vaultUrl} target={'_blank'} rel=\"noopener noreferrer\">\n                <span style={{ color: '#fff' }}>{name}</span>\n              </a>\n            </Alert>\n          </Grid>\n        </Box>\n      ) : null}\n\n      {stratText !== '' ? (\n        <Box mt={5}>\n          <Grid container justify=\"center\" spacing={3} style={{ marginBottom: '30px' }}>\n            <Alert variant=\"filled\">\n              <a onClick={onPresentDeposit}>\n                <span style={{ color: '#fff' }}>{stratText}</span>\n              </a>\n            </Alert>\n          </Grid>\n        </Box>\n      ) : null}\n\n      <Box>\n        <Grid container justify=\"center\" spacing={3} style={{ marginBottom: '50px' }}>\n          <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\n            <Card className={classes.gridItem}>\n              <CardContent style={{ textAlign: 'center' }}>\n                <Typography style={{ color: '#ccf' }}>Pool Wine p/day</Typography>\n                <Typography>\n                  {bank.closedForStaking ? '0.00' : bank.multi} | $\n                  {Number((Number(bSharePriceInDollars) * Number(bank.multi)).toFixed(0)).toLocaleString('en-US')}\n                </Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\n            <Card className={classes.gridItem}>\n              <CardContent style={{ textAlign: 'center' }}>\n                <Typography style={{ color: '#ccf' }}>APR | DAILY</Typography>\n                <Typography>\n                  {bank.closedForStaking ? '0.00' : statsOnPool?.yearlyAPR}% |{' '}\n                  {bank.closedForStaking ? '0.00' : statsOnPool?.dailyAPR}%\n                </Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\n            <Card className={classes.gridItem}>\n              <CardContent style={{ textAlign: 'center' }}>\n                <Typography style={{ color: '#ccf' }}>TVL</Typography>\n                <Typography>\n                  ${statsOnPool?.TVL ? Number(Number(statsOnPool?.TVL).toFixed(0)).toLocaleString('en-US') : '-.--'}\n                </Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n        </Grid>\n      </Box>\n\n      <Box mt={5}>\n        <StyledBank>\n          <StyledCardsWrapper>\n            <StyledCardWrapper>\n              {bank.depositTokenName === 'HSHARE-WINE-LP' ? <HarvestHermes bank={bank} /> : <Harvest bank={bank} />}\n            </StyledCardWrapper>\n            <Spacer />\n            <StyledCardWrapper>{<Stake bank={bank} />}</StyledCardWrapper>\n          </StyledCardsWrapper>\n          <Spacer size=\"lg\" />\n          {bank.depositTokenName.includes('LP') && <LPTokenHelpText bank={bank} />}\n          {bank.depositTokenName.includes('SW') && <LPTokenHelpText bank={bank} />}\n          <Spacer size=\"lg\" />\n          <div>\n            <Button onClick={onRedeem} className=\"shinyButton\">\n              Claim &amp; Withdraw\n            </Button>\n          </div>\n          <Spacer size=\"lg\" />\n        </StyledBank>\n      </Box>\n    </>\n  ) : !bank ? (\n    <BankNotFound />\n  ) : (\n    <UnlockWallet />\n  );\n};\n\nconst LPTokenHelpText: React.FC<{ bank: BankEntity }> = ({ bank }) => {\n  let pairName: string;\n  let uniswapUrl: string;\n  let exchange: string;\n  if (bank.depositTokenName == 'AKUSD-BUSD-LP') {\n    pairName = 'AKUSD-BUSD pair';\n    uniswapUrl =\n      'https://traderjoexyz.com/pool/0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56/0xd25e8D31C43133Af6E5321228E19EC4CbA66718d';\n    exchange = 'joe';\n  } else if (bank.depositTokenName == 'AKUSD-BUSD-LP') {\n    pairName = 'AKUSD-BUSD-LP pair';\n    uniswapUrl =\n      'https://www.swapsicle.io/add/0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56/0xd25e8D31C43133Af6E5321228E19EC4CbA66718d';\n    exchange = 'Swapsicle';\n  } else if (bank.depositTokenName.includes('WINE-BUSD')) {\n    pairName = 'WINE-BUSD pair';\n    uniswapUrl =\n      'https://traderjoexyz.com/pool/0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56/0xEfB73202a463Ab78B674F64290fdaD6c75009Bf7';\n    exchange = 'joe';\n  } else if (bank.depositTokenName.includes('GRAPE-WINE')) {\n    pairName = 'GRAPE-WINE pair';\n    uniswapUrl =\n      'https://traderjoexyz.com/pool/0xd25e8D31C43133Af6E5321228E19EC4CbA66718d/0xEfB73202a463Ab78B674F64290fdaD6c75009Bf7';\n    exchange = 'joe';\n  } else if (bank.depositTokenName.includes('WINE-POPS')) {\n    pairName = 'WINE-POPS pair';\n    uniswapUrl =\n      'https://www.swapsicle.io/add/0xEfB73202a463Ab78B674F64290fdaD6c75009Bf7/0x240248628B7B6850352764C5dFa50D1592A033A8';\n    exchange = 'Swapsicle';\n  }\n  return (\n    <Card>\n      <CardContent>\n        <StyledLink href={uniswapUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n          <span style={{ color: '#fff' }}>\n            Provide liquidity for {pairName} on {exchange}\n          </span>\n        </StyledLink>\n      </CardContent>\n    </Card>\n  );\n};\n\nconst BankNotFound = () => {\n  return (\n    <Center>\n      <PageHeader icon=\"🏚\" title=\"Not Found\" subtitle=\"You've hit a bank just robbed by unicorns.\" />\n    </Center>\n  );\n};\n\nconst StyledBank = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  @media (max-width: 768px) {\n    width: 100%;\n  }\n`;\n\nconst StyledLink = styled.a`\n  font-weight: 700;\n  text-decoration: none;\n  color: ${(props) => props.theme.color.primary.main};\n`;\n\nconst StyledCardsWrapper = styled.div`\n  display: flex;\n  width: 600px;\n  @media (max-width: 768px) {\n    width: 100%;\n    flex-flow: column nowrap;\n    align-items: center;\n  }\n`;\n\nconst StyledCardWrapper = styled.div`\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  @media (max-width: 768px) {\n    width: 80%;\n  }\n`;\n\nconst Center = styled.div`\n  display: flex;\n  flex: 1;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport default Bank;\n","E:\\projects\\adey\\front-end-main\\src\\components\\DashboardInfoCard\\DashboardInfoCard.tsx",[],"E:\\projects\\adey\\front-end-main\\src\\components\\InfoCard\\InfoCard.tsx",["1427"],"import React from 'react';\nimport { Button, Card, CardContent, Grid, Paper, Typography } from '@material-ui/core';\nimport TokenSymbol from '../../components/TokenSymbol';\nimport TokenSymbolAccessory from '../../components/TokenSymbolAccessory';\nimport TokenSymbolButtonAccessory from '../../components/TokenSymbolButtonAccessory';\nimport useGrapeFinance from '../../hooks/useGrapeFinance';\nimport MetamaskFox from '../../assets/img/metamask-fox.svg';\nimport { roundAndFormatNumber } from '../../0x';\n\ninterface InfoCardProps {\n  name: string;\n  color: string;\n  buyAddress?: string;\n  internalLink?: boolean;\n  chartAddress?: string;\n  price: number;\n  circulatingSupply: number;\n  totalSupply: number;\n}\n\nconst InfoCard: React.FC<InfoCardProps> = ({\n  name,\n  color,\n  buyAddress,\n  internalLink,\n  chartAddress,\n  price,\n  circulatingSupply,\n  totalSupply,\n}) => {\n  const grapeFinance = useGrapeFinance();\n\n  return (\n    <>\n      <Grid container justifyContent=\"space-between\" style={{ zIndex: '1000' }}>\n        <TokenSymbolAccessory symbol={name.toUpperCase()} height={100} width={70} />\n        <TokenSymbol symbol={name.toUpperCase()} height={80} width={80} marginTop={30} />\n      </Grid>\n      <Card style={{ marginTop: '-30px', boxShadow: 'none' }}>\n        <CardContent>\n          <Grid container style={{ position: 'relative', backgroundColor: color, borderRadius: '200px' }} spacing={1}>\n            <Grid item xs={12} sm={12} md={12} lg={12}>\n              <Grid container direction=\"column\">\n                <Grid item sm={12} md={12} lg={12} style={{ marginBottom: '8px' }}>\n                  <Typography variant=\"h4\" align=\"center\" style={{ color: 'black' }}>\n                    {name}\n                  </Typography>\n                </Grid>\n              </Grid>\n            </Grid>\n            <Button\n              onClick={() => {\n                grapeFinance.watchAssetInMetamask(name.toUpperCase());\n              }}\n              style={{ position: 'absolute', top: '20px', right: '0', display: 'flex', justifyContent: 'row' }}\n            >\n              {' '}\n              <b style={{ color: 'black' }}>+</b>&nbsp;&nbsp;\n              <img alt=\"metamask fox\" style={{ width: '20px' }} src={MetamaskFox} />\n            </Button>\n          </Grid>\n          <div style={{ boxShadow: '0px 0px 2px 0px black', margin: '-20px 20px' }}>\n            <Grid item xs={12} sm={12} md={12} lg={12} style={{ paddingTop: '40px' }}>\n              <Grid container direction=\"column\">\n                <Grid item sm={12} md={12} lg={12} style={{ marginBottom: '8px' }}>\n                  <div\n                    style={{\n                      width: 0,\n                      height: 0,\n                      borderTop: '40px solid transparent',\n                      borderBottom: '40px solid #31AD54',\n                      borderLeft: '40px solid #31AD54',\n                      borderRight: '40px solid transparent',\n                      position: 'absolute',\n                      marginTop: '-40px',\n                      zIndex: 1,\n                    }}\n                  ></div>\n                  <Typography variant=\"h4\" align=\"center\" style={{ color: 'black', zIndex: 1000 }}>\n                    ${price ? price : '-.----'}\n                  </Typography>\n                </Grid>\n              </Grid>\n            </Grid>\n            <Grid container direction=\"column\" spacing={1} style={{ width: 'calc(100% - 40px)', margin: '0px 20px' }}>\n              <Grid item>\n                <Grid container justifyContent=\"space-between\">\n                  <Grid item>\n                    <span className=\"card-info-text\">Market Cap</span>\n                  </Grid>\n                  <Grid item>\n                    <b className=\"card-info-value\">${roundAndFormatNumber(circulatingSupply * price, 0)}</b>\n                  </Grid>\n                </Grid>\n              </Grid>\n              <Grid item xs={12} sm={12} md={12} lg={12}>\n                <Grid container alignItems=\"baseline\" justifyContent=\"space-between\">\n                  <Grid item>\n                    <span className=\"card-info-text\">Price</span>\n                  </Grid>\n                  <Grid item>\n                    <span className=\"info-card-price\">${price ? price : '-.----'}</span>\n                  </Grid>\n                </Grid>\n              </Grid>\n              <Grid item>\n                <Grid container justifyContent=\"space-between\">\n                  <Grid item>\n                    <span className=\"card-info-text\">Circulating Supply</span>\n                  </Grid>\n                  <Grid item>\n                    <b className=\"card-info-value\">{roundAndFormatNumber(circulatingSupply, 2)}</b>\n                  </Grid>\n                </Grid>\n              </Grid>\n              <Grid item>\n                <Grid container justifyContent=\"space-between\">\n                  <Grid item>\n                    <span className=\"card-info-text\">Total Supply</span>\n                  </Grid>\n                  <Grid item>\n                    <b className=\"card-info-value\">{roundAndFormatNumber(totalSupply, 2)}</b>\n                  </Grid>\n                </Grid>\n              </Grid>\n            </Grid>\n            <Grid container spacing={3} justifyContent=\"center\">\n              {buyAddress && (\n                <Grid item className=\"card-price-item\" xs={10} md={10} lg={10}>\n                  <Button\n                    href={buyAddress}\n                    target={internalLink === true ? null : '_blank'}\n                    className=\"shinyButton\"\n                    style={{\n                      width: '100%',\n                      marginTop: '10px',\n                      borderRadius: '15px!important',\n                      fontSize: '25px!important',\n                    }}\n                  >\n                    <TokenSymbolButtonAccessory symbol={name.toUpperCase()} height={40} />\n                    Buy {name}\n                  </Button>\n                </Grid>\n              )}\n              {/* {chartAddress && (\n              <Grid item className=\"card-price-item\" xs={6} md={6} lg={6}>\n                <Button\n                  href={chartAddress}\n                  target=\"_blank\"\n                  className=\"shinyButton\"\n                  style={{ width: '100%', marginTop: '10px', borderRadius: '0px !important' }}\n                >\n                  {name} Chart\n                </Button>\n              </Grid>\n            )} */}\n            </Grid>\n          </div>\n        </CardContent>\n      </Card>\n    </>\n  );\n};\n\nexport default InfoCard;\n","E:\\projects\\adey\\front-end-main\\src\\components\\LPInfoCard\\LPInfoCard.tsx",["1428","1429"],"import React from 'react';\nimport { Button, Card, CardContent, Grid, Paper, Typography } from '@material-ui/core';\nimport TokenSymbol from '../TokenSymbol';\nimport { roundAndFormatNumber } from '../../0x';\nimport plantImg from '../../assets/img/plant-removebg-preview.png';\n\ninterface LPInfoCardProps {\n  name: string;\n  color: string;\n  poolAddress?: string;\n  price: number;\n  token1Value: number;\n  token1Name: string;\n  token2Value: number;\n  token2Name: string;\n  circulatingSupply: number;\n  totalSupply: number;\n}\n\nconst LPInfoCard: React.FC<LPInfoCardProps> = ({\n  name,\n  color,\n  poolAddress,\n  price,\n  token1Value,\n  token1Name,\n  token2Value,\n  token2Name,\n  circulatingSupply,\n  totalSupply,\n}) => {\n  return (\n    <>\n      <Grid container justifyContent=\"space-between\" style={{ zIndex: '1000', alignItems: 'end' }}>\n        <TokenSymbol symbol={token2Name.toUpperCase()} height={70} width={70} />\n        <img src={plantImg} width={'50%'} height={'auto'} style={{ marginBottom: '-10px' }} />\n        <TokenSymbol symbol={token1Name.toUpperCase()} height={70} width={70} />\n      </Grid>\n      <Card style={{ marginTop: '-25px', position: 'relative', boxShadow: 'none' }}>\n        <svg\n          id=\"vKfJzuURFG9yEEVN\"\n          viewBox=\"0 0 655.7808 583.0396\"\n          preserveAspectRatio=\"none\"\n          style={{\n            overflow: 'hidden',\n            top: '0%',\n            left: '0%',\n            width: '100%',\n            position: 'absolute',\n            opacity: '1.0',\n            height: '100%',\n          }}\n        >\n          <g id=\"WrVRuQvvnDe2XNXc\" style={{ transform: 'scale(1, 1)' }}>\n            <path\n              id=\"odzmM032tgIUh5ss\"\n              d=\"M579.4307781381326,582.0396017692394 L76.3499984741211,582.0396017692394 C34.72999954223633,582.0396017692394 1.0,548.2996039054699 1.0,291.5197879839101 C1.0,34.72999954223633 34.72999954223633,1.0 76.3499984741211,1.0 L579.4307781381326,1.0 C621.0407634896951,1.0 654.7807842416482,34.72999954223633 654.7807842416482,291.5197879839101 C654.7807842416482,548.2996039054699 621.0407940072732,582.0396017692394 579.4307781381326,582.0396017692394\"\n              style={{ fill: color, opacity: '1.0' }}\n            ></path>\n            <path\n              id=\"zLOfsLquSfBc1ZcZ\"\n              d=\"M579.4307781381326,0.0 L76.3499984741211,0.0 C34.25,0.0 0.0,34.25 0.0,291.5197879839101 C0.0,548.7896017692394 34.25,583.0396017692394 76.3499984741211,583.0396017692394 L579.4307781381326,583.0396017692394 C621.5307842416482,583.0396017692394 655.7807842416482,548.7896017692394 655.7807842416482,291.5197879839101 C655.7807842416482,34.25 621.5307842416482,0.0 579.4307781381326,0.0 M579.4307781381326,581.0396017692394 L76.3499984741211,581.0396017692394 C35.349998474121094,581.0396017692394 2.0,547.6896032951183 2.0,291.5197879839101 C2.0,35.349998474121094 35.349998474121094,2.0 76.3499984741211,2.0 L579.4307781381326,2.0 C620.4307781381326,2.0 653.7807842416482,35.349998474121094 653.7807842416482,291.5197879839101 C653.7807842416482,547.6896032951183 620.4307781381326,581.0396017692394 579.4307781381326,581.0396017692394\"\n              style={{ fill: '#000000', opacity: '1.0' }}\n            ></path>\n          </g>\n        </svg>\n        <CardContent>\n          <Grid container style={{ position: 'relative', textAlign: 'center' }} spacing={1} direction=\"column\">\n            <Grid item>\n              <Typography style={{ color: '#0C5D14' }} variant=\"h4\">\n                FARM\n              </Typography>\n            </Grid>\n            <Grid item>\n              <Typography style={{ color: '#0C5D14' }} variant=\"h4\">\n                {token2Name}-{token1Name}\n              </Typography>\n            </Grid>\n            <Grid item>\n              <Typography style={{ color: '#000000' }} variant=\"h4\">\n                {token1Value} {token1Name} / {token2Value} {token2Name}\n              </Typography>\n            </Grid>\n            <Grid container spacing={3}>\n              <Grid item className=\"card-price-item\" xs={12} md={12} lg={12}>\n                <Button\n                  href={poolAddress}\n                  className=\"shinyButton\"\n                  style={{\n                    width: '30%',\n                    marginTop: '10px',\n                    borderRadius: '0px !important',\n                    fontSize: '20px!important',\n                  }}\n                >\n                  ZAP IN\n                </Button>\n              </Grid>\n            </Grid>\n            <Grid item>\n              <span className=\"info-card-price\">${price ? price : '-.----'}</span>\n            </Grid>\n            <Grid item>\n              <Grid container justifyContent=\"center\">\n                <Grid item>\n                  <span className=\"card-info-text\">Liquidity: </span>\n                </Grid>\n                <Grid item>\n                  <b className=\"card-info-value\">${roundAndFormatNumber(circulatingSupply, 2)}</b>\n                </Grid>\n              </Grid>\n            </Grid>\n            <Grid item>\n              <Grid container justifyContent=\"center\">\n                <Grid item>\n                  <span className=\"card-info-text\">Total Supply: </span>\n                </Grid>\n                <Grid item>\n                  <b className=\"card-info-value\">{roundAndFormatNumber(totalSupply, 2)}</b>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n        </CardContent>\n      </Card>\n    </>\n  );\n};\n\nexport default LPInfoCard;\n","E:\\projects\\adey\\front-end-main\\src\\hooks\\useRedeem.ts",[],"E:\\projects\\adey\\front-end-main\\src\\views\\Bank\\components\\Harvest.tsx",[],"E:\\projects\\adey\\front-end-main\\src\\views\\Bank\\components\\Stake.tsx",[],"E:\\projects\\adey\\front-end-main\\src\\views\\Bank\\components\\HarvestHermes.tsx",[],"E:\\projects\\adey\\front-end-main\\src\\views\\Bank\\components\\StratModal.tsx",[],"E:\\projects\\adey\\front-end-main\\src\\views\\Bank\\components\\ZapModalSW.tsx",["1430","1431","1432","1433","1434","1435"],"E:\\projects\\adey\\front-end-main\\src\\views\\Bank\\components\\ZapModal.tsx",["1436","1437","1438","1439","1440","1441","1442","1443","1444","1445","1446","1447","1448","1449","1450"],"import React, { useState, useMemo } from 'react';\n\nimport { Button, Select, MenuItem, InputLabel, withStyles } from '@material-ui/core';\n// import Button from '../../../components/Button'\nimport Modal, { ModalProps } from '../../../components/Modal';\nimport ModalActions from '../../../components/ModalActions';\nimport ModalTitle from '../../../components/ModalTitle';\nimport TokenInput from '../../../components/TokenInput';\nimport styled from 'styled-components';\n\nimport { getDisplayBalance } from '../../../utils/formatBalance';\nimport Label from '../../../components/Label';\nimport useLpStats from '../../../hooks/useLpStats';\nimport useTokenBalance from '../../../hooks/useTokenBalance';\nimport useGrapeFinance from '../../../hooks/useGrapeFinance';\nimport useApproveZapper, { ApprovalState } from '../../../hooks/useApproveZapper';\nimport { GRAPE_TICKER, WINE_TICKER, MIM_TICKER } from '../../../utils/constants';\nimport { Alert } from '@material-ui/lab';\n\ninterface ZapProps extends ModalProps {\n  onConfirm: (zapAsset: string, lpName: string, amount: string) => void;\n  LPtokenName?: string;\n  decimals?: number;\n}\n\nconst ZapModal: React.FC<ZapProps> = ({ onConfirm, onDismiss, LPtokenName = '', decimals = 18 }) => {\n  const grapeFinance = useGrapeFinance();\n  //const {balance} = useWallet();\n\n  const grapeBalance = useTokenBalance(grapeFinance.GRAPE);\n  const wineBalance = useTokenBalance(grapeFinance.WINE);\n  const mimBalance = useTokenBalance(grapeFinance.BUSD);\n\n  let [showZapData, setShowZapData] = useState(false);\n  //const avaxDisplayBalance = (Number(balance) / 1e18).toFixed(4).toString();\n\n  const [val, setVal] = useState('');\n  // The token to be swapped from.\n  const [zappingToken, setZappingToken] = useState(MIM_TICKER);\n  const [zappingTokenBalance, setZappingTokenBalance] = useState(getDisplayBalance(mimBalance, decimals));\n  const [estimate, setEstimate] = useState({ token0: '0', token1: '0' });\n  const [approveZapperStatus, approveZapper] = useApproveZapper(zappingToken);\n  const grapemimLpStats = useLpStats('AKUSD-BUSD-LP');\n  const wineSharemimLpStats = useLpStats('AKSHARE-BUSD-LP');\n  const grapeLPStats = useMemo(() => (grapemimLpStats ? grapemimLpStats : null), [grapemimLpStats]);\n  const wineLPStats = useMemo(() => (wineSharemimLpStats ? wineSharemimLpStats : null), [wineSharemimLpStats]);\n  const mimAmountPerLP = LPtokenName.startsWith(GRAPE_TICKER) ? grapeLPStats?.mimAmount : wineLPStats?.mimAmount;\n  /**\n   * Checks if a value is a valid number or not\n   * @param n is the value to be evaluated for a number\n   * @returns\n   */\n  function isNumeric(n: any) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n  const handleChangeAsset = (event: any) => {\n    const value = event.target.value;\n    if (value == 'NONE') {\n      setShowZapData(false);\n    } else {\n      setVal('0');\n      setEstimate({ token0: '0', token1: '0' });\n      setZappingToken(value);\n      setZappingTokenBalance(getDisplayBalance(mimBalance, decimals));\n      if (event.target.value === WINE_TICKER) {\n        setZappingTokenBalance(getDisplayBalance(wineBalance, decimals));\n      }\n      if (event.target.value === GRAPE_TICKER) {\n        setZappingTokenBalance(getDisplayBalance(grapeBalance, decimals));\n      }\n      if (event.target.value === MIM_TICKER) {\n        setZappingTokenBalance(getDisplayBalance(mimBalance, decimals));\n      }\n      setShowZapData(true);\n    }\n  };\n\n  const handleChange = async (e: any) => {\n    // the - is to stop negatives\n    if (!isNumeric(e.currentTarget.value) || e.currentTarget.value.includes('-')) return;\n    if (e.currentTarget.value === '' || Number(e.currentTarget.value) == 0) {\n      setVal(e.currentTarget.value);\n      setEstimate({ token0: '0', token1: '0' });\n    } else {\n      setVal(e.currentTarget.value);\n      const estimateZap = await grapeFinance.estimateZapIn(\n        zappingToken,\n        LPtokenName,\n        String(e.currentTarget.value).trim(),\n      );\n\n      setEstimate({ token0: estimateZap.amounts[0], token1: estimateZap.amounts[1] });\n    }\n  };\n\n  const handleSelectMax = async () => {\n    setVal(zappingTokenBalance);\n    const estimateZap = await grapeFinance.estimateZapIn(zappingToken, LPtokenName, String(zappingTokenBalance));\n    setEstimate({ token0: estimateZap.amounts[0].toString(), token1: estimateZap.amounts[1].toString() });\n  };\n\n  function getOrderLPName(lpName: string): string[] {\n    if (lpName.includes('AKUSD-BUSD-LP')) return [GRAPE_TICKER, MIM_TICKER];\n    if (lpName.includes('AKSHARE-BUSD-LP')) return [WINE_TICKER, MIM_TICKER];\n    if (lpName.includes('SOFT-BUSD-LP')) return [GRAPE_TICKER, WINE_TICKER];\n    return;\n  }\n\n  function getOrderLPBalanceThing(token0: string, token1: string): string[] {\n    if (token0 == WINE_TICKER) return [token0, token1];\n    if (token0 == GRAPE_TICKER) return [token0, token1];\n    if (token0 == MIM_TICKER) return [token1, token0];\n    return;\n  }\n\n  function normalizeOrder(token0: string, tokenAmount0: string, tokenAmount1: string) {\n    if (token0 == WINE_TICKER) return [tokenAmount0, tokenAmount1];\n    if (token0 == GRAPE_TICKER) return [tokenAmount0, tokenAmount1];\n    if (token0 == MIM_TICKER) return [tokenAmount1, tokenAmount0];\n    return;\n  }\n\n  let [token0Name, token1Name] = getOrderLPName(LPtokenName);\n  let [tokenA, tokenB] = getOrderLPBalanceThing(token0Name, token1Name);\n  return (\n    <Modal>\n      <ModalTitle text={`Zap in ${LPtokenName}`} />\n\n      <StyledActionSpacer />\n      <InputLabel style={{ color: '#fff' }} id=\"label\">\n        Select asset to zap with\n      </InputLabel>\n      <Select\n        onChange={handleChangeAsset}\n        style={{ color: '#fff' }}\n        labelId=\"label\"\n        id=\"select\"\n        value={showZapData ? zappingToken : 'NONE'}\n      >\n        <StyledMenuItem value=\"NONE\">Choose asset</StyledMenuItem>\n        {LPtokenName.includes(MIM_TICKER) && <StyledMenuItem value={MIM_TICKER}>BUSD</StyledMenuItem>}\n        {LPtokenName.includes(WINE_TICKER) && <StyledMenuItem value={WINE_TICKER}>WINE</StyledMenuItem>}\n        {/*LPtokenName.includes(GRAPE_TICKER) && <StyledMenuItem value={GRAPE_TICKER}>GRAPE</StyledMenuItem>*/}\n      </Select>\n      {showZapData && (\n        <>\n          <TokenInput\n            onSelectMax={handleSelectMax}\n            onChange={handleChange}\n            value={val}\n            max={zappingTokenBalance}\n            symbol={zappingToken}\n          />\n          {/*<Label text=\"Zap Estimations\" />\n          <StyledDescriptionText>\n            {' '}\n            {LPtokenName} tokens: {Number(estimate.token0) / Number(mimAmountPerLP)}\n      </StyledDescriptionText>*/}\n          {/*<StyledDescriptionText>\n          (\n            {Number(normalizeOrder(zappingToken, estimate.token0, estimate.token1)[0])} {tokenA} /{' '}\n            {Number(normalizeOrder(zappingToken, estimate.token0, estimate.token1)[1])} {tokenB}){' '}\n          </StyledDescriptionText>*/}\n          <ModalActions>\n            <Button\n              color=\"primary\"\n              variant=\"contained\"\n              onClick={() =>\n                approveZapperStatus !== ApprovalState.APPROVED\n                  ? approveZapper()\n                  : onConfirm(zappingToken, LPtokenName, val)\n              }\n            >\n              {approveZapperStatus !== ApprovalState.APPROVED ? 'Approve' : 'Zap'}\n            </Button>\n          </ModalActions>\n        </>\n      )}\n\n      <StyledActionSpacer />\n      <Alert variant=\"filled\" severity=\"info\">\n        You need to manually stake the LP tokens after zapping. Maximum slippage is 1%.{' '}\n      </Alert>\n    </Modal>\n  );\n};\n\nconst StyledActionSpacer = styled.div`\n  height: ${(props) => props.theme.spacing[4]}px;\n  width: ${(props) => props.theme.spacing[4]}px;\n`;\n\nconst StyledDescriptionText = styled.div`\n  align-items: center;\n  color: ${(props) => props.theme.color.grey[400]};\n  display: flex;\n  font-size: 14px;\n  font-weight: 700;\n  height: 22px;\n  justify-content: flex-start;\n`;\nconst StyledMenuItem = withStyles({\n  root: {\n    backgroundColor: 'white',\n    color: '#2c2560',\n    '&:hover': {\n      backgroundColor: 'grey',\n      color: '#2c2560',\n    },\n    selected: {\n      backgroundColor: 'black',\n    },\n  },\n})(MenuItem);\n\nexport default ZapModal;\n","E:\\projects\\adey\\front-end-main\\src\\hooks\\useWithdraw.ts",[],"E:\\projects\\adey\\front-end-main\\src\\hooks\\useZap.ts",[],"E:\\projects\\adey\\front-end-main\\src\\components\\TokenSymbolAccessory\\index.ts",[],"E:\\projects\\adey\\front-end-main\\src\\components\\TokenSymbolButtonAccessory\\index.ts",[],"E:\\projects\\adey\\front-end-main\\src\\hooks\\useApproveZapper.ts",["1451"],"import {BigNumber, ethers} from 'ethers';\nimport {useCallback, useMemo} from 'react';\nimport {useHasPendingApproval, useTransactionAdder} from '../state/transactions/hooks';\nimport useAllowance from './useAllowance';\nimport ERC20 from '../grape-finance/ERC20';\nimport {GRAPE_TICKER, WINE_TICKER, MIM_TICKER, ZAPPER_ROUTER_ADDR} from '../utils/constants';\nimport useGrapeFinance from './useGrapeFinance';\n\nconst APPROVE_AMOUNT = ethers.constants.MaxUint256;\nconst APPROVE_BASE_AMOUNT = BigNumber.from('1000000000000000000000000');\n\nexport enum ApprovalState {\n  UNKNOWN,\n  NOT_APPROVED,\n  PENDING,\n  APPROVED,\n}\n\n// returns a variable indicating the state of the approval and a function which approves if necessary or early returns\nfunction useApproveZapper(zappingToken: string): [ApprovalState, () => Promise<void>] {\n  const grapeFinance = useGrapeFinance();\n  let token: ERC20;\n\n  if (zappingToken === GRAPE_TICKER) token = grapeFinance.GRAPE;\n  else if (zappingToken === WINE_TICKER) token = grapeFinance.WINE;\n  else if (zappingToken === MIM_TICKER) token = grapeFinance.externalTokens[MIM_TICKER];\n  const pendingApproval = useHasPendingApproval(token.address, ZAPPER_ROUTER_ADDR);\n  const currentAllowance = useAllowance(token, ZAPPER_ROUTER_ADDR, pendingApproval);\n\n  // check the current approval status\n  const approvalState: ApprovalState = useMemo(() => {\n    // we might not have enough data to know whether or not we need to approve\n    if (!currentAllowance) return ApprovalState.UNKNOWN;\n\n    // amountToApprove will be defined if currentAllowance is\n    return currentAllowance.lt(APPROVE_BASE_AMOUNT)\n      ? pendingApproval\n        ? ApprovalState.PENDING\n        : ApprovalState.NOT_APPROVED\n      : ApprovalState.APPROVED;\n  }, [currentAllowance, pendingApproval, token, grapeFinance]);\n\n  const addTransaction = useTransactionAdder();\n\n  const approve = useCallback(async (): Promise<void> => {\n    if (approvalState !== ApprovalState.NOT_APPROVED) {\n      console.error('approve was called unnecessarily');\n      return;\n    }\n\n    const response = await token.approve(ZAPPER_ROUTER_ADDR, APPROVE_AMOUNT);\n    addTransaction(response, {\n      summary: `Approve ${token.symbol}`,\n      approval: {\n        tokenAddress: token.address,\n        spender: ZAPPER_ROUTER_ADDR,\n      },\n    });\n  }, [approvalState, token, addTransaction]);\n\n  return [approvalState, approve];\n}\n\nexport default useApproveZapper;\n","E:\\projects\\adey\\front-end-main\\src\\components\\TokenSymbolAccessory\\TokenSymbolAccessory.tsx",[],"E:\\projects\\adey\\front-end-main\\src\\components\\TokenSymbolButtonAccessory\\TokenSymbolButtonAccessory.tsx",[],"E:\\projects\\adey\\front-end-main\\src\\hooks\\useSoftStats.ts",[],"E:\\projects\\adey\\front-end-main\\src\\components\\VineyardInfoCard\\components\\Stake.tsx",["1452","1453","1454"],"import React, { useMemo, useContext } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { Button, Grid } from '@material-ui/core';\r\n\r\nimport useApprove, { ApprovalState } from '../../../hooks/useApprove';\r\nimport useModal from '../../../hooks/useModal';\r\nimport useStake from '../../../hooks/useStake';\r\nimport useStakedBalance from '../../../hooks/useStakedBalance';\r\nimport useStakedTokenPriceInDollars from '../../../hooks/useStakedTokenPriceInDollars';\r\nimport useTokenBalance from '../../../hooks/useTokenBalance';\r\nimport useWithdraw from '../../../hooks/useWithdraw';\r\n\r\nimport DepositModal from './DepositModal';\r\nimport WithdrawModal from './WithdrawModal';\r\nimport { Bank } from '../../../grape-finance';\r\n\r\ninterface StakeProps {\r\n  bank: Bank;\r\n}\r\n\r\nconst Stake: React.FC<StakeProps> = ({ bank }) => {\r\n  const [approveStatus, approve] = useApprove(bank.depositToken, bank.address);\r\n\r\n  const tokenBalance = useTokenBalance(bank.depositToken);\r\n  const stakedBalance = useStakedBalance(bank.contract, bank.poolId);\r\n\r\n  const { onStake } = useStake(bank);\r\n  const { onWithdraw } = useWithdraw(bank);\r\n\r\n  const [onPresentDeposit, onDismissDeposit] = useModal(\r\n    <DepositModal\r\n      max={tokenBalance}\r\n      decimals={bank.depositToken.decimal}\r\n      onConfirm={(amount) => {\r\n        if (Number(amount) <= 0 || isNaN(Number(amount))) return;\r\n        onStake(amount);\r\n        onDismissDeposit();\r\n      }}\r\n      tokenName={bank.depositTokenName}\r\n    />,\r\n  );\r\n\r\n  const [onPresentWithdraw, onDismissWithdraw] = useModal(\r\n    <WithdrawModal\r\n      max={stakedBalance}\r\n      decimals={bank.depositToken.decimal}\r\n      onConfirm={(amount) => {\r\n        if (Number(amount) <= 0 || isNaN(Number(amount))) return;\r\n        onWithdraw(amount);\r\n        onDismissWithdraw();\r\n      }}\r\n      tokenName={bank.depositTokenName}\r\n    />,\r\n  );\r\n\r\n  return (\r\n    <StyledCardActions>\r\n      {approveStatus !== ApprovalState.APPROVED ? (\r\n        <Button\r\n          disabled={\r\n            bank.closedForStaking || approveStatus === ApprovalState.PENDING || approveStatus === ApprovalState.UNKNOWN\r\n          }\r\n          onClick={approve}\r\n          className={\r\n            bank.closedForStaking || approveStatus === ApprovalState.PENDING || approveStatus === ApprovalState.UNKNOWN\r\n              ? 'shinyButtonDisabled'\r\n              : 'shinyButton'\r\n          }\r\n        >\r\n          {`Approve ${bank.depositTokenName}`}\r\n        </Button>\r\n      ) : (\r\n        <Grid item xs={12} md={12} lg={12}>\r\n          <Grid container alignItems=\"baseline\" justifyContent=\"space-between\">\r\n            <Grid item xs={6} style={{ textAlign: 'center', marginTop: '15px' }}>\r\n              <Button style={{ border: '1px solid black', color: 'black' }} onClick={onPresentWithdraw}>\r\n                -\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={6} style={{ textAlign: 'center', marginTop: '15px' }}>\r\n              <Button\r\n                disabled={bank.closedForStaking}\r\n                style={{ border: '1px solid black', color: 'black' }}\r\n                onClick={() => (bank.closedForStaking ? null : onPresentDeposit())}\r\n              >\r\n                +\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      )}\r\n    </StyledCardActions>\r\n  );\r\n};\r\n\r\nconst StyledCardActions = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-top: 28px;\r\n  width: 100%;\r\n`;\r\n\r\nexport default Stake;\r\n","E:\\projects\\adey\\front-end-main\\src\\components\\VineyardInfoCard\\components\\DepositModal.tsx",["1455"],"E:\\projects\\adey\\front-end-main\\src\\components\\VineyardInfoCard\\components\\WithdrawModal.tsx",[],"E:\\projects\\adey\\front-end-main\\src\\components\\VineyardInfoCard\\components\\Harvest.tsx",["1456","1457","1458","1459","1460","1461","1462","1463","1464","1465","1466","1467","1468"],"import React, { useMemo } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { Button, Card, CardContent, Typography, Grid } from '@material-ui/core';\r\n// import Button from '../../../components/Button';\r\n// import Card from '../../../components/Card';\r\n// import CardContent from '../../../components/CardContent';\r\nimport CardIcon from '../../../components/CardIcon';\r\nimport Label from '../../../components/Label';\r\nimport Value from '../../../components/Value';\r\nimport useEarnings from '../../../hooks/useEarnings';\r\nimport useHarvest from '../../../hooks/useHarvest';\r\n\r\nimport { getDisplayBalance } from '../../../utils/formatBalance';\r\nimport TokenSymbol from '../../../components/TokenSymbol';\r\nimport { Bank } from '../../../grape-finance';\r\nimport useGrapeStats from '../../../hooks/useGrapeStats';\r\nimport useShareStats from '../../../hooks/useWineStats';\r\nimport ReactTooltip from 'react-tooltip';\r\nimport rewards from '../../../assets/jsons/rewards.json';\r\n\r\ninterface HarvestProps {\r\n  bank: Bank;\r\n}\r\n\r\nconst Harvest: React.FC<HarvestProps> = ({ bank }) => {\r\n  const earnings = useEarnings(bank.contract, bank.earnTokenName, bank.poolId);\r\n\r\n  const { onReward } = useHarvest(bank);\r\n  const grapeStats = useGrapeStats();\r\n  const tShareStats = useShareStats();\r\n  const tokenName = bank.earnTokenName === 'AKUSD' ? 'AKUSD' : 'AKSHARE';\r\n  const tokenStats = bank.earnTokenName === 'AKSHARE' ? tShareStats : grapeStats;\r\n\r\n  const tokenPriceInDollars = useMemo(\r\n    () => (tokenStats ? Number(tokenStats.priceInDollars).toFixed(2) : null),\r\n    [tokenStats],\r\n  );\r\n  const earnedInDollars = (Number(tokenPriceInDollars) * Number(getDisplayBalance(earnings))).toFixed(2);\r\n\r\n  return (\r\n    <Button\r\n      onClick={onReward}\r\n      disabled={earnings.eq(0)}\r\n      style={{ width: '100%' }}\r\n      className={earnings.eq(0) ? 'shinyButtonDisabled' : 'shinyButton'}\r\n    >\r\n      Claim\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport default Harvest;\r\n","E:\\projects\\adey\\front-end-main\\src\\hooks\\useBNBPrice.ts",[],{"ruleId":"1469","replacedBy":"1470"},{"ruleId":"1471","replacedBy":"1472"},{"ruleId":"1469","replacedBy":"1470"},{"ruleId":"1471","replacedBy":"1472"},{"ruleId":"1473","severity":1,"message":"1474","line":6,"column":8,"nodeType":"1475","messageId":"1476","endLine":6,"endColumn":17},{"ruleId":"1473","severity":1,"message":"1477","line":2,"column":9,"nodeType":"1475","messageId":"1476","endLine":2,"endColumn":13},{"ruleId":"1473","severity":1,"message":"1478","line":2,"column":15,"nodeType":"1475","messageId":"1476","endLine":2,"endColumn":19},{"ruleId":"1473","severity":1,"message":"1479","line":7,"column":7,"nodeType":"1475","messageId":"1476","endLine":7,"endColumn":31},{"ruleId":"1480","severity":1,"message":"1481","line":38,"column":9,"nodeType":"1482","endLine":38,"endColumn":59},{"ruleId":"1483","severity":1,"message":"1484","line":18,"column":10,"nodeType":"1475","messageId":"1476","endLine":18,"endColumn":30},{"ruleId":"1483","severity":1,"message":"1485","line":19,"column":10,"nodeType":"1475","messageId":"1476","endLine":19,"endColumn":16},{"ruleId":"1483","severity":1,"message":"1486","line":19,"column":18,"nodeType":"1475","messageId":"1476","endLine":19,"endColumn":22},{"ruleId":"1483","severity":1,"message":"1487","line":19,"column":24,"nodeType":"1475","messageId":"1476","endLine":19,"endColumn":35},{"ruleId":"1483","severity":1,"message":"1488","line":19,"column":43,"nodeType":"1475","messageId":"1476","endLine":19,"endColumn":48},{"ruleId":"1483","severity":1,"message":"1489","line":20,"column":8,"nodeType":"1475","messageId":"1476","endLine":20,"endColumn":11},{"ruleId":"1483","severity":1,"message":"1490","line":21,"column":8,"nodeType":"1475","messageId":"1476","endLine":21,"endColumn":15},{"ruleId":"1483","severity":1,"message":"1491","line":22,"column":8,"nodeType":"1475","messageId":"1476","endLine":22,"endColumn":13},{"ruleId":"1483","severity":1,"message":"1492","line":24,"column":8,"nodeType":"1475","messageId":"1476","endLine":24,"endColumn":17},{"ruleId":"1483","severity":1,"message":"1493","line":25,"column":8,"nodeType":"1475","messageId":"1476","endLine":25,"endColumn":16},{"ruleId":"1483","severity":1,"message":"1494","line":31,"column":8,"nodeType":"1475","messageId":"1476","endLine":31,"endColumn":15},{"ruleId":"1483","severity":1,"message":"1495","line":35,"column":28,"nodeType":"1475","messageId":"1476","endLine":35,"endColumn":40},{"ruleId":"1483","severity":1,"message":"1496","line":36,"column":28,"nodeType":"1475","messageId":"1476","endLine":36,"endColumn":39},{"ruleId":"1483","severity":1,"message":"1497","line":37,"column":28,"nodeType":"1475","messageId":"1476","endLine":37,"endColumn":39},{"ruleId":"1483","severity":1,"message":"1498","line":43,"column":8,"nodeType":"1475","messageId":"1476","endLine":43,"endColumn":21},{"ruleId":"1483","severity":1,"message":"1499","line":44,"column":8,"nodeType":"1475","messageId":"1476","endLine":44,"endColumn":13},{"ruleId":"1483","severity":1,"message":"1500","line":45,"column":8,"nodeType":"1475","messageId":"1476","endLine":45,"endColumn":18},{"ruleId":"1483","severity":1,"message":"1501","line":46,"column":8,"nodeType":"1475","messageId":"1476","endLine":46,"endColumn":19},{"ruleId":"1483","severity":1,"message":"1502","line":47,"column":8,"nodeType":"1475","messageId":"1476","endLine":47,"endColumn":19},{"ruleId":"1483","severity":1,"message":"1503","line":78,"column":9,"nodeType":"1475","messageId":"1476","endLine":78,"endColumn":21},{"ruleId":"1483","severity":1,"message":"1504","line":126,"column":9,"nodeType":"1475","messageId":"1476","endLine":126,"endColumn":28},{"ruleId":"1483","severity":1,"message":"1505","line":131,"column":9,"nodeType":"1475","messageId":"1476","endLine":131,"endColumn":31},{"ruleId":"1483","severity":1,"message":"1506","line":135,"column":9,"nodeType":"1475","messageId":"1476","endLine":135,"endColumn":25},{"ruleId":"1483","severity":1,"message":"1507","line":145,"column":9,"nodeType":"1475","messageId":"1476","endLine":145,"endColumn":24},{"ruleId":"1483","severity":1,"message":"1508","line":149,"column":9,"nodeType":"1475","messageId":"1476","endLine":149,"endColumn":23},{"ruleId":"1483","severity":1,"message":"1509","line":153,"column":9,"nodeType":"1475","messageId":"1476","endLine":153,"endColumn":18},{"ruleId":"1510","severity":1,"message":"1511","line":602,"column":11,"nodeType":"1512","endLine":602,"endColumn":96},{"ruleId":"1510","severity":1,"message":"1511","line":605,"column":11,"nodeType":"1512","endLine":605,"endColumn":96},{"ruleId":"1510","severity":1,"message":"1511","line":608,"column":11,"nodeType":"1512","endLine":608,"endColumn":96},{"ruleId":"1483","severity":1,"message":"1513","line":3,"column":8,"nodeType":"1475","messageId":"1476","endLine":3,"endColumn":14},{"ruleId":"1483","severity":1,"message":"1486","line":10,"column":15,"nodeType":"1475","messageId":"1476","endLine":10,"endColumn":19},{"ruleId":"1483","severity":1,"message":"1487","line":10,"column":21,"nodeType":"1475","messageId":"1476","endLine":10,"endColumn":32},{"ruleId":"1483","severity":1,"message":"1499","line":12,"column":10,"nodeType":"1475","messageId":"1476","endLine":12,"endColumn":15},{"ruleId":"1483","severity":1,"message":"1514","line":28,"column":8,"nodeType":"1475","messageId":"1476","endLine":28,"endColumn":25},{"ruleId":"1483","severity":1,"message":"1484","line":33,"column":10,"nodeType":"1475","messageId":"1476","endLine":33,"endColumn":30},{"ruleId":"1483","severity":1,"message":"1503","line":59,"column":9,"nodeType":"1475","messageId":"1476","endLine":59,"endColumn":21},{"ruleId":"1483","severity":1,"message":"1509","line":60,"column":9,"nodeType":"1475","messageId":"1476","endLine":60,"endColumn":18},{"ruleId":"1483","severity":1,"message":"1515","line":67,"column":9,"nodeType":"1475","messageId":"1476","endLine":67,"endColumn":22},{"ruleId":"1483","severity":1,"message":"1516","line":68,"column":11,"nodeType":"1475","messageId":"1476","endLine":68,"endColumn":13},{"ruleId":"1483","severity":1,"message":"1517","line":79,"column":9,"nodeType":"1475","messageId":"1476","endLine":79,"endColumn":16},{"ruleId":"1483","severity":1,"message":"1518","line":82,"column":9,"nodeType":"1475","messageId":"1476","endLine":82,"endColumn":25},{"ruleId":"1483","severity":1,"message":"1519","line":86,"column":9,"nodeType":"1475","messageId":"1476","endLine":86,"endColumn":22},{"ruleId":"1483","severity":1,"message":"1520","line":87,"column":9,"nodeType":"1475","messageId":"1476","endLine":87,"endColumn":19},{"ruleId":"1483","severity":1,"message":"1499","line":8,"column":10,"nodeType":"1475","messageId":"1476","endLine":8,"endColumn":15},{"ruleId":"1483","severity":1,"message":"1521","line":12,"column":8,"nodeType":"1475","messageId":"1476","endLine":12,"endColumn":16},{"ruleId":"1480","severity":1,"message":"1522","line":59,"column":6,"nodeType":"1523","endLine":59,"endColumn":8,"suggestions":"1524"},{"ruleId":"1473","severity":1,"message":"1525","line":81,"column":9,"nodeType":"1475","messageId":"1476","endLine":81,"endColumn":19},{"ruleId":"1473","severity":1,"message":"1526","line":416,"column":7,"nodeType":"1475","messageId":"1476","endLine":416,"endColumn":18},{"ruleId":"1473","severity":1,"message":"1527","line":4,"column":10,"nodeType":"1475","messageId":"1476","endLine":4,"endColumn":15},{"ruleId":"1473","severity":1,"message":"1528","line":4,"column":25,"nodeType":"1475","messageId":"1476","endLine":4,"endColumn":38},{"ruleId":"1473","severity":1,"message":"1529","line":9,"column":8,"nodeType":"1475","messageId":"1476","endLine":9,"endColumn":14},{"ruleId":"1473","severity":1,"message":"1530","line":22,"column":8,"nodeType":"1475","messageId":"1476","endLine":22,"endColumn":30},{"ruleId":"1473","severity":1,"message":"1531","line":25,"column":28,"nodeType":"1475","messageId":"1476","endLine":25,"endColumn":31},{"ruleId":"1473","severity":1,"message":"1507","line":80,"column":9,"nodeType":"1475","messageId":"1476","endLine":80,"endColumn":24},{"ruleId":"1473","severity":1,"message":"1532","line":1,"column":17,"nodeType":"1475","messageId":"1476","endLine":1,"endColumn":28},{"ruleId":"1473","severity":1,"message":"1533","line":1,"column":30,"nodeType":"1475","messageId":"1476","endLine":1,"endColumn":37},{"ruleId":"1473","severity":1,"message":"1534","line":1,"column":39,"nodeType":"1475","messageId":"1476","endLine":1,"endColumn":47},{"ruleId":"1473","severity":1,"message":"1527","line":2,"column":10,"nodeType":"1475","messageId":"1476","endLine":2,"endColumn":15},{"ruleId":"1473","severity":1,"message":"1528","line":2,"column":25,"nodeType":"1475","messageId":"1476","endLine":2,"endColumn":38},{"ruleId":"1473","severity":1,"message":"1488","line":6,"column":28,"nodeType":"1475","messageId":"1476","endLine":6,"endColumn":33},{"ruleId":"1510","severity":1,"message":"1511","line":58,"column":21,"nodeType":"1512","endLine":58,"endColumn":55},{"ruleId":"1510","severity":1,"message":"1511","line":63,"column":21,"nodeType":"1512","endLine":63,"endColumn":57},{"ruleId":"1510","severity":1,"message":"1511","line":68,"column":21,"nodeType":"1512","endLine":68,"endColumn":54},{"ruleId":"1510","severity":1,"message":"1511","line":73,"column":21,"nodeType":"1512","endLine":73,"endColumn":53},{"ruleId":"1510","severity":1,"message":"1511","line":78,"column":21,"nodeType":"1512","endLine":78,"endColumn":54},{"ruleId":"1510","severity":1,"message":"1511","line":84,"column":19,"nodeType":"1512","endLine":84,"endColumn":53},{"ruleId":"1510","severity":1,"message":"1511","line":105,"column":19,"nodeType":"1512","endLine":105,"endColumn":53},{"ruleId":"1510","severity":1,"message":"1511","line":126,"column":19,"nodeType":"1512","endLine":126,"endColumn":53},{"ruleId":"1510","severity":1,"message":"1511","line":10,"column":9,"nodeType":"1512","endLine":10,"endColumn":97},{"ruleId":"1473","severity":1,"message":"1535","line":3,"column":8,"nodeType":"1475","messageId":"1476","endLine":3,"endColumn":16},{"ruleId":"1473","severity":1,"message":"1536","line":4,"column":8,"nodeType":"1475","messageId":"1476","endLine":4,"endColumn":15},{"ruleId":"1473","severity":1,"message":"1500","line":5,"column":8,"nodeType":"1475","messageId":"1476","endLine":5,"endColumn":18},{"ruleId":"1473","severity":1,"message":"1537","line":6,"column":8,"nodeType":"1475","messageId":"1476","endLine":6,"endColumn":16},{"ruleId":"1473","severity":1,"message":"1538","line":15,"column":9,"nodeType":"1475","messageId":"1476","endLine":15,"endColumn":24},{"ruleId":"1473","severity":1,"message":"1539","line":16,"column":9,"nodeType":"1475","messageId":"1476","endLine":16,"endColumn":23},{"ruleId":"1473","severity":1,"message":"1540","line":17,"column":9,"nodeType":"1475","messageId":"1476","endLine":17,"endColumn":24},{"ruleId":"1473","severity":1,"message":"1541","line":18,"column":9,"nodeType":"1475","messageId":"1476","endLine":18,"endColumn":26},{"ruleId":"1473","severity":1,"message":"1542","line":20,"column":9,"nodeType":"1475","messageId":"1476","endLine":20,"endColumn":24},{"ruleId":"1473","severity":1,"message":"1543","line":21,"column":9,"nodeType":"1475","messageId":"1476","endLine":21,"endColumn":23},{"ruleId":"1473","severity":1,"message":"1544","line":22,"column":9,"nodeType":"1475","messageId":"1476","endLine":22,"endColumn":24},{"ruleId":"1473","severity":1,"message":"1545","line":23,"column":9,"nodeType":"1475","messageId":"1476","endLine":23,"endColumn":26},{"ruleId":"1473","severity":1,"message":"1546","line":25,"column":9,"nodeType":"1475","messageId":"1476","endLine":25,"endColumn":26},{"ruleId":"1473","severity":1,"message":"1547","line":26,"column":9,"nodeType":"1475","messageId":"1476","endLine":26,"endColumn":25},{"ruleId":"1473","severity":1,"message":"1548","line":27,"column":9,"nodeType":"1475","messageId":"1476","endLine":27,"endColumn":26},{"ruleId":"1473","severity":1,"message":"1549","line":28,"column":9,"nodeType":"1475","messageId":"1476","endLine":28,"endColumn":28},{"ruleId":"1473","severity":1,"message":"1550","line":30,"column":9,"nodeType":"1475","messageId":"1476","endLine":30,"endColumn":25},{"ruleId":"1473","severity":1,"message":"1551","line":31,"column":9,"nodeType":"1475","messageId":"1476","endLine":31,"endColumn":24},{"ruleId":"1473","severity":1,"message":"1552","line":32,"column":9,"nodeType":"1475","messageId":"1476","endLine":32,"endColumn":25},{"ruleId":"1473","severity":1,"message":"1553","line":33,"column":9,"nodeType":"1475","messageId":"1476","endLine":33,"endColumn":27},{"ruleId":"1473","severity":1,"message":"1531","line":4,"column":10,"nodeType":"1475","messageId":"1476","endLine":4,"endColumn":13},{"ruleId":"1473","severity":1,"message":"1554","line":4,"column":15,"nodeType":"1475","messageId":"1476","endLine":4,"endColumn":24},{"ruleId":"1483","severity":1,"message":"1555","line":24,"column":28,"nodeType":"1475","messageId":"1476","endLine":24,"endColumn":44},{"ruleId":"1480","severity":1,"message":"1556","line":21,"column":6,"nodeType":"1523","endLine":21,"endColumn":42,"suggestions":"1557"},{"ruleId":"1480","severity":1,"message":"1558","line":24,"column":6,"nodeType":"1523","endLine":24,"endColumn":55,"suggestions":"1559"},{"ruleId":"1473","severity":1,"message":"1560","line":2,"column":10,"nodeType":"1475","messageId":"1476","endLine":2,"endColumn":21},{"ruleId":"1473","severity":1,"message":"1561","line":6,"column":10,"nodeType":"1475","messageId":"1476","endLine":6,"endColumn":27},{"ruleId":"1473","severity":1,"message":"1562","line":14,"column":25,"nodeType":"1475","messageId":"1476","endLine":14,"endColumn":41},{"ruleId":"1480","severity":1,"message":"1563","line":80,"column":6,"nodeType":"1523","endLine":80,"endColumn":27,"suggestions":"1564"},{"ruleId":"1473","severity":1,"message":"1531","line":2,"column":10,"nodeType":"1475","messageId":"1476","endLine":2,"endColumn":13},{"ruleId":"1473","severity":1,"message":"1565","line":10,"column":8,"nodeType":"1475","messageId":"1476","endLine":10,"endColumn":25},{"ruleId":"1566","severity":1,"message":"1567","line":105,"column":59,"nodeType":"1568","messageId":"1569","endLine":105,"endColumn":61},{"ruleId":"1473","severity":1,"message":"1570","line":8,"column":17,"nodeType":"1475","messageId":"1476","endLine":8,"endColumn":26},{"ruleId":"1473","severity":1,"message":"1571","line":20,"column":8,"nodeType":"1475","messageId":"1476","endLine":20,"endColumn":17},{"ruleId":"1473","severity":1,"message":"1502","line":22,"column":8,"nodeType":"1475","messageId":"1476","endLine":22,"endColumn":19},{"ruleId":"1473","severity":1,"message":"1572","line":23,"column":8,"nodeType":"1475","messageId":"1476","endLine":23,"endColumn":16},{"ruleId":"1473","severity":1,"message":"1573","line":24,"column":8,"nodeType":"1475","messageId":"1476","endLine":24,"endColumn":15},{"ruleId":"1473","severity":1,"message":"1574","line":27,"column":8,"nodeType":"1475","messageId":"1476","endLine":27,"endColumn":16},{"ruleId":"1473","severity":1,"message":"1575","line":28,"column":8,"nodeType":"1475","messageId":"1476","endLine":28,"endColumn":16},{"ruleId":"1473","severity":1,"message":"1576","line":29,"column":8,"nodeType":"1475","messageId":"1476","endLine":29,"endColumn":16},{"ruleId":"1473","severity":1,"message":"1577","line":30,"column":8,"nodeType":"1475","messageId":"1476","endLine":30,"endColumn":20},{"ruleId":"1473","severity":1,"message":"1578","line":31,"column":8,"nodeType":"1475","messageId":"1476","endLine":31,"endColumn":17},{"ruleId":"1473","severity":1,"message":"1579","line":32,"column":8,"nodeType":"1475","messageId":"1476","endLine":32,"endColumn":18},{"ruleId":"1473","severity":1,"message":"1580","line":33,"column":8,"nodeType":"1475","messageId":"1476","endLine":33,"endColumn":15},{"ruleId":"1473","severity":1,"message":"1581","line":34,"column":8,"nodeType":"1475","messageId":"1476","endLine":34,"endColumn":17},{"ruleId":"1473","severity":1,"message":"1582","line":35,"column":8,"nodeType":"1475","messageId":"1476","endLine":35,"endColumn":19},{"ruleId":"1473","severity":1,"message":"1583","line":36,"column":8,"nodeType":"1475","messageId":"1476","endLine":36,"endColumn":20},{"ruleId":"1473","severity":1,"message":"1584","line":38,"column":8,"nodeType":"1475","messageId":"1476","endLine":38,"endColumn":18},{"ruleId":"1473","severity":1,"message":"1585","line":43,"column":8,"nodeType":"1475","messageId":"1476","endLine":43,"endColumn":20},{"ruleId":"1473","severity":1,"message":"1586","line":45,"column":8,"nodeType":"1475","messageId":"1476","endLine":45,"endColumn":16},{"ruleId":"1473","severity":1,"message":"1587","line":46,"column":8,"nodeType":"1475","messageId":"1476","endLine":46,"endColumn":18},{"ruleId":"1473","severity":1,"message":"1588","line":51,"column":8,"nodeType":"1475","messageId":"1476","endLine":51,"endColumn":16},{"ruleId":"1473","severity":1,"message":"1589","line":52,"column":8,"nodeType":"1475","messageId":"1476","endLine":52,"endColumn":18},{"ruleId":"1473","severity":1,"message":"1590","line":53,"column":8,"nodeType":"1475","messageId":"1476","endLine":53,"endColumn":18},{"ruleId":"1473","severity":1,"message":"1591","line":54,"column":8,"nodeType":"1475","messageId":"1476","endLine":54,"endColumn":23},{"ruleId":"1473","severity":1,"message":"1592","line":55,"column":8,"nodeType":"1475","messageId":"1476","endLine":55,"endColumn":24},{"ruleId":"1473","severity":1,"message":"1593","line":56,"column":8,"nodeType":"1475","messageId":"1476","endLine":56,"endColumn":25},{"ruleId":"1473","severity":1,"message":"1594","line":57,"column":8,"nodeType":"1475","messageId":"1476","endLine":57,"endColumn":24},{"ruleId":"1473","severity":1,"message":"1595","line":58,"column":8,"nodeType":"1475","messageId":"1476","endLine":58,"endColumn":19},{"ruleId":"1473","severity":1,"message":"1596","line":59,"column":8,"nodeType":"1475","messageId":"1476","endLine":59,"endColumn":19},{"ruleId":"1473","severity":1,"message":"1597","line":60,"column":8,"nodeType":"1475","messageId":"1476","endLine":60,"endColumn":32},{"ruleId":"1473","severity":1,"message":"1598","line":61,"column":8,"nodeType":"1475","messageId":"1476","endLine":61,"endColumn":16},{"ruleId":"1473","severity":1,"message":"1599","line":62,"column":8,"nodeType":"1475","messageId":"1476","endLine":62,"endColumn":20},{"ruleId":"1473","severity":1,"message":"1600","line":63,"column":8,"nodeType":"1475","messageId":"1476","endLine":63,"endColumn":22},{"ruleId":"1473","severity":1,"message":"1601","line":64,"column":8,"nodeType":"1475","messageId":"1476","endLine":64,"endColumn":15},{"ruleId":"1473","severity":1,"message":"1602","line":65,"column":8,"nodeType":"1475","messageId":"1476","endLine":65,"endColumn":22},{"ruleId":"1473","severity":1,"message":"1603","line":66,"column":8,"nodeType":"1475","messageId":"1476","endLine":66,"endColumn":19},{"ruleId":"1473","severity":1,"message":"1604","line":67,"column":8,"nodeType":"1475","messageId":"1476","endLine":67,"endColumn":24},{"ruleId":"1473","severity":1,"message":"1605","line":68,"column":8,"nodeType":"1475","messageId":"1476","endLine":68,"endColumn":23},{"ruleId":"1473","severity":1,"message":"1606","line":69,"column":8,"nodeType":"1475","messageId":"1476","endLine":69,"endColumn":17},{"ruleId":"1473","severity":1,"message":"1485","line":77,"column":8,"nodeType":"1475","messageId":"1476","endLine":77,"endColumn":14},{"ruleId":"1473","severity":1,"message":"1607","line":78,"column":8,"nodeType":"1475","messageId":"1476","endLine":78,"endColumn":16},{"ruleId":"1473","severity":1,"message":"1608","line":79,"column":8,"nodeType":"1475","messageId":"1476","endLine":79,"endColumn":29},{"ruleId":"1473","severity":1,"message":"1609","line":157,"column":7,"nodeType":"1475","messageId":"1476","endLine":157,"endColumn":17},{"ruleId":"1473","severity":1,"message":"1610","line":209,"column":9,"nodeType":"1475","messageId":"1476","endLine":209,"endColumn":13},{"ruleId":"1473","severity":1,"message":"1611","line":211,"column":9,"nodeType":"1475","messageId":"1476","endLine":211,"endColumn":14},{"ruleId":"1473","severity":1,"message":"1612","line":218,"column":9,"nodeType":"1475","messageId":"1476","endLine":218,"endColumn":26},{"ruleId":"1473","severity":1,"message":"1613","line":223,"column":9,"nodeType":"1475","messageId":"1476","endLine":223,"endColumn":25},{"ruleId":"1473","severity":1,"message":"1614","line":231,"column":9,"nodeType":"1475","messageId":"1476","endLine":231,"endColumn":26},{"ruleId":"1473","severity":1,"message":"1615","line":239,"column":9,"nodeType":"1475","messageId":"1476","endLine":239,"endColumn":27},{"ruleId":"1473","severity":1,"message":"1616","line":247,"column":9,"nodeType":"1475","messageId":"1476","endLine":247,"endColumn":32},{"ruleId":"1473","severity":1,"message":"1617","line":255,"column":9,"nodeType":"1475","messageId":"1476","endLine":255,"endColumn":16},{"ruleId":"1473","severity":1,"message":"1618","line":256,"column":9,"nodeType":"1475","messageId":"1476","endLine":256,"endColumn":23},{"ruleId":"1473","severity":1,"message":"1619","line":259,"column":9,"nodeType":"1475","messageId":"1476","endLine":259,"endColumn":23},{"ruleId":"1473","severity":1,"message":"1620","line":263,"column":9,"nodeType":"1475","messageId":"1476","endLine":263,"endColumn":17},{"ruleId":"1473","severity":1,"message":"1621","line":2,"column":10,"nodeType":"1475","messageId":"1476","endLine":2,"endColumn":17},{"ruleId":"1480","severity":1,"message":"1622","line":24,"column":5,"nodeType":"1523","endLine":24,"endColumn":50,"suggestions":"1623"},{"ruleId":"1473","severity":1,"message":"1624","line":2,"column":10,"nodeType":"1475","messageId":"1476","endLine":2,"endColumn":14},{"ruleId":"1473","severity":1,"message":"1485","line":3,"column":10,"nodeType":"1475","messageId":"1476","endLine":3,"endColumn":16},{"ruleId":"1510","severity":1,"message":"1511","line":48,"column":9,"nodeType":"1512","endLine":48,"endColumn":95},{"ruleId":"1473","severity":1,"message":"1625","line":17,"column":3,"nodeType":"1475","messageId":"1476","endLine":17,"endColumn":21},{"ruleId":"1473","severity":1,"message":"1626","line":18,"column":3,"nodeType":"1475","messageId":"1476","endLine":18,"endColumn":24},{"ruleId":"1473","severity":1,"message":"1627","line":35,"column":10,"nodeType":"1475","messageId":"1476","endLine":35,"endColumn":17},{"ruleId":"1566","severity":1,"message":"1567","line":1656,"column":52,"nodeType":"1568","messageId":"1569","endLine":1656,"endColumn":54},{"ruleId":"1566","severity":1,"message":"1628","line":1854,"column":32,"nodeType":"1568","messageId":"1569","endLine":1854,"endColumn":34},{"ruleId":"1473","severity":1,"message":"1629","line":7,"column":8,"nodeType":"1475","messageId":"1476","endLine":7,"endColumn":15},{"ruleId":"1473","severity":1,"message":"1630","line":20,"column":10,"nodeType":"1475","messageId":"1476","endLine":20,"endColumn":14},{"ruleId":"1483","severity":1,"message":"1485","line":5,"column":52,"nodeType":"1475","messageId":"1476","endLine":5,"endColumn":58},{"ruleId":"1473","severity":1,"message":"1488","line":2,"column":16,"nodeType":"1475","messageId":"1476","endLine":2,"endColumn":21},{"ruleId":"1473","severity":1,"message":"1631","line":2,"column":23,"nodeType":"1475","messageId":"1476","endLine":2,"endColumn":33},{"ruleId":"1473","severity":1,"message":"1632","line":3,"column":8,"nodeType":"1475","messageId":"1476","endLine":3,"endColumn":19},{"ruleId":"1473","severity":1,"message":"1633","line":5,"column":8,"nodeType":"1475","messageId":"1476","endLine":5,"endColumn":16},{"ruleId":"1473","severity":1,"message":"1530","line":6,"column":8,"nodeType":"1475","messageId":"1476","endLine":6,"endColumn":30},{"ruleId":"1473","severity":1,"message":"1485","line":8,"column":10,"nodeType":"1475","messageId":"1476","endLine":8,"endColumn":16},{"ruleId":"1473","severity":1,"message":"1594","line":9,"column":8,"nodeType":"1475","messageId":"1476","endLine":9,"endColumn":24},{"ruleId":"1473","severity":1,"message":"1634","line":19,"column":10,"nodeType":"1475","messageId":"1476","endLine":19,"endColumn":19},{"ruleId":"1473","severity":1,"message":"1635","line":21,"column":9,"nodeType":"1475","messageId":"1476","endLine":21,"endColumn":25},{"ruleId":"1473","severity":1,"message":"1507","line":25,"column":9,"nodeType":"1475","messageId":"1476","endLine":25,"endColumn":24},{"ruleId":"1473","severity":1,"message":"1485","line":2,"column":10,"nodeType":"1475","messageId":"1476","endLine":2,"endColumn":16},{"ruleId":"1473","severity":1,"message":"1486","line":2,"column":18,"nodeType":"1475","messageId":"1476","endLine":2,"endColumn":22},{"ruleId":"1473","severity":1,"message":"1487","line":2,"column":24,"nodeType":"1475","messageId":"1476","endLine":2,"endColumn":35},{"ruleId":"1473","severity":1,"message":"1488","line":2,"column":43,"nodeType":"1475","messageId":"1476","endLine":2,"endColumn":48},{"ruleId":"1473","severity":1,"message":"1631","line":2,"column":50,"nodeType":"1475","messageId":"1476","endLine":2,"endColumn":60},{"ruleId":"1473","severity":1,"message":"1632","line":3,"column":8,"nodeType":"1475","messageId":"1476","endLine":3,"endColumn":19},{"ruleId":"1473","severity":1,"message":"1636","line":5,"column":8,"nodeType":"1475","messageId":"1476","endLine":5,"endColumn":23},{"ruleId":"1473","severity":1,"message":"1624","line":11,"column":10,"nodeType":"1475","messageId":"1476","endLine":11,"endColumn":14},{"ruleId":"1473","severity":1,"message":"1637","line":15,"column":8,"nodeType":"1475","messageId":"1476","endLine":15,"endColumn":22},{"ruleId":"1480","severity":1,"message":"1638","line":24,"column":6,"nodeType":"1523","endLine":24,"endColumn":54,"suggestions":"1639"},{"ruleId":"1566","severity":1,"message":"1567","line":55,"column":15,"nodeType":"1568","messageId":"1569","endLine":55,"endColumn":17},{"ruleId":"1566","severity":1,"message":"1567","line":75,"column":71,"nodeType":"1568","messageId":"1569","endLine":75,"endColumn":73},{"ruleId":"1566","severity":1,"message":"1567","line":102,"column":16,"nodeType":"1568","messageId":"1569","endLine":102,"endColumn":18},{"ruleId":"1566","severity":1,"message":"1567","line":103,"column":16,"nodeType":"1568","messageId":"1569","endLine":103,"endColumn":18},{"ruleId":"1566","severity":1,"message":"1567","line":108,"column":16,"nodeType":"1568","messageId":"1569","endLine":108,"endColumn":18},{"ruleId":"1566","severity":1,"message":"1567","line":109,"column":16,"nodeType":"1568","messageId":"1569","endLine":109,"endColumn":18},{"ruleId":"1483","severity":1,"message":"1640","line":18,"column":10,"nodeType":"1475","messageId":"1476","endLine":18,"endColumn":15},{"ruleId":"1480","severity":1,"message":"1641","line":39,"column":8,"nodeType":"1523","endLine":39,"endColumn":64,"suggestions":"1642"},{"ruleId":"1643","severity":1,"message":"1644","line":37,"column":98,"nodeType":"1568","messageId":"1645","endLine":37,"endColumn":99},{"ruleId":"1480","severity":1,"message":"1646","line":38,"column":6,"nodeType":"1523","endLine":38,"endColumn":18,"suggestions":"1647"},{"ruleId":"1473","severity":1,"message":"1560","line":4,"column":10,"nodeType":"1475","messageId":"1476","endLine":4,"endColumn":21},{"ruleId":"1480","severity":1,"message":"1622","line":24,"column":5,"nodeType":"1523","endLine":24,"endColumn":50,"suggestions":"1648"},{"ruleId":"1473","severity":1,"message":"1531","line":1,"column":10,"nodeType":"1475","messageId":"1476","endLine":1,"endColumn":13},{"ruleId":"1480","severity":1,"message":"1649","line":36,"column":6,"nodeType":"1523","endLine":36,"endColumn":20,"suggestions":"1650"},{"ruleId":"1480","severity":1,"message":"1622","line":19,"column":6,"nodeType":"1523","endLine":19,"endColumn":45,"suggestions":"1651"},{"ruleId":"1480","severity":1,"message":"1652","line":42,"column":6,"nodeType":"1523","endLine":42,"endColumn":22,"suggestions":"1653"},{"ruleId":"1483","severity":1,"message":"1654","line":1,"column":23,"nodeType":"1475","messageId":"1476","endLine":1,"endColumn":31},{"ruleId":"1483","severity":1,"message":"1488","line":3,"column":37,"nodeType":"1475","messageId":"1476","endLine":3,"endColumn":42},{"ruleId":"1655","severity":1,"message":"1656","line":24,"column":27,"nodeType":"1657","messageId":"1658","endLine":24,"endColumn":29},{"ruleId":"1655","severity":1,"message":"1656","line":16,"column":27,"nodeType":"1657","messageId":"1658","endLine":16,"endColumn":29},{"ruleId":"1480","severity":1,"message":"1659","line":20,"column":6,"nodeType":"1523","endLine":20,"endColumn":42,"suggestions":"1660"},{"ruleId":"1473","severity":1,"message":"1661","line":120,"column":7,"nodeType":"1475","messageId":"1476","endLine":120,"endColumn":21},{"ruleId":"1483","severity":1,"message":"1662","line":1,"column":21,"nodeType":"1475","messageId":"1476","endLine":1,"endColumn":31},{"ruleId":"1483","severity":1,"message":"1570","line":2,"column":36,"nodeType":"1475","messageId":"1476","endLine":2,"endColumn":45},{"ruleId":"1473","severity":1,"message":"1663","line":9,"column":8,"nodeType":"1475","messageId":"1476","endLine":9,"endColumn":16},{"ruleId":"1473","severity":1,"message":"1664","line":12,"column":8,"nodeType":"1475","messageId":"1476","endLine":12,"endColumn":13},{"ruleId":"1473","severity":1,"message":"1665","line":13,"column":8,"nodeType":"1475","messageId":"1476","endLine":13,"endColumn":13},{"ruleId":"1510","severity":1,"message":"1511","line":101,"column":11,"nodeType":"1512","endLine":101,"endColumn":41},{"ruleId":"1510","severity":1,"message":"1511","line":102,"column":11,"nodeType":"1512","endLine":102,"endColumn":43},{"ruleId":"1510","severity":1,"message":"1511","line":103,"column":11,"nodeType":"1512","endLine":103,"endColumn":45},{"ruleId":"1510","severity":1,"message":"1511","line":104,"column":11,"nodeType":"1512","endLine":104,"endColumn":45},{"ruleId":"1473","severity":1,"message":"1664","line":7,"column":8,"nodeType":"1475","messageId":"1476","endLine":7,"endColumn":13},{"ruleId":"1473","severity":1,"message":"1665","line":8,"column":8,"nodeType":"1475","messageId":"1476","endLine":8,"endColumn":13},{"ruleId":"1473","severity":1,"message":"1663","line":9,"column":8,"nodeType":"1475","messageId":"1476","endLine":9,"endColumn":16},{"ruleId":"1473","severity":1,"message":"1666","line":17,"column":8,"nodeType":"1475","messageId":"1476","endLine":17,"endColumn":20},{"ruleId":"1473","severity":1,"message":"1667","line":18,"column":8,"nodeType":"1475","messageId":"1476","endLine":18,"endColumn":15},{"ruleId":"1510","severity":1,"message":"1511","line":59,"column":11,"nodeType":"1512","endLine":59,"endColumn":44},{"ruleId":"1510","severity":1,"message":"1511","line":60,"column":11,"nodeType":"1512","endLine":60,"endColumn":44},{"ruleId":"1510","severity":1,"message":"1511","line":61,"column":11,"nodeType":"1512","endLine":61,"endColumn":43},{"ruleId":"1510","severity":1,"message":"1511","line":62,"column":11,"nodeType":"1512","endLine":62,"endColumn":45},{"ruleId":"1510","severity":1,"message":"1511","line":63,"column":11,"nodeType":"1512","endLine":63,"endColumn":44},{"ruleId":"1480","severity":1,"message":"1668","line":21,"column":6,"nodeType":"1523","endLine":21,"endColumn":42,"suggestions":"1669"},{"ruleId":"1480","severity":1,"message":"1670","line":21,"column":7,"nodeType":"1671","endLine":21,"endColumn":27},{"ruleId":"1480","severity":1,"message":"1672","line":30,"column":19,"nodeType":"1671","endLine":30,"endColumn":39},{"ruleId":"1473","severity":1,"message":"1555","line":111,"column":28,"nodeType":"1475","messageId":"1476","endLine":111,"endColumn":44},{"ruleId":"1673","severity":1,"message":"1674","line":136,"column":15,"nodeType":"1512","endLine":136,"endColumn":45},{"ruleId":"1566","severity":1,"message":"1567","line":214,"column":29,"nodeType":"1568","messageId":"1569","endLine":214,"endColumn":31},{"ruleId":"1566","severity":1,"message":"1567","line":219,"column":36,"nodeType":"1568","messageId":"1569","endLine":219,"endColumn":38},{"ruleId":"1473","severity":1,"message":"1488","line":2,"column":43,"nodeType":"1475","messageId":"1476","endLine":2,"endColumn":48},{"ruleId":"1473","severity":1,"message":"1488","line":2,"column":43,"nodeType":"1475","messageId":"1476","endLine":2,"endColumn":48},{"ruleId":"1510","severity":1,"message":"1511","line":36,"column":9,"nodeType":"1512","endLine":36,"endColumn":95},{"ruleId":"1566","severity":1,"message":"1567","line":55,"column":15,"nodeType":"1568","messageId":"1569","endLine":55,"endColumn":17},{"ruleId":"1566","severity":1,"message":"1567","line":75,"column":71,"nodeType":"1568","messageId":"1569","endLine":75,"endColumn":73},{"ruleId":"1566","severity":1,"message":"1567","line":102,"column":16,"nodeType":"1568","messageId":"1569","endLine":102,"endColumn":18},{"ruleId":"1566","severity":1,"message":"1567","line":103,"column":16,"nodeType":"1568","messageId":"1569","endLine":103,"endColumn":18},{"ruleId":"1566","severity":1,"message":"1567","line":108,"column":16,"nodeType":"1568","messageId":"1569","endLine":108,"endColumn":18},{"ruleId":"1566","severity":1,"message":"1567","line":109,"column":16,"nodeType":"1568","messageId":"1569","endLine":109,"endColumn":18},{"ruleId":"1473","severity":1,"message":"1664","line":12,"column":8,"nodeType":"1475","messageId":"1476","endLine":12,"endColumn":13},{"ruleId":"1473","severity":1,"message":"1675","line":41,"column":10,"nodeType":"1475","messageId":"1476","endLine":41,"endColumn":18},{"ruleId":"1473","severity":1,"message":"1676","line":47,"column":9,"nodeType":"1475","messageId":"1476","endLine":47,"endColumn":23},{"ruleId":"1566","severity":1,"message":"1567","line":58,"column":15,"nodeType":"1568","messageId":"1569","endLine":58,"endColumn":17},{"ruleId":"1566","severity":1,"message":"1567","line":81,"column":71,"nodeType":"1568","messageId":"1569","endLine":81,"endColumn":73},{"ruleId":"1566","severity":1,"message":"1567","line":110,"column":16,"nodeType":"1568","messageId":"1569","endLine":110,"endColumn":18},{"ruleId":"1566","severity":1,"message":"1567","line":111,"column":16,"nodeType":"1568","messageId":"1569","endLine":111,"endColumn":18},{"ruleId":"1566","severity":1,"message":"1567","line":112,"column":16,"nodeType":"1568","messageId":"1569","endLine":112,"endColumn":18},{"ruleId":"1473","severity":1,"message":"1677","line":116,"column":12,"nodeType":"1475","messageId":"1476","endLine":116,"endColumn":26},{"ruleId":"1566","severity":1,"message":"1567","line":117,"column":16,"nodeType":"1568","messageId":"1569","endLine":117,"endColumn":18},{"ruleId":"1566","severity":1,"message":"1567","line":118,"column":16,"nodeType":"1568","messageId":"1569","endLine":118,"endColumn":18},{"ruleId":"1566","severity":1,"message":"1567","line":119,"column":16,"nodeType":"1568","messageId":"1569","endLine":119,"endColumn":18},{"ruleId":"1473","severity":1,"message":"1678","line":124,"column":8,"nodeType":"1475","messageId":"1476","endLine":124,"endColumn":14},{"ruleId":"1473","severity":1,"message":"1679","line":124,"column":16,"nodeType":"1475","messageId":"1476","endLine":124,"endColumn":22},{"ruleId":"1473","severity":1,"message":"1680","line":193,"column":7,"nodeType":"1475","messageId":"1476","endLine":193,"endColumn":28},{"ruleId":"1480","severity":1,"message":"1641","line":41,"column":6,"nodeType":"1523","endLine":41,"endColumn":62,"suggestions":"1681"},{"ruleId":"1473","severity":1,"message":"1533","line":1,"column":17,"nodeType":"1475","messageId":"1476","endLine":1,"endColumn":24},{"ruleId":"1473","severity":1,"message":"1682","line":1,"column":26,"nodeType":"1475","messageId":"1476","endLine":1,"endColumn":36},{"ruleId":"1473","severity":1,"message":"1683","line":10,"column":8,"nodeType":"1475","messageId":"1476","endLine":10,"endColumn":36},{"ruleId":"1473","severity":1,"message":"1684","line":2,"column":8,"nodeType":"1475","messageId":"1476","endLine":2,"endColumn":14},{"ruleId":"1473","severity":1,"message":"1684","line":2,"column":8,"nodeType":"1475","messageId":"1476","endLine":2,"endColumn":14},{"ruleId":"1473","severity":1,"message":"1486","line":4,"column":18,"nodeType":"1475","messageId":"1476","endLine":4,"endColumn":22},{"ruleId":"1473","severity":1,"message":"1487","line":4,"column":24,"nodeType":"1475","messageId":"1476","endLine":4,"endColumn":35},{"ruleId":"1473","severity":1,"message":"1631","line":4,"column":37,"nodeType":"1475","messageId":"1476","endLine":4,"endColumn":47},{"ruleId":"1473","severity":1,"message":"1630","line":4,"column":49,"nodeType":"1475","messageId":"1476","endLine":4,"endColumn":53},{"ruleId":"1473","severity":1,"message":"1663","line":8,"column":8,"nodeType":"1475","messageId":"1476","endLine":8,"endColumn":16},{"ruleId":"1473","severity":1,"message":"1664","line":9,"column":8,"nodeType":"1475","messageId":"1476","endLine":9,"endColumn":13},{"ruleId":"1473","severity":1,"message":"1665","line":10,"column":8,"nodeType":"1475","messageId":"1476","endLine":10,"endColumn":13},{"ruleId":"1473","severity":1,"message":"1632","line":15,"column":8,"nodeType":"1475","messageId":"1476","endLine":15,"endColumn":19},{"ruleId":"1473","severity":1,"message":"1666","line":19,"column":8,"nodeType":"1475","messageId":"1476","endLine":19,"endColumn":20},{"ruleId":"1473","severity":1,"message":"1667","line":20,"column":8,"nodeType":"1475","messageId":"1476","endLine":20,"endColumn":15},{"ruleId":"1473","severity":1,"message":"1685","line":32,"column":9,"nodeType":"1475","messageId":"1476","endLine":32,"endColumn":18},{"ruleId":"1473","severity":1,"message":"1686","line":39,"column":9,"nodeType":"1475","messageId":"1476","endLine":39,"endColumn":24},"no-native-reassign",["1687"],"no-negated-in-lhs",["1688"],"@typescript-eslint/no-unused-vars","'useWallet' is defined but never used.","Identifier","unusedVar","'save' is defined but never used.","'load' is defined but never used.","'PERSISTED_KEYS' is assigned a value but never used.","react-hooks/exhaustive-deps","The 'transactions' conditional could make the dependencies of useEffect Hook (at line 91) change on every render. Move it inside the useEffect callback. Alternatively, wrap the initialization of 'transactions' in its own useMemo() Hook.","VariableDeclarator","no-unused-vars","'roundAndFormatNumber' is defined but never used.","'Button' is defined but never used.","'Card' is defined but never used.","'CardContent' is defined but never used.","'Paper' is defined but never used.","'kyc' is defined but never used.","'heroImg' is defined but never used.","'audit' is defined but never used.","'grapeGold' is defined but never used.","'pressImg' is defined but never used.","'newsImg' is defined but never used.","'IconTelegram' is defined but never used.","'IconDiscord' is defined but never used.","'IconTwitter' is defined but never used.","'NewspaperIcon' is defined but never used.","'Alert' is defined but never used.","'vintageImg' is defined but never used.","'vintnersGif' is defined but never used.","'grapeMimImg' is defined but never used.","'currentEpoch' is assigned a value but never used.","'tBondPriceInDollars' is assigned a value but never used.","'tBondCirculatingSupply' is assigned a value but never used.","'tBondTotalSupply' is assigned a value but never used.","'handleOpenModal' is assigned a value but never used.","'openGetStarted' is assigned a value but never used.","'printRate' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'moment' is defined but never used.","'ProgressCountdown' is defined but never used.","'scalingFactor' is assigned a value but never used.","'to' is assigned a value but never used.","'rewards' is assigned a value but never used.","'percentageStaked' is assigned a value but never used.","'grapeReserves' is assigned a value but never used.","'bondSupply' is assigned a value but never used.","'FarmCard' is defined but never used.","React Hook useEffect has a missing dependency: 'updateVesting'. Either include it or remove the dependency array.","ArrayExpression",["1689"],"'matches960' is assigned a value but never used.","'StyledValue' is assigned a value but never used.","'Route' is defined but never used.","'useRouteMatch' is defined but never used.","'Spacer' is defined but never used.","'SwapVerticalCircleIcon' is defined but never used.","'Box' is defined but never used.","'useCallback' is defined but never used.","'useMemo' is defined but never used.","'useState' is defined but never used.","'grapeImg' is defined but never used.","'wineImg' is defined but never used.","'gbondImg' is defined but never used.","'grapeRandomPosY' is assigned a value but never used.","'wineRandomPosY' is assigned a value but never used.","'gBondRandomPosY' is assigned a value but never used.","'vintageRandomPosY' is assigned a value but never used.","'grapeRandomPosX' is assigned a value but never used.","'wineRandomPosX' is assigned a value but never used.","'gBondRandomPosX' is assigned a value but never used.","'vintageRandomPosX' is assigned a value but never used.","'grapeRandomRotate' is assigned a value but never used.","'wineRandomRotate' is assigned a value but never used.","'gBondRandomRotate' is assigned a value but never used.","'vintageRandomRotate' is assigned a value but never used.","'grapeRandomScale' is assigned a value but never used.","'wineRandomScale' is assigned a value but never used.","'gBondRandomScale' is assigned a value but never used.","'vintageRandomScale' is assigned a value but never used.","'Container' is defined but never used.","'onDismissDeposit' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'account' and 'raffleAddress'. Either include them or remove the dependency array. If 'setStat' needs the current value of 'account', you can also switch to useReducer instead of useState and read 'account' in the reducer.",["1690"],"React Hook useEffect has a missing dependency: 'refreshPool'. Either include it or remove the dependency array.",["1691"],"'formatEther' is defined but never used.","'getDisplayBalance' is defined but never used.","'setCompoundValue' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'bombFinance'. Either include it or remove the dependency array.",["1692"],"'usePegPoolApprove' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useEffect' is defined but never used.","'grapeLogo' is defined but never used.","'nodesImg' is defined but never used.","'bondImg' is defined but never used.","'magikImg' is defined but never used.","'creamImg' is defined but never used.","'beefyImg' is defined but never used.","'yieldwolfImg' is defined but never used.","'debankImg' is defined but never used.","'rebatesImg' is defined but never used.","'vintage' is defined but never used.","'winemaker' is defined but never used.","'goldenGrape' is defined but never used.","'dashboardImg' is defined but never used.","'IconButton' is defined but never used.","'ListItemText' is defined but never used.","'Collapse' is defined but never used.","'StarBorder' is defined but never used.","'MenuIcon' is defined but never used.","'ExpandLess' is defined but never used.","'ExpandMore' is defined but never used.","'ChevronLeftIcon' is defined but never used.","'ChevronRightIcon' is defined but never used.","'SportsEsportsIcon' is defined but never used.","'RocketLaunchIcon' is defined but never used.","'StadiumIcon' is defined but never used.","'SavingsIcon' is defined but never used.","'AccountBalanceWalletIcon' is defined but never used.","'LinkIcon' is defined but never used.","'MenuBookIcon' is defined but never used.","'QueryStatsIcon' is defined but never used.","'MapIcon' is defined but never used.","'StorefrontIcon' is defined but never used.","'YouTubeIcon' is defined but never used.","'ShoppingCartIcon' is defined but never used.","'LeaderboardIcon' is defined but never used.","'pressIcon' is defined but never used.","'MenuItem' is defined but never used.","'KeyboardArrowDownIcon' is defined but never used.","'StyledMenu' is assigned a value but never used.","'twap' is assigned a value but never used.","'theme' is assigned a value but never used.","'handleDrawerClose' is assigned a value but never used.","'handleGamesClick' is assigned a value but never used.","'handleVaultsClick' is assigned a value but never used.","'handleWalletsClick' is assigned a value but never used.","'handleUsefullLinksClick' is assigned a value but never used.","'buyOpen' is assigned a value but never used.","'handleBuyClick' is assigned a value but never used.","'handleBuyClose' is assigned a value but never used.","'screenSM' is assigned a value but never used.","'ChainId' is defined but never used.","React Hook useCallback has a missing dependency: 'refreshPool'. Either include it or remove the dependency array.",["1693"],"'Link' is defined but never used.","'ExtinctionPoolInfo' is defined but never used.","'ExtinctionRewardToken' is defined but never used.","'Console' is defined but never used.","Expected '!==' and instead saw '!='.","'mimLogo' is defined but never used.","'Grid' is defined but never used.","'Typography' is defined but never used.","'TokenSymbol' is defined but never used.","'AprModal' is defined but never used.","'modalOpen' is assigned a value but never used.","'handleCloseModal' is assigned a value but never used.","'useStatsForPool' is defined but never used.","'PoolCardHeader' is defined but never used.","React Hook useEffect has a missing dependency: 'sectionInUI'. Either include it or remove the dependency array.",["1694"],"'width' is assigned a value but never used.","React Hook useMemo has unnecessary dependencies: 'grapeFinance' and 'token'. Either exclude them or remove the dependency array.",["1695"],"no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","React Hook useEffect has a missing dependency: 'bombFinance.contracts.PegPool'. Either include it or remove the dependency array.",["1696"],["1697"],"React Hook useEffect has a missing dependency: 'checkRewards'. Either include it or remove the dependency array.",["1698"],["1699"],"React Hook useMemo has an unnecessary dependency: 'tokenName'. Either exclude it or remove the dependency array.",["1700"],"'GridItem' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'banks'. Either include it or remove the dependency array. If 'setStat' needs the current value of 'banks', you can also switch to useReducer instead of useState and read 'banks' in the reducer.",["1701"],"'StyledCardIcon' is assigned a value but never used.","'makeStyles' is defined but never used.","'CardIcon' is defined but never used.","'Label' is defined but never used.","'Value' is defined but never used.","'ReactTooltip' is defined but never used.","'rewards' is defined but never used.","React Hook useCallback has a missing dependency: 'args'. Either include it or remove the dependency array.",["1702"],"React Hook useCallback has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","CallExpression","React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","'estimate' is assigned a value but never used.","'mimAmountPerLP' is assigned a value but never used.","'normalizeOrder' is defined but never used.","'tokenA' is assigned a value but never used.","'tokenB' is assigned a value but never used.","'StyledDescriptionText' is assigned a value but never used.",["1703"],"'useContext' is defined but never used.","'useStakedTokenPriceInDollars' is defined but never used.","'styled' is defined but never used.","'tokenName' is assigned a value but never used.","'earnedInDollars' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"1704","fix":"1705"},{"desc":"1706","fix":"1707"},{"desc":"1708","fix":"1709"},{"desc":"1710","fix":"1711"},{"desc":"1712","fix":"1713"},{"desc":"1714","fix":"1715"},{"desc":"1716","fix":"1717"},{"desc":"1718","fix":"1719"},{"desc":"1712","fix":"1720"},{"desc":"1721","fix":"1722"},{"desc":"1723","fix":"1724"},{"desc":"1725","fix":"1726"},{"desc":"1727","fix":"1728"},{"desc":"1729","fix":"1730"},{"desc":"1716","fix":"1731"},"Update the dependencies array to be: [updateVesting]",{"range":"1732","text":"1733"},"Update the dependencies array to be: [setStat, grapeFinance, fastRefresh, account, raffleAddress]",{"range":"1734","text":"1735"},"Update the dependencies array to be: [bombFinance, fetchPool, isUnlocked, refreshPool, slowRefresh]",{"range":"1736","text":"1737"},"Update the dependencies array to be: [bombFinance, isUnlocked, pegPool]",{"range":"1738","text":"1739"},"Update the dependencies array to be: [handleTransactionReceipt, bombFinance, pool.depositTokenName, refreshPool]",{"range":"1740","text":"1741"},"Update the dependencies array to be: [poolName, setAmount, grapeFinance, fetchAmount, sectionInUI]",{"range":"1742","text":"1743"},"Update the dependencies array to be: [currentAllowance, pendingApproval]",{"range":"1744","text":"1745"},"Update the dependencies array to be: [bombFinance.contracts.PegPool, isUnlocked]",{"range":"1746","text":"1747"},{"range":"1748","text":"1741"},"Update the dependencies array to be: [checkRewards, rewardTokens]",{"range":"1749","text":"1750"},"Update the dependencies array to be: [bombFinance, handleTransactionReceipt, refreshPool]",{"range":"1751","text":"1752"},"Update the dependencies array to be: [max]",{"range":"1753","text":"1754"},"Update the dependencies array to be: [setStat, grapeFinance, fastRefresh, banks]",{"range":"1755","text":"1756"},"Update the dependencies array to be: [args, grapeFinance]",{"range":"1757","text":"1758"},{"range":"1759","text":"1745"},[1836,1838],"[updateVesting]",[628,664],"[setStat, grapeFinance, fastRefresh, account, raffleAddress]",[759,808],"[bombFinance, fetchPool, isUnlocked, refreshPool, slowRefresh]",[2696,2717],"[bombFinance, isUnlocked, pegPool]",[849,894],"[handleTransactionReceipt, bombFinance, pool.depositTokenName, refreshPool]",[905,953],"[poolName, setAmount, grapeFinance, fetchAmount, sectionInUI]",[1579,1635],"[currentAllowance, pendingApproval]",[1113,1125],"[bombFinance.contracts.PegPool, isUnlocked]",[865,910],[1246,1260],"[checkRewards, rewardTokens]",[620,659],"[bombFinance, handleTransactionReceipt, refreshPool]",[1426,1442],"[max]",[590,626],"[setStat, grapeFinance, fastRefresh, banks]",[1039,1075],"[args, grapeFinance]",[1749,1805]]